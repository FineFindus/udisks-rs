// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../..
// from ../../gir-files
// DO NOT EDIT

#![cfg(unix)]

use udisks_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::{Command, Stdio};
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["udisks2"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {cmd:?} failed, {status}").into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{name} {err}").into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing ';' separator");
        c_constants.push((name.to_owned(), value.to_owned()));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {rust_name}\nRust: {rust_value:?}\nC:    {c_value:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let (name, value) = l.split_once(';').expect("Missing first ';' separator");
        let (size, alignment) = value.split_once(';').expect("Missing second ';' separator");
        let size = size.parse().expect("Failed to parse size");
        let alignment = alignment.parse().expect("Failed to parse alignment");
        c_layouts.push((name.to_owned(), Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {rust_name:?}\nC:    {c_name:?}");
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {rust_name}\nRust: {rust_layout:?}\nC:    {c_layout:?}",
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut cmd = Command::new(exe);
    cmd.stderr(Stdio::inherit());
    let out = cmd.output()?;
    if !out.status.success() {
        let (status, stdout) = (out.status, String::from_utf8_lossy(&out.stdout));
        return Err(format!("command {cmd:?} failed, {status:?}\nstdout: {stdout}").into());
    }

    Ok(String::from_utf8(out.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("UDisksBlockIface", Layout {size: size_of::<UDisksBlockIface>(), alignment: align_of::<UDisksBlockIface>()}),
    ("UDisksBlockLVM2Iface", Layout {size: size_of::<UDisksBlockLVM2Iface>(), alignment: align_of::<UDisksBlockLVM2Iface>()}),
    ("UDisksBlockLVM2Proxy", Layout {size: size_of::<UDisksBlockLVM2Proxy>(), alignment: align_of::<UDisksBlockLVM2Proxy>()}),
    ("UDisksBlockLVM2ProxyClass", Layout {size: size_of::<UDisksBlockLVM2ProxyClass>(), alignment: align_of::<UDisksBlockLVM2ProxyClass>()}),
    ("UDisksBlockLVM2Skeleton", Layout {size: size_of::<UDisksBlockLVM2Skeleton>(), alignment: align_of::<UDisksBlockLVM2Skeleton>()}),
    ("UDisksBlockLVM2SkeletonClass", Layout {size: size_of::<UDisksBlockLVM2SkeletonClass>(), alignment: align_of::<UDisksBlockLVM2SkeletonClass>()}),
    ("UDisksBlockProxy", Layout {size: size_of::<UDisksBlockProxy>(), alignment: align_of::<UDisksBlockProxy>()}),
    ("UDisksBlockProxyClass", Layout {size: size_of::<UDisksBlockProxyClass>(), alignment: align_of::<UDisksBlockProxyClass>()}),
    ("UDisksBlockSkeleton", Layout {size: size_of::<UDisksBlockSkeleton>(), alignment: align_of::<UDisksBlockSkeleton>()}),
    ("UDisksBlockSkeletonClass", Layout {size: size_of::<UDisksBlockSkeletonClass>(), alignment: align_of::<UDisksBlockSkeletonClass>()}),
    ("UDisksDriveAtaIface", Layout {size: size_of::<UDisksDriveAtaIface>(), alignment: align_of::<UDisksDriveAtaIface>()}),
    ("UDisksDriveAtaProxy", Layout {size: size_of::<UDisksDriveAtaProxy>(), alignment: align_of::<UDisksDriveAtaProxy>()}),
    ("UDisksDriveAtaProxyClass", Layout {size: size_of::<UDisksDriveAtaProxyClass>(), alignment: align_of::<UDisksDriveAtaProxyClass>()}),
    ("UDisksDriveAtaSkeleton", Layout {size: size_of::<UDisksDriveAtaSkeleton>(), alignment: align_of::<UDisksDriveAtaSkeleton>()}),
    ("UDisksDriveAtaSkeletonClass", Layout {size: size_of::<UDisksDriveAtaSkeletonClass>(), alignment: align_of::<UDisksDriveAtaSkeletonClass>()}),
    ("UDisksDriveIface", Layout {size: size_of::<UDisksDriveIface>(), alignment: align_of::<UDisksDriveIface>()}),
    ("UDisksDriveProxy", Layout {size: size_of::<UDisksDriveProxy>(), alignment: align_of::<UDisksDriveProxy>()}),
    ("UDisksDriveProxyClass", Layout {size: size_of::<UDisksDriveProxyClass>(), alignment: align_of::<UDisksDriveProxyClass>()}),
    ("UDisksDriveSkeleton", Layout {size: size_of::<UDisksDriveSkeleton>(), alignment: align_of::<UDisksDriveSkeleton>()}),
    ("UDisksDriveSkeletonClass", Layout {size: size_of::<UDisksDriveSkeletonClass>(), alignment: align_of::<UDisksDriveSkeletonClass>()}),
    ("UDisksEncryptedIface", Layout {size: size_of::<UDisksEncryptedIface>(), alignment: align_of::<UDisksEncryptedIface>()}),
    ("UDisksEncryptedProxy", Layout {size: size_of::<UDisksEncryptedProxy>(), alignment: align_of::<UDisksEncryptedProxy>()}),
    ("UDisksEncryptedProxyClass", Layout {size: size_of::<UDisksEncryptedProxyClass>(), alignment: align_of::<UDisksEncryptedProxyClass>()}),
    ("UDisksEncryptedSkeleton", Layout {size: size_of::<UDisksEncryptedSkeleton>(), alignment: align_of::<UDisksEncryptedSkeleton>()}),
    ("UDisksEncryptedSkeletonClass", Layout {size: size_of::<UDisksEncryptedSkeletonClass>(), alignment: align_of::<UDisksEncryptedSkeletonClass>()}),
    ("UDisksError", Layout {size: size_of::<UDisksError>(), alignment: align_of::<UDisksError>()}),
    ("UDisksFilesystemBTRFSIface", Layout {size: size_of::<UDisksFilesystemBTRFSIface>(), alignment: align_of::<UDisksFilesystemBTRFSIface>()}),
    ("UDisksFilesystemBTRFSProxy", Layout {size: size_of::<UDisksFilesystemBTRFSProxy>(), alignment: align_of::<UDisksFilesystemBTRFSProxy>()}),
    ("UDisksFilesystemBTRFSProxyClass", Layout {size: size_of::<UDisksFilesystemBTRFSProxyClass>(), alignment: align_of::<UDisksFilesystemBTRFSProxyClass>()}),
    ("UDisksFilesystemBTRFSSkeleton", Layout {size: size_of::<UDisksFilesystemBTRFSSkeleton>(), alignment: align_of::<UDisksFilesystemBTRFSSkeleton>()}),
    ("UDisksFilesystemBTRFSSkeletonClass", Layout {size: size_of::<UDisksFilesystemBTRFSSkeletonClass>(), alignment: align_of::<UDisksFilesystemBTRFSSkeletonClass>()}),
    ("UDisksFilesystemIface", Layout {size: size_of::<UDisksFilesystemIface>(), alignment: align_of::<UDisksFilesystemIface>()}),
    ("UDisksFilesystemProxy", Layout {size: size_of::<UDisksFilesystemProxy>(), alignment: align_of::<UDisksFilesystemProxy>()}),
    ("UDisksFilesystemProxyClass", Layout {size: size_of::<UDisksFilesystemProxyClass>(), alignment: align_of::<UDisksFilesystemProxyClass>()}),
    ("UDisksFilesystemSkeleton", Layout {size: size_of::<UDisksFilesystemSkeleton>(), alignment: align_of::<UDisksFilesystemSkeleton>()}),
    ("UDisksFilesystemSkeletonClass", Layout {size: size_of::<UDisksFilesystemSkeletonClass>(), alignment: align_of::<UDisksFilesystemSkeletonClass>()}),
    ("UDisksJobIface", Layout {size: size_of::<UDisksJobIface>(), alignment: align_of::<UDisksJobIface>()}),
    ("UDisksJobProxy", Layout {size: size_of::<UDisksJobProxy>(), alignment: align_of::<UDisksJobProxy>()}),
    ("UDisksJobProxyClass", Layout {size: size_of::<UDisksJobProxyClass>(), alignment: align_of::<UDisksJobProxyClass>()}),
    ("UDisksJobSkeleton", Layout {size: size_of::<UDisksJobSkeleton>(), alignment: align_of::<UDisksJobSkeleton>()}),
    ("UDisksJobSkeletonClass", Layout {size: size_of::<UDisksJobSkeletonClass>(), alignment: align_of::<UDisksJobSkeletonClass>()}),
    ("UDisksLogicalVolumeIface", Layout {size: size_of::<UDisksLogicalVolumeIface>(), alignment: align_of::<UDisksLogicalVolumeIface>()}),
    ("UDisksLogicalVolumeProxy", Layout {size: size_of::<UDisksLogicalVolumeProxy>(), alignment: align_of::<UDisksLogicalVolumeProxy>()}),
    ("UDisksLogicalVolumeProxyClass", Layout {size: size_of::<UDisksLogicalVolumeProxyClass>(), alignment: align_of::<UDisksLogicalVolumeProxyClass>()}),
    ("UDisksLogicalVolumeSkeleton", Layout {size: size_of::<UDisksLogicalVolumeSkeleton>(), alignment: align_of::<UDisksLogicalVolumeSkeleton>()}),
    ("UDisksLogicalVolumeSkeletonClass", Layout {size: size_of::<UDisksLogicalVolumeSkeletonClass>(), alignment: align_of::<UDisksLogicalVolumeSkeletonClass>()}),
    ("UDisksLoopIface", Layout {size: size_of::<UDisksLoopIface>(), alignment: align_of::<UDisksLoopIface>()}),
    ("UDisksLoopProxy", Layout {size: size_of::<UDisksLoopProxy>(), alignment: align_of::<UDisksLoopProxy>()}),
    ("UDisksLoopProxyClass", Layout {size: size_of::<UDisksLoopProxyClass>(), alignment: align_of::<UDisksLoopProxyClass>()}),
    ("UDisksLoopSkeleton", Layout {size: size_of::<UDisksLoopSkeleton>(), alignment: align_of::<UDisksLoopSkeleton>()}),
    ("UDisksLoopSkeletonClass", Layout {size: size_of::<UDisksLoopSkeletonClass>(), alignment: align_of::<UDisksLoopSkeletonClass>()}),
    ("UDisksMDRaidIface", Layout {size: size_of::<UDisksMDRaidIface>(), alignment: align_of::<UDisksMDRaidIface>()}),
    ("UDisksMDRaidProxy", Layout {size: size_of::<UDisksMDRaidProxy>(), alignment: align_of::<UDisksMDRaidProxy>()}),
    ("UDisksMDRaidProxyClass", Layout {size: size_of::<UDisksMDRaidProxyClass>(), alignment: align_of::<UDisksMDRaidProxyClass>()}),
    ("UDisksMDRaidSkeleton", Layout {size: size_of::<UDisksMDRaidSkeleton>(), alignment: align_of::<UDisksMDRaidSkeleton>()}),
    ("UDisksMDRaidSkeletonClass", Layout {size: size_of::<UDisksMDRaidSkeletonClass>(), alignment: align_of::<UDisksMDRaidSkeletonClass>()}),
    ("UDisksManagerBTRFSIface", Layout {size: size_of::<UDisksManagerBTRFSIface>(), alignment: align_of::<UDisksManagerBTRFSIface>()}),
    ("UDisksManagerBTRFSProxy", Layout {size: size_of::<UDisksManagerBTRFSProxy>(), alignment: align_of::<UDisksManagerBTRFSProxy>()}),
    ("UDisksManagerBTRFSProxyClass", Layout {size: size_of::<UDisksManagerBTRFSProxyClass>(), alignment: align_of::<UDisksManagerBTRFSProxyClass>()}),
    ("UDisksManagerBTRFSSkeleton", Layout {size: size_of::<UDisksManagerBTRFSSkeleton>(), alignment: align_of::<UDisksManagerBTRFSSkeleton>()}),
    ("UDisksManagerBTRFSSkeletonClass", Layout {size: size_of::<UDisksManagerBTRFSSkeletonClass>(), alignment: align_of::<UDisksManagerBTRFSSkeletonClass>()}),
    ("UDisksManagerIface", Layout {size: size_of::<UDisksManagerIface>(), alignment: align_of::<UDisksManagerIface>()}),
    ("UDisksManagerLVM2Iface", Layout {size: size_of::<UDisksManagerLVM2Iface>(), alignment: align_of::<UDisksManagerLVM2Iface>()}),
    ("UDisksManagerLVM2Proxy", Layout {size: size_of::<UDisksManagerLVM2Proxy>(), alignment: align_of::<UDisksManagerLVM2Proxy>()}),
    ("UDisksManagerLVM2ProxyClass", Layout {size: size_of::<UDisksManagerLVM2ProxyClass>(), alignment: align_of::<UDisksManagerLVM2ProxyClass>()}),
    ("UDisksManagerLVM2Skeleton", Layout {size: size_of::<UDisksManagerLVM2Skeleton>(), alignment: align_of::<UDisksManagerLVM2Skeleton>()}),
    ("UDisksManagerLVM2SkeletonClass", Layout {size: size_of::<UDisksManagerLVM2SkeletonClass>(), alignment: align_of::<UDisksManagerLVM2SkeletonClass>()}),
    ("UDisksManagerProxy", Layout {size: size_of::<UDisksManagerProxy>(), alignment: align_of::<UDisksManagerProxy>()}),
    ("UDisksManagerProxyClass", Layout {size: size_of::<UDisksManagerProxyClass>(), alignment: align_of::<UDisksManagerProxyClass>()}),
    ("UDisksManagerSkeleton", Layout {size: size_of::<UDisksManagerSkeleton>(), alignment: align_of::<UDisksManagerSkeleton>()}),
    ("UDisksManagerSkeletonClass", Layout {size: size_of::<UDisksManagerSkeletonClass>(), alignment: align_of::<UDisksManagerSkeletonClass>()}),
    ("UDisksObjectIface", Layout {size: size_of::<UDisksObjectIface>(), alignment: align_of::<UDisksObjectIface>()}),
    ("UDisksObjectManagerClient", Layout {size: size_of::<UDisksObjectManagerClient>(), alignment: align_of::<UDisksObjectManagerClient>()}),
    ("UDisksObjectManagerClientClass", Layout {size: size_of::<UDisksObjectManagerClientClass>(), alignment: align_of::<UDisksObjectManagerClientClass>()}),
    ("UDisksObjectProxy", Layout {size: size_of::<UDisksObjectProxy>(), alignment: align_of::<UDisksObjectProxy>()}),
    ("UDisksObjectProxyClass", Layout {size: size_of::<UDisksObjectProxyClass>(), alignment: align_of::<UDisksObjectProxyClass>()}),
    ("UDisksObjectSkeleton", Layout {size: size_of::<UDisksObjectSkeleton>(), alignment: align_of::<UDisksObjectSkeleton>()}),
    ("UDisksObjectSkeletonClass", Layout {size: size_of::<UDisksObjectSkeletonClass>(), alignment: align_of::<UDisksObjectSkeletonClass>()}),
    ("UDisksPartitionIface", Layout {size: size_of::<UDisksPartitionIface>(), alignment: align_of::<UDisksPartitionIface>()}),
    ("UDisksPartitionProxy", Layout {size: size_of::<UDisksPartitionProxy>(), alignment: align_of::<UDisksPartitionProxy>()}),
    ("UDisksPartitionProxyClass", Layout {size: size_of::<UDisksPartitionProxyClass>(), alignment: align_of::<UDisksPartitionProxyClass>()}),
    ("UDisksPartitionSkeleton", Layout {size: size_of::<UDisksPartitionSkeleton>(), alignment: align_of::<UDisksPartitionSkeleton>()}),
    ("UDisksPartitionSkeletonClass", Layout {size: size_of::<UDisksPartitionSkeletonClass>(), alignment: align_of::<UDisksPartitionSkeletonClass>()}),
    ("UDisksPartitionTableIface", Layout {size: size_of::<UDisksPartitionTableIface>(), alignment: align_of::<UDisksPartitionTableIface>()}),
    ("UDisksPartitionTableProxy", Layout {size: size_of::<UDisksPartitionTableProxy>(), alignment: align_of::<UDisksPartitionTableProxy>()}),
    ("UDisksPartitionTableProxyClass", Layout {size: size_of::<UDisksPartitionTableProxyClass>(), alignment: align_of::<UDisksPartitionTableProxyClass>()}),
    ("UDisksPartitionTableSkeleton", Layout {size: size_of::<UDisksPartitionTableSkeleton>(), alignment: align_of::<UDisksPartitionTableSkeleton>()}),
    ("UDisksPartitionTableSkeletonClass", Layout {size: size_of::<UDisksPartitionTableSkeletonClass>(), alignment: align_of::<UDisksPartitionTableSkeletonClass>()}),
    ("UDisksPartitionTypeInfo", Layout {size: size_of::<UDisksPartitionTypeInfo>(), alignment: align_of::<UDisksPartitionTypeInfo>()}),
    ("UDisksPartitionTypeInfoFlags", Layout {size: size_of::<UDisksPartitionTypeInfoFlags>(), alignment: align_of::<UDisksPartitionTypeInfoFlags>()}),
    ("UDisksPhysicalVolumeIface", Layout {size: size_of::<UDisksPhysicalVolumeIface>(), alignment: align_of::<UDisksPhysicalVolumeIface>()}),
    ("UDisksPhysicalVolumeProxy", Layout {size: size_of::<UDisksPhysicalVolumeProxy>(), alignment: align_of::<UDisksPhysicalVolumeProxy>()}),
    ("UDisksPhysicalVolumeProxyClass", Layout {size: size_of::<UDisksPhysicalVolumeProxyClass>(), alignment: align_of::<UDisksPhysicalVolumeProxyClass>()}),
    ("UDisksPhysicalVolumeSkeleton", Layout {size: size_of::<UDisksPhysicalVolumeSkeleton>(), alignment: align_of::<UDisksPhysicalVolumeSkeleton>()}),
    ("UDisksPhysicalVolumeSkeletonClass", Layout {size: size_of::<UDisksPhysicalVolumeSkeletonClass>(), alignment: align_of::<UDisksPhysicalVolumeSkeletonClass>()}),
    ("UDisksSwapspaceIface", Layout {size: size_of::<UDisksSwapspaceIface>(), alignment: align_of::<UDisksSwapspaceIface>()}),
    ("UDisksSwapspaceProxy", Layout {size: size_of::<UDisksSwapspaceProxy>(), alignment: align_of::<UDisksSwapspaceProxy>()}),
    ("UDisksSwapspaceProxyClass", Layout {size: size_of::<UDisksSwapspaceProxyClass>(), alignment: align_of::<UDisksSwapspaceProxyClass>()}),
    ("UDisksSwapspaceSkeleton", Layout {size: size_of::<UDisksSwapspaceSkeleton>(), alignment: align_of::<UDisksSwapspaceSkeleton>()}),
    ("UDisksSwapspaceSkeletonClass", Layout {size: size_of::<UDisksSwapspaceSkeletonClass>(), alignment: align_of::<UDisksSwapspaceSkeletonClass>()}),
    ("UDisksVDOVolumeIface", Layout {size: size_of::<UDisksVDOVolumeIface>(), alignment: align_of::<UDisksVDOVolumeIface>()}),
    ("UDisksVDOVolumeProxy", Layout {size: size_of::<UDisksVDOVolumeProxy>(), alignment: align_of::<UDisksVDOVolumeProxy>()}),
    ("UDisksVDOVolumeProxyClass", Layout {size: size_of::<UDisksVDOVolumeProxyClass>(), alignment: align_of::<UDisksVDOVolumeProxyClass>()}),
    ("UDisksVDOVolumeSkeleton", Layout {size: size_of::<UDisksVDOVolumeSkeleton>(), alignment: align_of::<UDisksVDOVolumeSkeleton>()}),
    ("UDisksVDOVolumeSkeletonClass", Layout {size: size_of::<UDisksVDOVolumeSkeletonClass>(), alignment: align_of::<UDisksVDOVolumeSkeletonClass>()}),
    ("UDisksVolumeGroupIface", Layout {size: size_of::<UDisksVolumeGroupIface>(), alignment: align_of::<UDisksVolumeGroupIface>()}),
    ("UDisksVolumeGroupProxy", Layout {size: size_of::<UDisksVolumeGroupProxy>(), alignment: align_of::<UDisksVolumeGroupProxy>()}),
    ("UDisksVolumeGroupProxyClass", Layout {size: size_of::<UDisksVolumeGroupProxyClass>(), alignment: align_of::<UDisksVolumeGroupProxyClass>()}),
    ("UDisksVolumeGroupSkeleton", Layout {size: size_of::<UDisksVolumeGroupSkeleton>(), alignment: align_of::<UDisksVolumeGroupSkeleton>()}),
    ("UDisksVolumeGroupSkeletonClass", Layout {size: size_of::<UDisksVolumeGroupSkeletonClass>(), alignment: align_of::<UDisksVolumeGroupSkeletonClass>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) UDISKS_ERROR_ALREADY_CANCELLED", "2"),
    ("(gint) UDISKS_ERROR_ALREADY_MOUNTED", "6"),
    ("(gint) UDISKS_ERROR_ALREADY_UNMOUNTING", "10"),
    ("(gint) UDISKS_ERROR_CANCELLED", "1"),
    ("(gint) UDISKS_ERROR_DEVICE_BUSY", "14"),
    ("(gint) UDISKS_ERROR_FAILED", "0"),
    ("(gint) UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED", "15"),
    ("(gint) UDISKS_ERROR_ISCSI_HOST_NOT_FOUND", "16"),
    ("(gint) UDISKS_ERROR_ISCSI_IDMB", "17"),
    ("(gint) UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED", "19"),
    ("(gint) UDISKS_ERROR_ISCSI_LOGIN_FAILED", "18"),
    ("(gint) UDISKS_ERROR_ISCSI_LOGIN_FATAL", "20"),
    ("(gint) UDISKS_ERROR_ISCSI_LOGOUT_FAILED", "21"),
    ("(gint) UDISKS_ERROR_ISCSI_NOT_CONNECTED", "24"),
    ("(gint) UDISKS_ERROR_ISCSI_NO_FIRMWARE", "22"),
    ("(gint) UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND", "23"),
    ("(gint) UDISKS_ERROR_ISCSI_TRANSPORT_FAILED", "25"),
    ("(gint) UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE", "26"),
    ("(gint) UDISKS_ERROR_MOUNTED_BY_OTHER_USER", "9"),
    ("(gint) UDISKS_ERROR_NOT_AUTHORIZED", "3"),
    ("(gint) UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN", "4"),
    ("(gint) UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED", "5"),
    ("(gint) UDISKS_ERROR_NOT_MOUNTED", "7"),
    ("(gint) UDISKS_ERROR_NOT_SUPPORTED", "11"),
    ("UDISKS_ERROR_NUM_ENTRIES", "27"),
    ("(gint) UDISKS_ERROR_OPTION_NOT_PERMITTED", "8"),
    ("(gint) UDISKS_ERROR_TIMED_OUT", "12"),
    ("(gint) UDISKS_ERROR_WOULD_WAKEUP", "13"),
    ("UDISKS_MAJOR_VERSION", "2"),
    ("UDISKS_MICRO_VERSION", "4"),
    ("UDISKS_MINOR_VERSION", "9"),
    ("(guint) UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY", "8"),
    ("(guint) UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN", "4"),
    ("(guint) UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE", "0"),
    ("(guint) UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID", "2"),
    ("(guint) UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP", "1"),
    ("(guint) UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM", "16"),
];


