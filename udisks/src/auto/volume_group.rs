// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksVolumeGroup")]
    pub struct VolumeGroup(Interface<ffi::UDisksVolumeGroup, ffi::UDisksVolumeGroupIface>);

    match fn {
        type_ => || ffi::udisks_volume_group_get_type(),
    }
}

impl VolumeGroup {
        pub const NONE: Option<&'static VolumeGroup> = None;
    

    //#[doc(alias = "udisks_volume_group_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_volume_group_interface_info() }
    //}

    //#[doc(alias = "udisks_volume_group_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_volume_group_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::VolumeGroup>> Sealed for T {}
}

pub trait VolumeGroupExt: IsA<VolumeGroup> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_volume_group_call_add_device")]
    //fn call_add_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_block: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_add_device() }
    //}

    //
    //fn call_add_device_future(&self, arg_block: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_block = String::from(arg_block);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_add_device(
        //        &arg_block,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_add_device_sync")]
    //fn call_add_device_sync(&self, arg_block: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_add_device_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_create_plain_volume")]
    //fn call_create_plain_volume<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_plain_volume() }
    //}

    //
    //fn call_create_plain_volume_future(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_plain_volume(
        //        &arg_name,
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_create_plain_volume_sync")]
    //fn call_create_plain_volume_sync(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_plain_volume_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_create_thin_pool_volume")]
    //fn call_create_thin_pool_volume<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_thin_pool_volume() }
    //}

    //
    //fn call_create_thin_pool_volume_future(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_thin_pool_volume(
        //        &arg_name,
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_create_thin_pool_volume_sync")]
    //fn call_create_thin_pool_volume_sync(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_thin_pool_volume_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_create_thin_volume")]
    //fn call_create_thin_volume<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_size: u64, arg_pool: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_thin_volume() }
    //}

    //
    //fn call_create_thin_volume_future(&self, arg_name: &str, arg_size: u64, arg_pool: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_pool = String::from(arg_pool);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_thin_volume(
        //        &arg_name,
        //        arg_size,
        //        &arg_pool,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_create_thin_volume_sync")]
    //fn call_create_thin_volume_sync(&self, arg_name: &str, arg_size: u64, arg_pool: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_thin_volume_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_create_vdo_volume")]
    //fn call_create_vdo_volume<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_lv_name: &str, arg_pool_name: &str, arg_data_size: u64, arg_virtual_size: u64, arg_index_memory: u64, arg_compression: bool, arg_deduplication: bool, arg_write_policy: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_vdo_volume() }
    //}

    //
    //fn call_create_vdo_volume_future(&self, arg_lv_name: &str, arg_pool_name: &str, arg_data_size: u64, arg_virtual_size: u64, arg_index_memory: u64, arg_compression: bool, arg_deduplication: bool, arg_write_policy: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_lv_name = String::from(arg_lv_name);
        //let arg_pool_name = String::from(arg_pool_name);
        //let arg_write_policy = String::from(arg_write_policy);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_vdo_volume(
        //        &arg_lv_name,
        //        &arg_pool_name,
        //        arg_data_size,
        //        arg_virtual_size,
        //        arg_index_memory,
        //        arg_compression,
        //        arg_deduplication,
        //        &arg_write_policy,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_create_vdo_volume_sync")]
    //fn call_create_vdo_volume_sync(&self, arg_lv_name: &str, arg_pool_name: &str, arg_data_size: u64, arg_virtual_size: u64, arg_index_memory: u64, arg_compression: bool, arg_deduplication: bool, arg_write_policy: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_create_vdo_volume_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_delete")]
    //fn call_delete<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_wipe: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_delete() }
    //}

    //
    //fn call_delete_future(&self, arg_wipe: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_delete(
        //        arg_wipe,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_delete_sync")]
    //fn call_delete_sync(&self, arg_wipe: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_delete_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_empty_device")]
    //fn call_empty_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_block: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_empty_device() }
    //}

    //
    //fn call_empty_device_future(&self, arg_block: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_block = String::from(arg_block);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_empty_device(
        //        &arg_block,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_empty_device_sync")]
    //fn call_empty_device_sync(&self, arg_block: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_empty_device_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_poll")]
    //fn call_poll<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_poll() }
    //}

    //
    //fn call_poll_future(&self) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_poll(
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_poll_sync")]
    //fn call_poll_sync(&self, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_poll_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_remove_device")]
    //fn call_remove_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_block: &str, arg_wipe: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_remove_device() }
    //}

    //
    //fn call_remove_device_future(&self, arg_block: &str, arg_wipe: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_block = String::from(arg_block);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_remove_device(
        //        &arg_block,
        //        arg_wipe,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_remove_device_sync")]
    //fn call_remove_device_sync(&self, arg_block: &str, arg_wipe: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_remove_device_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_call_rename")]
    //fn call_rename<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_new_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_rename() }
    //}

    //
    //fn call_rename_future(&self, arg_new_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_new_name = String::from(arg_new_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_rename(
        //        &arg_new_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_volume_group_call_rename_sync")]
    //fn call_rename_sync(&self, arg_new_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_volume_group_call_rename_sync() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_add_device")]
    //fn complete_add_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_add_device() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_create_plain_volume")]
    //fn complete_create_plain_volume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_create_plain_volume() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_create_thin_pool_volume")]
    //fn complete_create_thin_pool_volume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_create_thin_pool_volume() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_create_thin_volume")]
    //fn complete_create_thin_volume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_create_thin_volume() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_create_vdo_volume")]
    //fn complete_create_vdo_volume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_create_vdo_volume() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_delete")]
    //fn complete_delete(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_delete() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_empty_device")]
    //fn complete_empty_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_empty_device() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_poll")]
    //fn complete_poll(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_poll() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_remove_device")]
    //fn complete_remove_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_remove_device() }
    //}

    //#[doc(alias = "udisks_volume_group_complete_rename")]
    //fn complete_rename(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_volume_group_complete_rename() }
    //}

    #[doc(alias = "udisks_volume_group_dup_name")]
    fn dup_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_volume_group_dup_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_volume_group_dup_uuid")]
    fn dup_uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_volume_group_dup_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_volume_group_get_extent_size")]
    #[doc(alias = "get_extent_size")]
    fn extent_size(&self) -> u64 {
        unsafe {
            ffi::udisks_volume_group_get_extent_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_volume_group_get_free_size")]
    #[doc(alias = "get_free_size")]
    fn free_size(&self) -> u64 {
        unsafe {
            ffi::udisks_volume_group_get_free_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_volume_group_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_volume_group_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_volume_group_get_needs_polling")]
    #[doc(alias = "get_needs_polling")]
    fn needs_polling(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_volume_group_get_needs_polling(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_volume_group_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::udisks_volume_group_get_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_volume_group_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_volume_group_get_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_volume_group_set_extent_size")]
    fn set_extent_size(&self, value: u64) {
        unsafe {
            ffi::udisks_volume_group_set_extent_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_volume_group_set_free_size")]
    fn set_free_size(&self, value: u64) {
        unsafe {
            ffi::udisks_volume_group_set_free_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_volume_group_set_name")]
    fn set_name(&self, value: &str) {
        unsafe {
            ffi::udisks_volume_group_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_volume_group_set_needs_polling")]
    fn set_needs_polling(&self, value: bool) {
        unsafe {
            ffi::udisks_volume_group_set_needs_polling(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_volume_group_set_size")]
    fn set_size(&self, value: u64) {
        unsafe {
            ffi::udisks_volume_group_set_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_volume_group_set_uuid")]
    fn set_uuid(&self, value: &str) {
        unsafe {
            ffi::udisks_volume_group_set_uuid(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[doc(alias = "handle-add-device")]
    //fn connect_handle_add_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-create-plain-volume")]
    //fn connect_handle_create_plain_volume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-create-thin-pool-volume")]
    //fn connect_handle_create_thin_pool_volume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-create-thin-volume")]
    //fn connect_handle_create_thin_volume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-create-vdo-volume")]
    //fn connect_handle_create_vdo_volume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-delete")]
    //fn connect_handle_delete<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-empty-device")]
    //fn connect_handle_empty_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-poll")]
    //fn connect_handle_poll<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[doc(alias = "handle-remove-device")]
    //fn connect_handle_remove_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-rename")]
    //fn connect_handle_rename<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "extent-size")]
    fn connect_extent_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_extent_size_trampoline<P: IsA<VolumeGroup>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVolumeGroup, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VolumeGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::extent-size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_extent_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "free-size")]
    fn connect_free_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_free_size_trampoline<P: IsA<VolumeGroup>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVolumeGroup, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VolumeGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::free-size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_free_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<VolumeGroup>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVolumeGroup, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VolumeGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "needs-polling")]
    fn connect_needs_polling_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_needs_polling_trampoline<P: IsA<VolumeGroup>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVolumeGroup, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VolumeGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::needs-polling\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_needs_polling_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<VolumeGroup>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVolumeGroup, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VolumeGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<P: IsA<VolumeGroup>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVolumeGroup, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VolumeGroup::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uuid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_uuid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<VolumeGroup>> VolumeGroupExt for O {}
