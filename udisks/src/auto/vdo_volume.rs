// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksVDOVolume")]
    pub struct VDOVolume(Interface<ffi::UDisksVDOVolume, ffi::UDisksVDOVolumeIface>);

    match fn {
        type_ => || ffi::udisks_vdo_volume_get_type(),
    }
}

impl VDOVolume {
        pub const NONE: Option<&'static VDOVolume> = None;
    

    //#[doc(alias = "udisks_vdo_volume_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_interface_info() }
    //}

    //#[doc(alias = "udisks_vdo_volume_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::VDOVolume>> Sealed for T {}
}

pub trait VDOVolumeExt: IsA<VDOVolume> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_vdo_volume_call_enable_compression")]
    //fn call_enable_compression<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_enable: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_enable_compression() }
    //}

    //
    //fn call_enable_compression_future(&self, arg_enable: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_enable_compression(
        //        arg_enable,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_vdo_volume_call_enable_compression_sync")]
    //fn call_enable_compression_sync(&self, arg_enable: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_enable_compression_sync() }
    //}

    //#[doc(alias = "udisks_vdo_volume_call_enable_deduplication")]
    //fn call_enable_deduplication<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_enable: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_enable_deduplication() }
    //}

    //
    //fn call_enable_deduplication_future(&self, arg_enable: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_enable_deduplication(
        //        arg_enable,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_vdo_volume_call_enable_deduplication_sync")]
    //fn call_enable_deduplication_sync(&self, arg_enable: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_enable_deduplication_sync() }
    //}

    //#[doc(alias = "udisks_vdo_volume_call_get_statistics")]
    //fn call_get_statistics<P: FnOnce(Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_get_statistics() }
    //}

    //
    //fn call_get_statistics_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_get_statistics(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_vdo_volume_call_get_statistics_sync")]
    //fn call_get_statistics_sync(&self, arg_options: /*Ignored*/&glib::Variant, out_stats: /*Ignored*/glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_get_statistics_sync() }
    //}

    //#[doc(alias = "udisks_vdo_volume_call_resize_logical")]
    //fn call_resize_logical<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_resize_logical() }
    //}

    //
    //fn call_resize_logical_future(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize_logical(
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_vdo_volume_call_resize_logical_sync")]
    //fn call_resize_logical_sync(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_resize_logical_sync() }
    //}

    //#[doc(alias = "udisks_vdo_volume_call_resize_physical")]
    //fn call_resize_physical<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_resize_physical() }
    //}

    //
    //fn call_resize_physical_future(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize_physical(
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_vdo_volume_call_resize_physical_sync")]
    //fn call_resize_physical_sync(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_call_resize_physical_sync() }
    //}

    //#[doc(alias = "udisks_vdo_volume_complete_enable_compression")]
    //fn complete_enable_compression(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_complete_enable_compression() }
    //}

    //#[doc(alias = "udisks_vdo_volume_complete_enable_deduplication")]
    //fn complete_enable_deduplication(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_complete_enable_deduplication() }
    //}

    //#[doc(alias = "udisks_vdo_volume_complete_get_statistics")]
    //fn complete_get_statistics(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, stats: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_complete_get_statistics() }
    //}

    //#[doc(alias = "udisks_vdo_volume_complete_resize_logical")]
    //fn complete_resize_logical(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_complete_resize_logical() }
    //}

    //#[doc(alias = "udisks_vdo_volume_complete_resize_physical")]
    //fn complete_resize_physical(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_vdo_volume_complete_resize_physical() }
    //}

    #[doc(alias = "udisks_vdo_volume_dup_compression_state")]
    fn dup_compression_state(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_vdo_volume_dup_compression_state(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_dup_index_state")]
    fn dup_index_state(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_vdo_volume_dup_index_state(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_dup_operating_mode")]
    fn dup_operating_mode(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_vdo_volume_dup_operating_mode(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_dup_vdo_pool")]
    fn dup_vdo_pool(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_vdo_volume_dup_vdo_pool(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_compression")]
    #[doc(alias = "get_compression")]
    fn is_compression(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_vdo_volume_get_compression(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_compression_state")]
    #[doc(alias = "get_compression_state")]
    fn compression_state(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_vdo_volume_get_compression_state(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_deduplication")]
    #[doc(alias = "get_deduplication")]
    fn is_deduplication(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_vdo_volume_get_deduplication(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_index_state")]
    #[doc(alias = "get_index_state")]
    fn index_state(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_vdo_volume_get_index_state(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_operating_mode")]
    #[doc(alias = "get_operating_mode")]
    fn operating_mode(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_vdo_volume_get_operating_mode(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_used_size")]
    #[doc(alias = "get_used_size")]
    fn used_size(&self) -> u64 {
        unsafe {
            ffi::udisks_vdo_volume_get_used_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_vdo_volume_get_vdo_pool")]
    #[doc(alias = "get_vdo_pool")]
    fn vdo_pool(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_vdo_volume_get_vdo_pool(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_compression")]
    fn set_compression(&self, value: bool) {
        unsafe {
            ffi::udisks_vdo_volume_set_compression(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_compression_state")]
    fn set_compression_state(&self, value: &str) {
        unsafe {
            ffi::udisks_vdo_volume_set_compression_state(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_deduplication")]
    fn set_deduplication(&self, value: bool) {
        unsafe {
            ffi::udisks_vdo_volume_set_deduplication(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_index_state")]
    fn set_index_state(&self, value: &str) {
        unsafe {
            ffi::udisks_vdo_volume_set_index_state(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_operating_mode")]
    fn set_operating_mode(&self, value: &str) {
        unsafe {
            ffi::udisks_vdo_volume_set_operating_mode(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_used_size")]
    fn set_used_size(&self, value: u64) {
        unsafe {
            ffi::udisks_vdo_volume_set_used_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_vdo_volume_set_vdo_pool")]
    fn set_vdo_pool(&self, value: &str) {
        unsafe {
            ffi::udisks_vdo_volume_set_vdo_pool(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "handle-enable-compression")]
    //fn connect_handle_enable_compression<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "handle-enable-deduplication")]
    //fn connect_handle_enable_deduplication<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "handle-get-statistics")]
    //fn connect_handle_get_statistics<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "handle-resize-logical")]
    //fn connect_handle_resize_logical<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "handle-resize-physical")]
    //fn connect_handle_resize_physical<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "compression")]
    fn connect_compression_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_compression_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::compression\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_compression_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "compression-state")]
    fn connect_compression_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_compression_state_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::compression-state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_compression_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "deduplication")]
    fn connect_deduplication_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_deduplication_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::deduplication\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_deduplication_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "index-state")]
    fn connect_index_state_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_index_state_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::index-state\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_index_state_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "operating-mode")]
    fn connect_operating_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_operating_mode_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::operating-mode\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_operating_mode_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "used-size")]
    fn connect_used_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_used_size_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::used-size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_used_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_9")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    #[doc(alias = "vdo-pool")]
    fn connect_vdo_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vdo_pool_trampoline<P: IsA<VDOVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksVDOVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(VDOVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vdo-pool\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_vdo_pool_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<VDOVolume>> VDOVolumeExt for O {}
