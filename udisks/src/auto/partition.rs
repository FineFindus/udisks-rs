// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksPartition")]
    pub struct Partition(Interface<ffi::UDisksPartition, ffi::UDisksPartitionIface>);

    match fn {
        type_ => || ffi::udisks_partition_get_type(),
    }
}

impl Partition {
        pub const NONE: Option<&'static Partition> = None;
    

    //#[doc(alias = "udisks_partition_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_partition_interface_info() }
    //}

    //#[doc(alias = "udisks_partition_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_partition_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Partition>> Sealed for T {}
}

pub trait PartitionExt: IsA<Partition> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_partition_call_delete")]
    //fn call_delete<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_call_delete() }
    //}

    //
    //fn call_delete_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_delete(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_call_delete_sync")]
    //fn call_delete_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_partition_call_delete_sync() }
    //}

    //#[doc(alias = "udisks_partition_call_resize")]
    //fn call_resize<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_call_resize() }
    //}

    //
    //fn call_resize_future(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize(
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_call_resize_sync")]
    //fn call_resize_sync(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_partition_call_resize_sync() }
    //}

    //#[doc(alias = "udisks_partition_call_set_flags")]
    //fn call_set_flags<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_flags: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_call_set_flags() }
    //}

    //
    //fn call_set_flags_future(&self, arg_flags: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_flags(
        //        arg_flags,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_call_set_flags_sync")]
    //fn call_set_flags_sync(&self, arg_flags: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_partition_call_set_flags_sync() }
    //}

    //#[doc(alias = "udisks_partition_call_set_name")]
    //fn call_set_name<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_call_set_name() }
    //}

    //
    //fn call_set_name_future(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_name(
        //        &arg_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_call_set_name_sync")]
    //fn call_set_name_sync(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_partition_call_set_name_sync() }
    //}

    //#[doc(alias = "udisks_partition_call_set_type")]
    //fn call_set_type<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_type: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_call_set_type() }
    //}

    //
    //fn call_set_type_future(&self, arg_type: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_type(
        //        &arg_type,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_call_set_type_sync")]
    //fn call_set_type_sync(&self, arg_type: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_partition_call_set_type_sync() }
    //}

    //#[doc(alias = "udisks_partition_complete_delete")]
    //fn complete_delete(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_partition_complete_delete() }
    //}

    //#[doc(alias = "udisks_partition_complete_resize")]
    //fn complete_resize(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_partition_complete_resize() }
    //}

    //#[doc(alias = "udisks_partition_complete_set_flags")]
    //fn complete_set_flags(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_partition_complete_set_flags() }
    //}

    //#[doc(alias = "udisks_partition_complete_set_name")]
    //fn complete_set_name(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_partition_complete_set_name() }
    //}

    //#[doc(alias = "udisks_partition_complete_set_type")]
    //fn complete_set_type(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_partition_complete_set_type() }
    //}

    #[doc(alias = "udisks_partition_dup_name")]
    fn dup_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_partition_dup_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_dup_table")]
    fn dup_table(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_partition_dup_table(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_dup_type_")]
    fn dup_type_(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_partition_dup_type_(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_dup_uuid")]
    fn dup_uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_partition_dup_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_get_flags")]
    #[doc(alias = "get_flags")]
    fn flags(&self) -> u64 {
        unsafe {
            ffi::udisks_partition_get_flags(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_partition_get_is_contained")]
    #[doc(alias = "get_is_contained")]
    fn is_contained(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_partition_get_is_contained(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_get_is_container")]
    #[doc(alias = "get_is_container")]
    fn is_container(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_partition_get_is_container(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_partition_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_get_number")]
    #[doc(alias = "get_number")]
    fn number(&self) -> u32 {
        unsafe {
            ffi::udisks_partition_get_number(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_partition_get_offset")]
    #[doc(alias = "get_offset")]
    fn offset(&self) -> u64 {
        unsafe {
            ffi::udisks_partition_get_offset(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_partition_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::udisks_partition_get_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_partition_get_table")]
    #[doc(alias = "get_table")]
    fn table(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_partition_get_table(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_get_type_")]
    #[doc(alias = "get_type_")]
    fn type_(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_partition_get_type_(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_partition_get_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_set_flags")]
    fn set_flags(&self, value: u64) {
        unsafe {
            ffi::udisks_partition_set_flags(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_partition_set_is_contained")]
    fn set_is_contained(&self, value: bool) {
        unsafe {
            ffi::udisks_partition_set_is_contained(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_partition_set_is_container")]
    fn set_is_container(&self, value: bool) {
        unsafe {
            ffi::udisks_partition_set_is_container(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_partition_set_name")]
    fn set_name(&self, value: &str) {
        unsafe {
            ffi::udisks_partition_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_partition_set_number")]
    fn set_number(&self, value: u32) {
        unsafe {
            ffi::udisks_partition_set_number(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_partition_set_offset")]
    fn set_offset(&self, value: u64) {
        unsafe {
            ffi::udisks_partition_set_offset(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_partition_set_size")]
    fn set_size(&self, value: u64) {
        unsafe {
            ffi::udisks_partition_set_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_partition_set_table")]
    fn set_table(&self, value: &str) {
        unsafe {
            ffi::udisks_partition_set_table(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_partition_set_type_")]
    fn set_type_(&self, value: &str) {
        unsafe {
            ffi::udisks_partition_set_type_(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_partition_set_uuid")]
    fn set_uuid(&self, value: &str) {
        unsafe {
            ffi::udisks_partition_set_uuid(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "type")]
    fn set_type(&self, type_: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"type", type_)
    }

    //#[doc(alias = "handle-delete")]
    //fn connect_handle_delete<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-resize")]
    //fn connect_handle_resize<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-flags")]
    //fn connect_handle_set_flags<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-name")]
    //fn connect_handle_set_name<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-type")]
    //fn connect_handle_set_type<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "flags")]
    fn connect_flags_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_flags_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::flags\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_flags_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-contained")]
    fn connect_is_contained_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_contained_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-contained\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_is_contained_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "is-container")]
    fn connect_is_container_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_is_container_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::is-container\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_is_container_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "number")]
    fn connect_number_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_number_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::number\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_number_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "offset")]
    fn connect_offset_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_offset_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::offset\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_offset_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "table")]
    fn connect_table_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_table_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::table\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_table_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<P: IsA<Partition>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartition, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Partition::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uuid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_uuid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Partition>> PartitionExt for O {}
