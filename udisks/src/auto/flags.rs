// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{bitflags::bitflags,prelude::*,translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "UDisksPartitionTypeInfoFlags")]
    pub struct PartitionTypeInfoFlags: u32 {
        #[doc(alias = "UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE")]
        const NONE = ffi::UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE as _;
        #[doc(alias = "UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP")]
        const SWAP = ffi::UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP as _;
        #[doc(alias = "UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID")]
        const RAID = ffi::UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID as _;
        #[doc(alias = "UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN")]
        const HIDDEN = ffi::UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN as _;
        #[doc(alias = "UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY")]
        const CREATE_ONLY = ffi::UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY as _;
        #[doc(alias = "UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM")]
        const SYSTEM = ffi::UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM as _;
    }
}

#[doc(hidden)]
impl IntoGlib for PartitionTypeInfoFlags {
    type GlibType = ffi::UDisksPartitionTypeInfoFlags;

    #[inline]
    fn into_glib(self) -> ffi::UDisksPartitionTypeInfoFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::UDisksPartitionTypeInfoFlags> for PartitionTypeInfoFlags {
    #[inline]
    unsafe fn from_glib(value: ffi::UDisksPartitionTypeInfoFlags) -> Self {
        skip_assert_initialized!();
        Self::from_bits_truncate(value)
    }
}

impl StaticType for PartitionTypeInfoFlags {
                #[inline]
    #[doc(alias = "udisks_partition_type_info_flags_get_type")]
   fn static_type() -> glib::Type {
                    unsafe { from_glib(ffi::udisks_partition_type_info_flags_get_type()) }
                }
            }

impl glib::HasParamSpec for PartitionTypeInfoFlags {
                type ParamSpec = glib::ParamSpecFlags;
                type SetValue = Self;
                type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;
    
                fn param_spec_builder() -> Self::BuilderFn {
                    Self::ParamSpec::builder
                }
}

impl glib::value::ValueType for PartitionTypeInfoFlags {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for PartitionTypeInfoFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        skip_assert_initialized!();
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for PartitionTypeInfoFlags {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<PartitionTypeInfoFlags> for glib::Value {
    #[inline]
    fn from(v: PartitionTypeInfoFlags) -> Self {
        skip_assert_initialized!();
        ToValue::to_value(&v)
    }
}

