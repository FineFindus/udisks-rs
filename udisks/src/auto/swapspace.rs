// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksSwapspace")]
    pub struct Swapspace(Interface<ffi::UDisksSwapspace, ffi::UDisksSwapspaceIface>);

    match fn {
        type_ => || ffi::udisks_swapspace_get_type(),
    }
}

impl Swapspace {
        pub const NONE: Option<&'static Swapspace> = None;
    

    //#[doc(alias = "udisks_swapspace_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_swapspace_interface_info() }
    //}

    //#[doc(alias = "udisks_swapspace_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_swapspace_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Swapspace>> Sealed for T {}
}

pub trait SwapspaceExt: IsA<Swapspace> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_swapspace_call_set_label")]
    //fn call_set_label<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_swapspace_call_set_label() }
    //}

    //
    //fn call_set_label_future(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_label = String::from(arg_label);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_label(
        //        &arg_label,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_swapspace_call_set_label_sync")]
    //fn call_set_label_sync(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_swapspace_call_set_label_sync() }
    //}

    //#[doc(alias = "udisks_swapspace_call_start")]
    //fn call_start<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_swapspace_call_start() }
    //}

    //
    //fn call_start_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_start(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_swapspace_call_start_sync")]
    //fn call_start_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_swapspace_call_start_sync() }
    //}

    //#[doc(alias = "udisks_swapspace_call_stop")]
    //fn call_stop<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_swapspace_call_stop() }
    //}

    //
    //fn call_stop_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_stop(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_swapspace_call_stop_sync")]
    //fn call_stop_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_swapspace_call_stop_sync() }
    //}

    //#[doc(alias = "udisks_swapspace_complete_set_label")]
    //fn complete_set_label(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_swapspace_complete_set_label() }
    //}

    //#[doc(alias = "udisks_swapspace_complete_start")]
    //fn complete_start(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_swapspace_complete_start() }
    //}

    //#[doc(alias = "udisks_swapspace_complete_stop")]
    //fn complete_stop(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_swapspace_complete_stop() }
    //}

    #[doc(alias = "udisks_swapspace_get_active")]
    #[doc(alias = "get_active")]
    fn is_active(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_swapspace_get_active(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_swapspace_set_active")]
    fn set_active(&self, value: bool) {
        unsafe {
            ffi::udisks_swapspace_set_active(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    //#[doc(alias = "handle-set-label")]
    //fn connect_handle_set_label<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-start")]
    //fn connect_handle_start<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-stop")]
    //fn connect_handle_stop<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "active")]
    fn connect_active_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_trampoline<P: IsA<Swapspace>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksSwapspace, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Swapspace::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_active_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Swapspace>> SwapspaceExt for O {}
