// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksLogicalVolume")]
    pub struct LogicalVolume(Interface<ffi::UDisksLogicalVolume, ffi::UDisksLogicalVolumeIface>);

    match fn {
        type_ => || ffi::udisks_logical_volume_get_type(),
    }
}

impl LogicalVolume {
        pub const NONE: Option<&'static LogicalVolume> = None;
    

    //#[doc(alias = "udisks_logical_volume_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_logical_volume_interface_info() }
    //}

    //#[doc(alias = "udisks_logical_volume_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_logical_volume_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::LogicalVolume>> Sealed for T {}
}

pub trait LogicalVolumeExt: IsA<LogicalVolume> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_logical_volume_call_activate")]
    //fn call_activate<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_activate() }
    //}

    //
    //fn call_activate_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_activate(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_logical_volume_call_activate_sync")]
    //fn call_activate_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_activate_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_logical_volume_call_cache_attach")]
    //fn call_cache_attach<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_cache_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_cache_attach() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_cache_attach_future(&self, arg_cache_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_cache_name = String::from(arg_cache_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_cache_attach(
        //        &arg_cache_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_logical_volume_call_cache_attach_sync")]
    //fn call_cache_attach_sync(&self, arg_cache_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_cache_attach_sync() }
    //}

    //#[cfg(feature = "v2_6_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_6_3")))]
    //#[doc(alias = "udisks_logical_volume_call_cache_detach")]
    //fn call_cache_detach<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_cache_detach() }
    //}

    //
    //#[cfg(feature = "v2_6_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_6_3")))]
    //fn call_cache_detach_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_cache_detach(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_6_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_6_3")))]
    //#[doc(alias = "udisks_logical_volume_call_cache_detach_sync")]
    //fn call_cache_detach_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_cache_detach_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_logical_volume_call_cache_split")]
    //fn call_cache_split<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_cache_split() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_cache_split_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_cache_split(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_logical_volume_call_cache_split_sync")]
    //fn call_cache_split_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_cache_split_sync() }
    //}

    //#[doc(alias = "udisks_logical_volume_call_create_snapshot")]
    //fn call_create_snapshot<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_create_snapshot() }
    //}

    //
    //fn call_create_snapshot_future(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_snapshot(
        //        &arg_name,
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_logical_volume_call_create_snapshot_sync")]
    //fn call_create_snapshot_sync(&self, arg_name: &str, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_create_snapshot_sync() }
    //}

    //#[doc(alias = "udisks_logical_volume_call_deactivate")]
    //fn call_deactivate<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_deactivate() }
    //}

    //
    //fn call_deactivate_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_deactivate(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_logical_volume_call_deactivate_sync")]
    //fn call_deactivate_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_deactivate_sync() }
    //}

    //#[doc(alias = "udisks_logical_volume_call_delete")]
    //fn call_delete<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_delete() }
    //}

    //
    //fn call_delete_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_delete(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_logical_volume_call_delete_sync")]
    //fn call_delete_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_delete_sync() }
    //}

    //#[doc(alias = "udisks_logical_volume_call_rename")]
    //fn call_rename<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_new_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_rename() }
    //}

    //
    //fn call_rename_future(&self, arg_new_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_new_name = String::from(arg_new_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_rename(
        //        &arg_new_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_logical_volume_call_rename_sync")]
    //fn call_rename_sync(&self, arg_new_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_rename_sync() }
    //}

    //#[doc(alias = "udisks_logical_volume_call_resize")]
    //fn call_resize<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_new_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_resize() }
    //}

    //
    //fn call_resize_future(&self, arg_new_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize(
        //        arg_new_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_logical_volume_call_resize_sync")]
    //fn call_resize_sync(&self, arg_new_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_logical_volume_call_resize_sync() }
    //}

    //#[doc(alias = "udisks_logical_volume_complete_activate")]
    //fn complete_activate(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_activate() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_logical_volume_complete_cache_attach")]
    //fn complete_cache_attach(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_cache_attach() }
    //}

    //#[cfg(feature = "v2_6_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_6_3")))]
    //#[doc(alias = "udisks_logical_volume_complete_cache_detach")]
    //fn complete_cache_detach(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_cache_detach() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_logical_volume_complete_cache_split")]
    //fn complete_cache_split(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_cache_split() }
    //}

    //#[doc(alias = "udisks_logical_volume_complete_create_snapshot")]
    //fn complete_create_snapshot(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_create_snapshot() }
    //}

    //#[doc(alias = "udisks_logical_volume_complete_deactivate")]
    //fn complete_deactivate(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_deactivate() }
    //}

    //#[doc(alias = "udisks_logical_volume_complete_delete")]
    //fn complete_delete(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_delete() }
    //}

    //#[doc(alias = "udisks_logical_volume_complete_rename")]
    //fn complete_rename(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_rename() }
    //}

    //#[doc(alias = "udisks_logical_volume_complete_resize")]
    //fn complete_resize(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_complete_resize() }
    //}

    #[cfg(feature = "v2_7_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_7_1")))]
    #[doc(alias = "udisks_logical_volume_dup_block_device")]
    fn dup_block_device(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_block_device(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_logical_volume_dup_child_configuration")]
    //fn dup_child_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_logical_volume_dup_child_configuration() }
    //}

    #[doc(alias = "udisks_logical_volume_dup_name")]
    fn dup_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_dup_origin")]
    fn dup_origin(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_origin(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_dup_thin_pool")]
    fn dup_thin_pool(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_thin_pool(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_dup_type_")]
    fn dup_type_(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_type_(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_dup_uuid")]
    fn dup_uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_dup_volume_group")]
    fn dup_volume_group(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_logical_volume_dup_volume_group(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_get_active")]
    #[doc(alias = "get_active")]
    fn is_active(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_logical_volume_get_active(self.as_ref().to_glib_none().0))
        }
    }

    #[cfg(feature = "v2_7_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_7_1")))]
    #[doc(alias = "udisks_logical_volume_get_block_device")]
    #[doc(alias = "get_block_device")]
    fn block_device(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_block_device(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_logical_volume_get_child_configuration")]
    //#[doc(alias = "get_child_configuration")]
    //fn child_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_logical_volume_get_child_configuration() }
    //}

    #[doc(alias = "udisks_logical_volume_get_data_allocated_ratio")]
    #[doc(alias = "get_data_allocated_ratio")]
    fn data_allocated_ratio(&self) -> f64 {
        unsafe {
            ffi::udisks_logical_volume_get_data_allocated_ratio(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_logical_volume_get_metadata_allocated_ratio")]
    #[doc(alias = "get_metadata_allocated_ratio")]
    fn metadata_allocated_ratio(&self) -> f64 {
        unsafe {
            ffi::udisks_logical_volume_get_metadata_allocated_ratio(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_logical_volume_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_get_origin")]
    #[doc(alias = "get_origin")]
    fn origin(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_origin(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::udisks_logical_volume_get_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_logical_volume_get_thin_pool")]
    #[doc(alias = "get_thin_pool")]
    fn thin_pool(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_thin_pool(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_get_type_")]
    #[doc(alias = "get_type_")]
    fn type_(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_type_(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_get_volume_group")]
    #[doc(alias = "get_volume_group")]
    fn volume_group(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_logical_volume_get_volume_group(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_logical_volume_set_active")]
    fn set_active(&self, value: bool) {
        unsafe {
            ffi::udisks_logical_volume_set_active(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[cfg(feature = "v2_7_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_7_1")))]
    #[doc(alias = "udisks_logical_volume_set_block_device")]
    fn set_block_device(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_block_device(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[doc(alias = "udisks_logical_volume_set_child_configuration")]
    //fn set_child_configuration(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_logical_volume_set_child_configuration() }
    //}

    #[doc(alias = "udisks_logical_volume_set_data_allocated_ratio")]
    fn set_data_allocated_ratio(&self, value: f64) {
        unsafe {
            ffi::udisks_logical_volume_set_data_allocated_ratio(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_metadata_allocated_ratio")]
    fn set_metadata_allocated_ratio(&self, value: f64) {
        unsafe {
            ffi::udisks_logical_volume_set_metadata_allocated_ratio(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_name")]
    fn set_name(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_origin")]
    fn set_origin(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_origin(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_size")]
    fn set_size(&self, value: u64) {
        unsafe {
            ffi::udisks_logical_volume_set_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_thin_pool")]
    fn set_thin_pool(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_thin_pool(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_type_")]
    fn set_type_(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_type_(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_uuid")]
    fn set_uuid(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_uuid(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_logical_volume_set_volume_group")]
    fn set_volume_group(&self, value: &str) {
        unsafe {
            ffi::udisks_logical_volume_set_volume_group(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "type")]
    fn set_type(&self, type_: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"type", type_)
    }

    //#[doc(alias = "handle-activate")]
    //fn connect_handle_activate<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-cache-attach")]
    //fn connect_handle_cache_attach<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_6_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_6_3")))]
    //#[doc(alias = "handle-cache-detach")]
    //fn connect_handle_cache_detach<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-cache-split")]
    //fn connect_handle_cache_split<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-create-snapshot")]
    //fn connect_handle_create_snapshot<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-deactivate")]
    //fn connect_handle_deactivate<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-delete")]
    //fn connect_handle_delete<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-rename")]
    //fn connect_handle_rename<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-resize")]
    //fn connect_handle_resize<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "active")]
    fn connect_active_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_active_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_7_1")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_7_1")))]
    #[doc(alias = "block-device")]
    fn connect_block_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_block_device_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::block-device\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_block_device_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "child-configuration")]
    fn connect_child_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_configuration_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::child-configuration\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_child_configuration_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "data-allocated-ratio")]
    fn connect_data_allocated_ratio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_data_allocated_ratio_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::data-allocated-ratio\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_data_allocated_ratio_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "metadata-allocated-ratio")]
    fn connect_metadata_allocated_ratio_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_metadata_allocated_ratio_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::metadata-allocated-ratio\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_metadata_allocated_ratio_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "origin")]
    fn connect_origin_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_origin_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::origin\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_origin_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "thin-pool")]
    fn connect_thin_pool_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_thin_pool_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::thin-pool\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_thin_pool_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uuid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_uuid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "volume-group")]
    fn connect_volume_group_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_volume_group_trampoline<P: IsA<LogicalVolume>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLogicalVolume, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(LogicalVolume::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::volume-group\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_volume_group_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<LogicalVolume>> LogicalVolumeExt for O {}
