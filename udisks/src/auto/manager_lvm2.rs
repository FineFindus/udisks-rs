// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "UDisksManagerLVM2")]
    pub struct ManagerLVM2(Interface<ffi::UDisksManagerLVM2, ffi::UDisksManagerLVM2Iface>);

    match fn {
        type_ => || ffi::udisks_manager_lvm2_get_type(),
    }
}

impl ManagerLVM2 {
        pub const NONE: Option<&'static ManagerLVM2> = None;
    

    //#[doc(alias = "udisks_manager_lvm2_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_manager_lvm2_interface_info() }
    //}

    //#[doc(alias = "udisks_manager_lvm2_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_manager_lvm2_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ManagerLVM2>> Sealed for T {}
}

pub trait ManagerLVM2Ext: IsA<ManagerLVM2> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_manager_lvm2_call_volume_group_create")]
    //fn call_volume_group_create<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_blocks: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_lvm2_call_volume_group_create() }
    //}

    //
    //fn call_volume_group_create_future(&self, arg_name: &str, arg_blocks: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_blocks = String::from(arg_blocks);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_volume_group_create(
        //        &arg_name,
        //        &arg_blocks,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_manager_lvm2_call_volume_group_create_sync")]
    //fn call_volume_group_create_sync(&self, arg_name: &str, arg_blocks: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_manager_lvm2_call_volume_group_create_sync() }
    //}

    //#[doc(alias = "udisks_manager_lvm2_complete_volume_group_create")]
    //fn complete_volume_group_create(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, result: &str) {
    //    unsafe { TODO: call ffi:udisks_manager_lvm2_complete_volume_group_create() }
    //}

    //#[doc(alias = "handle-volume-group-create")]
    //fn connect_handle_volume_group_create<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Empty ctype arg_blocks: *.CArray TypeId { ns_id: 0, id: 28 }
    //    Ignored arg_options: GLib.Variant
    //}
}

impl<O: IsA<ManagerLVM2>> ManagerLVM2Ext for O {}
