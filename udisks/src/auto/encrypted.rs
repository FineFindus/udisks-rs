// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksEncrypted")]
    pub struct Encrypted(Interface<ffi::UDisksEncrypted, ffi::UDisksEncryptedIface>);

    match fn {
        type_ => || ffi::udisks_encrypted_get_type(),
    }
}

impl Encrypted {
        pub const NONE: Option<&'static Encrypted> = None;
    

    //#[doc(alias = "udisks_encrypted_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_encrypted_interface_info() }
    //}

    //#[doc(alias = "udisks_encrypted_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_encrypted_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Encrypted>> Sealed for T {}
}

pub trait EncryptedExt: IsA<Encrypted> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_encrypted_call_change_passphrase")]
    //fn call_change_passphrase<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_passphrase: &str, arg_new_passphrase: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_change_passphrase() }
    //}

    //
    //fn call_change_passphrase_future(&self, arg_passphrase: &str, arg_new_passphrase: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_passphrase = String::from(arg_passphrase);
        //let arg_new_passphrase = String::from(arg_new_passphrase);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_change_passphrase(
        //        &arg_passphrase,
        //        &arg_new_passphrase,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_encrypted_call_change_passphrase_sync")]
    //fn call_change_passphrase_sync(&self, arg_passphrase: &str, arg_new_passphrase: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_change_passphrase_sync() }
    //}

    //#[doc(alias = "udisks_encrypted_call_lock")]
    //fn call_lock<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_lock() }
    //}

    //
    //fn call_lock_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_lock(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_encrypted_call_lock_sync")]
    //fn call_lock_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_lock_sync() }
    //}

    //#[cfg(feature = "v2_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_8")))]
    //#[doc(alias = "udisks_encrypted_call_resize")]
    //fn call_resize<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_resize() }
    //}

    //
    //#[cfg(feature = "v2_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_8")))]
    //fn call_resize_future(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize(
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_8")))]
    //#[doc(alias = "udisks_encrypted_call_resize_sync")]
    //fn call_resize_sync(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_resize_sync() }
    //}

    //#[doc(alias = "udisks_encrypted_call_unlock")]
    //fn call_unlock<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_passphrase: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_unlock() }
    //}

    //
    //fn call_unlock_future(&self, arg_passphrase: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_passphrase = String::from(arg_passphrase);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_unlock(
        //        &arg_passphrase,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_encrypted_call_unlock_sync")]
    //fn call_unlock_sync(&self, arg_passphrase: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_encrypted_call_unlock_sync() }
    //}

    //#[doc(alias = "udisks_encrypted_complete_change_passphrase")]
    //fn complete_change_passphrase(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_encrypted_complete_change_passphrase() }
    //}

    //#[doc(alias = "udisks_encrypted_complete_lock")]
    //fn complete_lock(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_encrypted_complete_lock() }
    //}

    //#[cfg(feature = "v2_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_8")))]
    //#[doc(alias = "udisks_encrypted_complete_resize")]
    //fn complete_resize(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_encrypted_complete_resize() }
    //}

    //#[doc(alias = "udisks_encrypted_complete_unlock")]
    //fn complete_unlock(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, cleartext_device: &str) {
    //    unsafe { TODO: call ffi:udisks_encrypted_complete_unlock() }
    //}

    //#[doc(alias = "udisks_encrypted_dup_child_configuration")]
    //fn dup_child_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_encrypted_dup_child_configuration() }
    //}

    #[doc(alias = "udisks_encrypted_dup_cleartext_device")]
    fn dup_cleartext_device(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_encrypted_dup_cleartext_device(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_encrypted_dup_hint_encryption_type")]
    fn dup_hint_encryption_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_encrypted_dup_hint_encryption_type(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_encrypted_get_child_configuration")]
    //#[doc(alias = "get_child_configuration")]
    //fn child_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_encrypted_get_child_configuration() }
    //}

    #[doc(alias = "udisks_encrypted_get_cleartext_device")]
    #[doc(alias = "get_cleartext_device")]
    fn cleartext_device(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_encrypted_get_cleartext_device(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_encrypted_get_hint_encryption_type")]
    #[doc(alias = "get_hint_encryption_type")]
    fn hint_encryption_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_encrypted_get_hint_encryption_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_encrypted_get_metadata_size")]
    #[doc(alias = "get_metadata_size")]
    fn metadata_size(&self) -> u64 {
        unsafe {
            ffi::udisks_encrypted_get_metadata_size(self.as_ref().to_glib_none().0)
        }
    }

    //#[doc(alias = "udisks_encrypted_set_child_configuration")]
    //fn set_child_configuration(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_encrypted_set_child_configuration() }
    //}

    #[doc(alias = "udisks_encrypted_set_cleartext_device")]
    fn set_cleartext_device(&self, value: &str) {
        unsafe {
            ffi::udisks_encrypted_set_cleartext_device(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_encrypted_set_hint_encryption_type")]
    fn set_hint_encryption_type(&self, value: &str) {
        unsafe {
            ffi::udisks_encrypted_set_hint_encryption_type(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_encrypted_set_metadata_size")]
    fn set_metadata_size(&self, value: u64) {
        unsafe {
            ffi::udisks_encrypted_set_metadata_size(self.as_ref().to_glib_none().0, value);
        }
    }

    //#[doc(alias = "handle-change-passphrase")]
    //fn connect_handle_change_passphrase<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-lock")]
    //fn connect_handle_lock<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_8")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_8")))]
    //#[doc(alias = "handle-resize")]
    //fn connect_handle_resize<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-unlock")]
    //fn connect_handle_unlock<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "child-configuration")]
    fn connect_child_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_configuration_trampoline<P: IsA<Encrypted>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksEncrypted, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Encrypted::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::child-configuration\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_child_configuration_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "cleartext-device")]
    fn connect_cleartext_device_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_cleartext_device_trampoline<P: IsA<Encrypted>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksEncrypted, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Encrypted::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::cleartext-device\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_cleartext_device_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "hint-encryption-type")]
    fn connect_hint_encryption_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_hint_encryption_type_trampoline<P: IsA<Encrypted>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksEncrypted, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Encrypted::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::hint-encryption-type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_hint_encryption_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "metadata-size")]
    fn connect_metadata_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_metadata_size_trampoline<P: IsA<Encrypted>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksEncrypted, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Encrypted::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::metadata-size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_metadata_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Encrypted>> EncryptedExt for O {}
