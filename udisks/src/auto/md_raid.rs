// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksMDRaid")]
    pub struct MDRaid(Interface<ffi::UDisksMDRaid, ffi::UDisksMDRaidIface>);

    match fn {
        type_ => || ffi::udisks_mdraid_get_type(),
    }
}

impl MDRaid {
        pub const NONE: Option<&'static MDRaid> = None;
    

    //#[doc(alias = "udisks_mdraid_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_mdraid_interface_info() }
    //}

    //#[doc(alias = "udisks_mdraid_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_mdraid_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::MDRaid>> Sealed for T {}
}

pub trait MDRaidExt: IsA<MDRaid> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_mdraid_call_add_device")]
    //fn call_add_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_add_device() }
    //}

    //
    //fn call_add_device_future(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_device = String::from(arg_device);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_add_device(
        //        &arg_device,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_add_device_sync")]
    //fn call_add_device_sync(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_add_device_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_call_delete")]
    //fn call_delete<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_delete() }
    //}

    //
    //fn call_delete_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_delete(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_delete_sync")]
    //fn call_delete_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_delete_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_call_remove_device")]
    //fn call_remove_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_remove_device() }
    //}

    //
    //fn call_remove_device_future(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_device = String::from(arg_device);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_remove_device(
        //        &arg_device,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_remove_device_sync")]
    //fn call_remove_device_sync(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_remove_device_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_call_request_sync_action")]
    //fn call_request_sync_action<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_sync_action: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_request_sync_action() }
    //}

    //
    //fn call_request_sync_action_future(&self, arg_sync_action: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_sync_action = String::from(arg_sync_action);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_request_sync_action(
        //        &arg_sync_action,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_request_sync_action_sync")]
    //fn call_request_sync_action_sync(&self, arg_sync_action: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_request_sync_action_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_call_set_bitmap_location")]
    //fn call_set_bitmap_location<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_value: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_set_bitmap_location() }
    //}

    //
    //fn call_set_bitmap_location_future(&self, arg_value: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_value = String::from(arg_value);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_bitmap_location(
        //        &arg_value,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_set_bitmap_location_sync")]
    //fn call_set_bitmap_location_sync(&self, arg_value: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_set_bitmap_location_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_call_start")]
    //fn call_start<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_start() }
    //}

    //
    //fn call_start_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_start(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_start_sync")]
    //fn call_start_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_start_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_call_stop")]
    //fn call_stop<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_stop() }
    //}

    //
    //fn call_stop_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_stop(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_mdraid_call_stop_sync")]
    //fn call_stop_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_mdraid_call_stop_sync() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_add_device")]
    //fn complete_add_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_add_device() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_delete")]
    //fn complete_delete(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_delete() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_remove_device")]
    //fn complete_remove_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_remove_device() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_request_sync_action")]
    //fn complete_request_sync_action(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_request_sync_action() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_set_bitmap_location")]
    //fn complete_set_bitmap_location(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_set_bitmap_location() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_start")]
    //fn complete_start(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_start() }
    //}

    //#[doc(alias = "udisks_mdraid_complete_stop")]
    //fn complete_stop(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_mdraid_complete_stop() }
    //}

    //#[doc(alias = "udisks_mdraid_dup_active_devices")]
    //fn dup_active_devices(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_mdraid_dup_active_devices() }
    //}

    #[doc(alias = "udisks_mdraid_dup_bitmap_location")]
    fn dup_bitmap_location(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_mdraid_dup_bitmap_location(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_mdraid_dup_child_configuration")]
    //fn dup_child_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_mdraid_dup_child_configuration() }
    //}

    #[doc(alias = "udisks_mdraid_dup_level")]
    fn dup_level(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_mdraid_dup_level(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_dup_name")]
    fn dup_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_mdraid_dup_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_dup_sync_action")]
    fn dup_sync_action(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_mdraid_dup_sync_action(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_dup_uuid")]
    fn dup_uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_mdraid_dup_uuid(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_mdraid_get_active_devices")]
    //#[doc(alias = "get_active_devices")]
    //fn active_devices(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_mdraid_get_active_devices() }
    //}

    #[doc(alias = "udisks_mdraid_get_bitmap_location")]
    #[doc(alias = "get_bitmap_location")]
    fn bitmap_location(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_mdraid_get_bitmap_location(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_mdraid_get_child_configuration")]
    //#[doc(alias = "get_child_configuration")]
    //fn child_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_mdraid_get_child_configuration() }
    //}

    #[doc(alias = "udisks_mdraid_get_chunk_size")]
    #[doc(alias = "get_chunk_size")]
    fn chunk_size(&self) -> u64 {
        unsafe {
            ffi::udisks_mdraid_get_chunk_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_degraded")]
    #[doc(alias = "get_degraded")]
    fn degraded(&self) -> u32 {
        unsafe {
            ffi::udisks_mdraid_get_degraded(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_level")]
    #[doc(alias = "get_level")]
    fn level(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_mdraid_get_level(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_get_name")]
    #[doc(alias = "get_name")]
    fn name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_mdraid_get_name(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_get_num_devices")]
    #[doc(alias = "get_num_devices")]
    fn num_devices(&self) -> u32 {
        unsafe {
            ffi::udisks_mdraid_get_num_devices(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_running")]
    #[doc(alias = "get_running")]
    fn is_running(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_mdraid_get_running(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::udisks_mdraid_get_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_sync_action")]
    #[doc(alias = "get_sync_action")]
    fn sync_action(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_mdraid_get_sync_action(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_mdraid_get_sync_completed")]
    #[doc(alias = "get_sync_completed")]
    fn sync_completed(&self) -> f64 {
        unsafe {
            ffi::udisks_mdraid_get_sync_completed(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_sync_rate")]
    #[doc(alias = "get_sync_rate")]
    fn sync_rate(&self) -> u64 {
        unsafe {
            ffi::udisks_mdraid_get_sync_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_sync_remaining_time")]
    #[doc(alias = "get_sync_remaining_time")]
    fn sync_remaining_time(&self) -> u64 {
        unsafe {
            ffi::udisks_mdraid_get_sync_remaining_time(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_mdraid_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_mdraid_get_uuid(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_mdraid_set_active_devices")]
    //fn set_active_devices(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_mdraid_set_active_devices() }
    //}

    #[doc(alias = "udisks_mdraid_set_bitmap_location")]
    fn set_bitmap_location(&self, value: &str) {
        unsafe {
            ffi::udisks_mdraid_set_bitmap_location(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[doc(alias = "udisks_mdraid_set_child_configuration")]
    //fn set_child_configuration(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_mdraid_set_child_configuration() }
    //}

    #[doc(alias = "udisks_mdraid_set_chunk_size")]
    fn set_chunk_size(&self, value: u64) {
        unsafe {
            ffi::udisks_mdraid_set_chunk_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_degraded")]
    fn set_degraded(&self, value: u32) {
        unsafe {
            ffi::udisks_mdraid_set_degraded(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_level")]
    fn set_level(&self, value: &str) {
        unsafe {
            ffi::udisks_mdraid_set_level(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_mdraid_set_name")]
    fn set_name(&self, value: &str) {
        unsafe {
            ffi::udisks_mdraid_set_name(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_mdraid_set_num_devices")]
    fn set_num_devices(&self, value: u32) {
        unsafe {
            ffi::udisks_mdraid_set_num_devices(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_running")]
    fn set_running(&self, value: bool) {
        unsafe {
            ffi::udisks_mdraid_set_running(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_mdraid_set_size")]
    fn set_size(&self, value: u64) {
        unsafe {
            ffi::udisks_mdraid_set_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_sync_action")]
    fn set_sync_action(&self, value: &str) {
        unsafe {
            ffi::udisks_mdraid_set_sync_action(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_mdraid_set_sync_completed")]
    fn set_sync_completed(&self, value: f64) {
        unsafe {
            ffi::udisks_mdraid_set_sync_completed(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_sync_rate")]
    fn set_sync_rate(&self, value: u64) {
        unsafe {
            ffi::udisks_mdraid_set_sync_rate(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_sync_remaining_time")]
    fn set_sync_remaining_time(&self, value: u64) {
        unsafe {
            ffi::udisks_mdraid_set_sync_remaining_time(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_mdraid_set_uuid")]
    fn set_uuid(&self, value: &str) {
        unsafe {
            ffi::udisks_mdraid_set_uuid(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[doc(alias = "handle-add-device")]
    //fn connect_handle_add_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-delete")]
    //fn connect_handle_delete<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-remove-device")]
    //fn connect_handle_remove_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-request-sync-action")]
    //fn connect_handle_request_sync_action<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-bitmap-location")]
    //fn connect_handle_set_bitmap_location<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-start")]
    //fn connect_handle_start<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-stop")]
    //fn connect_handle_stop<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "active-devices")]
    fn connect_active_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_active_devices_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::active-devices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_active_devices_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "bitmap-location")]
    fn connect_bitmap_location_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bitmap_location_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bitmap-location\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_bitmap_location_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "child-configuration")]
    fn connect_child_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_child_configuration_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::child-configuration\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_child_configuration_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "chunk-size")]
    fn connect_chunk_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_chunk_size_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::chunk-size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_chunk_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "degraded")]
    fn connect_degraded_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_degraded_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::degraded\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_degraded_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "level")]
    fn connect_level_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_level_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::level\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_level_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "name")]
    fn connect_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_name_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_name_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "num-devices")]
    fn connect_num_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_num_devices_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::num-devices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_num_devices_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "running")]
    fn connect_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_running_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::running\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_running_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sync-action")]
    fn connect_sync_action_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sync_action_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sync-action\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sync_action_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sync-completed")]
    fn connect_sync_completed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sync_completed_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sync-completed\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sync_completed_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sync-rate")]
    fn connect_sync_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sync_rate_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sync-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sync_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sync-remaining-time")]
    fn connect_sync_remaining_time_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sync_remaining_time_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sync-remaining-time\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sync_remaining_time_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<P: IsA<MDRaid>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksMDRaid, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(MDRaid::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uuid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_uuid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<MDRaid>> MDRaidExt for O {}
