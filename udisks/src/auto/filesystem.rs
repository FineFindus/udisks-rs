// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksFilesystem")]
    pub struct Filesystem(Interface<ffi::UDisksFilesystem, ffi::UDisksFilesystemIface>);

    match fn {
        type_ => || ffi::udisks_filesystem_get_type(),
    }
}

impl Filesystem {
        pub const NONE: Option<&'static Filesystem> = None;
    

    //#[doc(alias = "udisks_filesystem_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_filesystem_interface_info() }
    //}

    //#[doc(alias = "udisks_filesystem_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_filesystem_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Filesystem>> Sealed for T {}
}

pub trait FilesystemExt: IsA<Filesystem> + sealed::Sealed + 'static {
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_check")]
    //fn call_check<P: FnOnce(Result<bool, /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_check() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_check_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<bool, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_check(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_check_sync")]
    //fn call_check_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(bool), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_check_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_call_mount")]
    //fn call_mount<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_mount() }
    //}

    //
    //fn call_mount_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_mount(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_call_mount_sync")]
    //fn call_mount_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_mount_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_repair")]
    //fn call_repair<P: FnOnce(Result<bool, /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_repair() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_repair_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<bool, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_repair(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_repair_sync")]
    //fn call_repair_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(bool), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_repair_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_resize")]
    //fn call_resize<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_resize() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_resize_future(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize(
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_resize_sync")]
    //fn call_resize_sync(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_resize_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_call_set_label")]
    //fn call_set_label<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_set_label() }
    //}

    //
    //fn call_set_label_future(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_label = String::from(arg_label);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_label(
        //        &arg_label,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_call_set_label_sync")]
    //fn call_set_label_sync(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_set_label_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_take_ownership")]
    //fn call_take_ownership<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_take_ownership() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_take_ownership_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_take_ownership(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_call_take_ownership_sync")]
    //fn call_take_ownership_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_take_ownership_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_call_unmount")]
    //fn call_unmount<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_unmount() }
    //}

    //
    //fn call_unmount_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_unmount(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_call_unmount_sync")]
    //fn call_unmount_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_call_unmount_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_complete_check")]
    //fn complete_check(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, consistent: bool) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_check() }
    //}

    //#[doc(alias = "udisks_filesystem_complete_mount")]
    //fn complete_mount(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, mount_path: &str) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_mount() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_complete_repair")]
    //fn complete_repair(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, repaired: bool) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_repair() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_complete_resize")]
    //fn complete_resize(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_resize() }
    //}

    //#[doc(alias = "udisks_filesystem_complete_set_label")]
    //fn complete_set_label(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_set_label() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_filesystem_complete_take_ownership")]
    //fn complete_take_ownership(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_take_ownership() }
    //}

    //#[doc(alias = "udisks_filesystem_complete_unmount")]
    //fn complete_unmount(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_complete_unmount() }
    //}

    #[doc(alias = "udisks_filesystem_dup_mount_points")]
    fn dup_mount_points(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::udisks_filesystem_dup_mount_points(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_filesystem_get_mount_points")]
    #[doc(alias = "get_mount_points")]
    fn mount_points(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::udisks_filesystem_get_mount_points(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_filesystem_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::udisks_filesystem_get_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_filesystem_set_size")]
    fn set_size(&self, value: u64) {
        unsafe {
            ffi::udisks_filesystem_set_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "mount-points")]
    fn set_mount_points(&self, mount_points: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"mount-points", mount_points)
    }

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-check")]
    //fn connect_handle_check<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-mount")]
    //fn connect_handle_mount<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-repair")]
    //fn connect_handle_repair<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-resize")]
    //fn connect_handle_resize<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-label")]
    //fn connect_handle_set_label<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-take-ownership")]
    //fn connect_handle_take_ownership<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-unmount")]
    //fn connect_handle_unmount<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "mount-points")]
    fn connect_mount_points_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_mount_points_trampoline<P: IsA<Filesystem>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksFilesystem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Filesystem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::mount-points\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_mount_points_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<Filesystem>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksFilesystem, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Filesystem::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Filesystem>> FilesystemExt for O {}
