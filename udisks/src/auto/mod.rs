// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

mod block;
pub use self::block::Block;

mod block_lvm2;
pub use self::block_lvm2::BlockLVM2;

mod block_lvm2_proxy;
pub use self::block_lvm2_proxy::BlockLVM2Proxy;

mod block_lvm2_skeleton;
pub use self::block_lvm2_skeleton::BlockLVM2Skeleton;

mod block_proxy;
pub use self::block_proxy::BlockProxy;

mod block_skeleton;
pub use self::block_skeleton::BlockSkeleton;

mod client;
pub use self::client::Client;

mod drive;
pub use self::drive::Drive;

mod drive_ata;
pub use self::drive_ata::DriveAta;

mod drive_ata_proxy;
pub use self::drive_ata_proxy::DriveAtaProxy;

mod drive_ata_skeleton;
pub use self::drive_ata_skeleton::DriveAtaSkeleton;

mod drive_proxy;
pub use self::drive_proxy::DriveProxy;

mod drive_skeleton;
pub use self::drive_skeleton::DriveSkeleton;

mod encrypted;
pub use self::encrypted::Encrypted;

mod encrypted_proxy;
pub use self::encrypted_proxy::EncryptedProxy;

mod encrypted_skeleton;
pub use self::encrypted_skeleton::EncryptedSkeleton;

mod filesystem;
pub use self::filesystem::Filesystem;

#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
mod filesystem_btrfs;
#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
pub use self::filesystem_btrfs::FilesystemBTRFS;

#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
mod filesystem_btrfs_proxy;
#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
pub use self::filesystem_btrfs_proxy::FilesystemBTRFSProxy;

#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
mod filesystem_btrfs_skeleton;
#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
pub use self::filesystem_btrfs_skeleton::FilesystemBTRFSSkeleton;

mod filesystem_proxy;
pub use self::filesystem_proxy::FilesystemProxy;

mod filesystem_skeleton;
pub use self::filesystem_skeleton::FilesystemSkeleton;

mod job;
pub use self::job::Job;

mod job_proxy;
pub use self::job_proxy::JobProxy;

mod job_skeleton;
pub use self::job_skeleton::JobSkeleton;

mod logical_volume;
pub use self::logical_volume::LogicalVolume;

mod logical_volume_proxy;
pub use self::logical_volume_proxy::LogicalVolumeProxy;

mod logical_volume_skeleton;
pub use self::logical_volume_skeleton::LogicalVolumeSkeleton;

mod loop_;
pub use self::loop_::Loop;

mod loop_proxy;
pub use self::loop_proxy::LoopProxy;

mod loop_skeleton;
pub use self::loop_skeleton::LoopSkeleton;

mod md_raid;
pub use self::md_raid::MDRaid;

mod md_raid_proxy;
pub use self::md_raid_proxy::MDRaidProxy;

mod md_raid_skeleton;
pub use self::md_raid_skeleton::MDRaidSkeleton;

mod manager;
pub use self::manager::Manager;

#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
mod manager_btrfs;
#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
pub use self::manager_btrfs::ManagerBTRFS;

#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
mod manager_btrfs_proxy;
#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
pub use self::manager_btrfs_proxy::ManagerBTRFSProxy;

#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
mod manager_btrfs_skeleton;
#[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
pub use self::manager_btrfs_skeleton::ManagerBTRFSSkeleton;

mod manager_lvm2;
pub use self::manager_lvm2::ManagerLVM2;

mod manager_lvm2_proxy;
pub use self::manager_lvm2_proxy::ManagerLVM2Proxy;

mod manager_lvm2_skeleton;
pub use self::manager_lvm2_skeleton::ManagerLVM2Skeleton;

mod manager_proxy;
pub use self::manager_proxy::ManagerProxy;

mod manager_skeleton;
pub use self::manager_skeleton::ManagerSkeleton;

#[cfg(feature = "v2_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1")))]
mod object_info;
#[cfg(feature = "v2_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1")))]
pub use self::object_info::ObjectInfo;

mod object_manager_client;
pub use self::object_manager_client::ObjectManagerClient;

mod object_proxy;
pub use self::object_proxy::ObjectProxy;

mod object_skeleton;
pub use self::object_skeleton::ObjectSkeleton;

mod partition;
pub use self::partition::Partition;

mod partition_proxy;
pub use self::partition_proxy::PartitionProxy;

mod partition_skeleton;
pub use self::partition_skeleton::PartitionSkeleton;

mod partition_table;
pub use self::partition_table::PartitionTable;

mod partition_table_proxy;
pub use self::partition_table_proxy::PartitionTableProxy;

mod partition_table_skeleton;
pub use self::partition_table_skeleton::PartitionTableSkeleton;

mod physical_volume;
pub use self::physical_volume::PhysicalVolume;

mod physical_volume_proxy;
pub use self::physical_volume_proxy::PhysicalVolumeProxy;

mod physical_volume_skeleton;
pub use self::physical_volume_skeleton::PhysicalVolumeSkeleton;

mod swapspace;
pub use self::swapspace::Swapspace;

mod swapspace_proxy;
pub use self::swapspace_proxy::SwapspaceProxy;

mod swapspace_skeleton;
pub use self::swapspace_skeleton::SwapspaceSkeleton;

#[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
mod vdo_volume;
#[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
pub use self::vdo_volume::VDOVolume;

#[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
mod vdo_volume_proxy;
#[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
pub use self::vdo_volume_proxy::VDOVolumeProxy;

#[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
mod vdo_volume_skeleton;
#[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
pub use self::vdo_volume_skeleton::VDOVolumeSkeleton;

mod volume_group;
pub use self::volume_group::VolumeGroup;

mod volume_group_proxy;
pub use self::volume_group_proxy::VolumeGroupProxy;

mod volume_group_skeleton;
pub use self::volume_group_skeleton::VolumeGroupSkeleton;

mod partition_type_info;
pub use self::partition_type_info::PartitionTypeInfo;

mod enums;
pub use self::enums::Error;

mod flags;
pub use self::flags::PartitionTypeInfoFlags;

pub(crate) mod traits {
    pub use super::block::BlockExt;
    pub use super::block_lvm2::BlockLVM2Ext;
    pub use super::drive::DriveExt;
    pub use super::drive_ata::DriveAtaExt;
    pub use super::encrypted::EncryptedExt;
    pub use super::filesystem::FilesystemExt;
    #[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    pub use super::filesystem_btrfs::FilesystemBTRFSExt;
    pub use super::job::JobExt;
    pub use super::logical_volume::LogicalVolumeExt;
    pub use super::loop_::LoopExt;
    pub use super::md_raid::MDRaidExt;
    pub use super::manager::ManagerExt;
    #[cfg(feature = "v2_1_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    pub use super::manager_btrfs::ManagerBTRFSExt;
    pub use super::manager_lvm2::ManagerLVM2Ext;
    pub use super::object_skeleton::ObjectSkeletonExt;
    pub use super::partition::PartitionExt;
    pub use super::partition_table::PartitionTableExt;
    pub use super::physical_volume::PhysicalVolumeExt;
    pub use super::swapspace::SwapspaceExt;
    #[cfg(feature = "v2_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    pub use super::vdo_volume::VDOVolumeExt;
    pub use super::volume_group::VolumeGroupExt;
}
