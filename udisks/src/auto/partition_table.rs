// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksPartitionTable")]
    pub struct PartitionTable(Interface<ffi::UDisksPartitionTable, ffi::UDisksPartitionTableIface>);

    match fn {
        type_ => || ffi::udisks_partition_table_get_type(),
    }
}

impl PartitionTable {
        pub const NONE: Option<&'static PartitionTable> = None;
    

    //#[doc(alias = "udisks_partition_table_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_partition_table_interface_info() }
    //}

    //#[doc(alias = "udisks_partition_table_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_partition_table_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::PartitionTable>> Sealed for T {}
}

pub trait PartitionTableExt: IsA<PartitionTable> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_partition_table_call_create_partition")]
    //fn call_create_partition<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_offset: u64, arg_size: u64, arg_type: &str, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_table_call_create_partition() }
    //}

    //
    //fn call_create_partition_future(&self, arg_offset: u64, arg_size: u64, arg_type: &str, arg_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_partition(
        //        arg_offset,
        //        arg_size,
        //        &arg_type,
        //        &arg_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_table_call_create_partition_and_format")]
    //fn call_create_partition_and_format<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_offset: u64, arg_size: u64, arg_type: &str, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, arg_format_type: &str, arg_format_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_partition_table_call_create_partition_and_format() }
    //}

    //
    //fn call_create_partition_and_format_future(&self, arg_offset: u64, arg_size: u64, arg_type: &str, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, arg_format_type: &str, arg_format_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //let arg_format_type = String::from(arg_format_type);
        //let arg_format_options = arg_format_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_partition_and_format(
        //        arg_offset,
        //        arg_size,
        //        &arg_type,
        //        &arg_name,
        //        &arg_options,
        //        &arg_format_type,
        //        &arg_format_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_partition_table_call_create_partition_and_format_sync")]
    //fn call_create_partition_and_format_sync(&self, arg_offset: u64, arg_size: u64, arg_type: &str, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, arg_format_type: &str, arg_format_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_partition_table_call_create_partition_and_format_sync() }
    //}

    //#[doc(alias = "udisks_partition_table_call_create_partition_sync")]
    //fn call_create_partition_sync(&self, arg_offset: u64, arg_size: u64, arg_type: &str, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_partition_table_call_create_partition_sync() }
    //}

    //#[doc(alias = "udisks_partition_table_complete_create_partition")]
    //fn complete_create_partition(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, created_partition: &str) {
    //    unsafe { TODO: call ffi:udisks_partition_table_complete_create_partition() }
    //}

    //#[doc(alias = "udisks_partition_table_complete_create_partition_and_format")]
    //fn complete_create_partition_and_format(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, created_partition: &str) {
    //    unsafe { TODO: call ffi:udisks_partition_table_complete_create_partition_and_format() }
    //}

    #[doc(alias = "udisks_partition_table_dup_partitions")]
    fn dup_partitions(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::udisks_partition_table_dup_partitions(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_table_dup_type_")]
    fn dup_type_(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_partition_table_dup_type_(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_table_get_partitions")]
    #[doc(alias = "get_partitions")]
    fn partitions(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::udisks_partition_table_get_partitions(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_table_get_type_")]
    #[doc(alias = "get_type_")]
    fn type_(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_partition_table_get_type_(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_partition_table_set_type_")]
    fn set_type_(&self, value: &str) {
        unsafe {
            ffi::udisks_partition_table_set_type_(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    fn set_partitions(&self, partitions: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"partitions", partitions)
    }

    #[doc(alias = "type")]
    fn set_type(&self, type_: Option<&str>) {
        ObjectExt::set_property(self.as_ref(),"type", type_)
    }

    //#[doc(alias = "handle-create-partition")]
    //fn connect_handle_create_partition<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-create-partition-and-format")]
    //fn connect_handle_create_partition_and_format<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //    Ignored arg_format_options: GLib.Variant
    //}

    #[doc(alias = "partitions")]
    fn connect_partitions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_partitions_trampoline<P: IsA<PartitionTable>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartitionTable, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PartitionTable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::partitions\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_partitions_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "type")]
    fn connect_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_type_trampoline<P: IsA<PartitionTable>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksPartitionTable, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(PartitionTable::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<PartitionTable>> PartitionTableExt for O {}
