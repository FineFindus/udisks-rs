// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksManager")]
    pub struct Manager(Interface<ffi::UDisksManager, ffi::UDisksManagerIface>);

    match fn {
        type_ => || ffi::udisks_manager_get_type(),
    }
}

impl Manager {
        pub const NONE: Option<&'static Manager> = None;
    

    //#[doc(alias = "udisks_manager_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_manager_interface_info() }
    //}

    //#[doc(alias = "udisks_manager_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_manager_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Manager>> Sealed for T {}
}

pub trait ManagerExt: IsA<Manager> + sealed::Sealed + 'static {
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_check")]
    //fn call_can_check<P: FnOnce(Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>) + 'static>(&self, arg_type: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_check() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_can_check_future(&self, arg_type: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_can_check(
        //        &arg_type,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_check_sync")]
    //fn call_can_check_sync(&self, arg_type: &str, out_available: /*Ignored*/glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_check_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_format")]
    //fn call_can_format<P: FnOnce(Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>) + 'static>(&self, arg_type: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_format() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_can_format_future(&self, arg_type: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_can_format(
        //        &arg_type,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_format_sync")]
    //fn call_can_format_sync(&self, arg_type: &str, out_available: /*Ignored*/glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_format_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_repair")]
    //fn call_can_repair<P: FnOnce(Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>) + 'static>(&self, arg_type: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_repair() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_can_repair_future(&self, arg_type: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_can_repair(
        //        &arg_type,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_repair_sync")]
    //fn call_can_repair_sync(&self, arg_type: &str, out_available: /*Ignored*/glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_repair_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_resize")]
    //fn call_can_resize<P: FnOnce(Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>) + 'static>(&self, arg_type: &str, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_resize() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_can_resize_future(&self, arg_type: &str) -> Pin<Box_<dyn std::future::Future<Output = Result</*Ignored*/glib::Variant, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_type = String::from(arg_type);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_can_resize(
        //        &arg_type,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_can_resize_sync")]
    //fn call_can_resize_sync(&self, arg_type: &str, out_available: /*Ignored*/glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_call_can_resize_sync() }
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "udisks_manager_call_enable_module")]
    //fn call_enable_module<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_enable: bool, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_enable_module() }
    //}

    //
    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //fn call_enable_module_future(&self, arg_name: &str, arg_enable: bool) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_enable_module(
        //        &arg_name,
        //        arg_enable,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "udisks_manager_call_enable_module_sync")]
    //fn call_enable_module_sync(&self, arg_name: &str, arg_enable: bool, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_call_enable_module_sync() }
    //}

    //#[doc(alias = "udisks_manager_call_enable_modules")]
    //fn call_enable_modules<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_enable: bool, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_enable_modules() }
    //}

    //
    //fn call_enable_modules_future(&self, arg_enable: bool) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_enable_modules(
        //        arg_enable,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_manager_call_enable_modules_sync")]
    //fn call_enable_modules_sync(&self, arg_enable: bool, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_call_enable_modules_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_get_block_devices")]
    //fn call_get_block_devices<P: FnOnce(Result<Vec<glib::GString>, /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_get_block_devices() }
    //}

    //
    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //fn call_get_block_devices_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<glib::GString>, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_get_block_devices(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_call_get_block_devices_sync")]
    //fn call_get_block_devices_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(Vec<glib::GString>), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_manager_call_get_block_devices_sync() }
    //}

    //#[doc(alias = "udisks_manager_call_loop_setup")]
    //fn call_loop_setup<P: FnOnce(Result<(glib::GString, /*Ignored*/gio::UnixFDList), /*Ignored*/glib::Error>) + 'static>(&self, arg_fd: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, fd_list: /*Ignored*/Option<&gio::UnixFDList>, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_loop_setup() }
    //}

    //
    //fn call_loop_setup_future(&self, arg_fd: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, fd_list: /*Ignored*/Option<&gio::UnixFDList>) -> Pin<Box_<dyn std::future::Future<Output = Result<(glib::GString, /*Ignored*/gio::UnixFDList), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_fd = arg_fd.clone();
        //let arg_options = arg_options.clone();
        //let fd_list = fd_list.map(ToOwned::to_owned);
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_loop_setup(
        //        &arg_fd,
        //        &arg_options,
        //        fd_list.as_ref().map(::std::borrow::Borrow::borrow),
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_manager_call_loop_setup_sync")]
    //fn call_loop_setup_sync(&self, arg_fd: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, fd_list: /*Ignored*/Option<&gio::UnixFDList>, out_fd_list: /*Ignored*/gio::UnixFDList, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_manager_call_loop_setup_sync() }
    //}

    //#[doc(alias = "udisks_manager_call_mdraid_create")]
    //fn call_mdraid_create<P: FnOnce(Result<glib::GString, /*Ignored*/glib::Error>) + 'static>(&self, arg_blocks: &str, arg_level: &str, arg_name: &str, arg_chunk: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_mdraid_create() }
    //}

    //
    //fn call_mdraid_create_future(&self, arg_blocks: &str, arg_level: &str, arg_name: &str, arg_chunk: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<glib::GString, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_blocks = String::from(arg_blocks);
        //let arg_level = String::from(arg_level);
        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_mdraid_create(
        //        &arg_blocks,
        //        &arg_level,
        //        &arg_name,
        //        arg_chunk,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_manager_call_mdraid_create_sync")]
    //fn call_mdraid_create_sync(&self, arg_blocks: &str, arg_level: &str, arg_name: &str, arg_chunk: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(glib::GString), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_manager_call_mdraid_create_sync() }
    //}

    //#[cfg(feature = "v2_7_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_3")))]
    //#[doc(alias = "udisks_manager_call_resolve_device")]
    //fn call_resolve_device<P: FnOnce(Result<Vec<glib::GString>, /*Ignored*/glib::Error>) + 'static>(&self, arg_devspec: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_call_resolve_device() }
    //}

    //
    //#[cfg(feature = "v2_7_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_3")))]
    //fn call_resolve_device_future(&self, arg_devspec: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<Vec<glib::GString>, /*Ignored*/glib::Error>> + 'static>> {

        //let arg_devspec = arg_devspec.clone();
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resolve_device(
        //        &arg_devspec,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_7_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_3")))]
    //#[doc(alias = "udisks_manager_call_resolve_device_sync")]
    //fn call_resolve_device_sync(&self, arg_devspec: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(Vec<glib::GString>), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_manager_call_resolve_device_sync() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_complete_can_check")]
    //fn complete_can_check(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, available: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_can_check() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_complete_can_format")]
    //fn complete_can_format(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, available: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_can_format() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_complete_can_repair")]
    //fn complete_can_repair(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, available: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_can_repair() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_complete_can_resize")]
    //fn complete_can_resize(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, available: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_can_resize() }
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "udisks_manager_complete_enable_module")]
    //fn complete_enable_module(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_enable_module() }
    //}

    //#[doc(alias = "udisks_manager_complete_enable_modules")]
    //fn complete_enable_modules(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_enable_modules() }
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "udisks_manager_complete_get_block_devices")]
    //fn complete_get_block_devices(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, block_objects: &str) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_get_block_devices() }
    //}

    //#[doc(alias = "udisks_manager_complete_loop_setup")]
    //fn complete_loop_setup(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, fd_list: /*Ignored*/Option<&gio::UnixFDList>, resulting_device: &str) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_loop_setup() }
    //}

    //#[doc(alias = "udisks_manager_complete_mdraid_create")]
    //fn complete_mdraid_create(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, resulting_array: &str) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_mdraid_create() }
    //}

    //#[cfg(feature = "v2_7_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_3")))]
    //#[doc(alias = "udisks_manager_complete_resolve_device")]
    //fn complete_resolve_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, devices: &str) {
    //    unsafe { TODO: call ffi:udisks_manager_complete_resolve_device() }
    //}

    #[doc(alias = "udisks_manager_dup_default_encryption_type")]
    fn dup_default_encryption_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_manager_dup_default_encryption_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_dup_supported_encryption_types")]
    fn dup_supported_encryption_types(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::udisks_manager_dup_supported_encryption_types(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_dup_supported_filesystems")]
    fn dup_supported_filesystems(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::udisks_manager_dup_supported_filesystems(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_dup_version")]
    fn dup_version(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_manager_dup_version(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_get_default_encryption_type")]
    #[doc(alias = "get_default_encryption_type")]
    fn default_encryption_type(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_manager_get_default_encryption_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_get_supported_encryption_types")]
    #[doc(alias = "get_supported_encryption_types")]
    fn supported_encryption_types(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::udisks_manager_get_supported_encryption_types(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_get_supported_filesystems")]
    #[doc(alias = "get_supported_filesystems")]
    fn supported_filesystems(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::udisks_manager_get_supported_filesystems(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_get_version")]
    #[doc(alias = "get_version")]
    fn version(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_manager_get_version(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_manager_set_default_encryption_type")]
    fn set_default_encryption_type(&self, value: &str) {
        unsafe {
            ffi::udisks_manager_set_default_encryption_type(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_manager_set_version")]
    fn set_version(&self, value: &str) {
        unsafe {
            ffi::udisks_manager_set_version(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "supported-encryption-types")]
    fn set_supported_encryption_types(&self, supported_encryption_types: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"supported-encryption-types", supported_encryption_types)
    }

    #[doc(alias = "supported-filesystems")]
    fn set_supported_filesystems(&self, supported_filesystems: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"supported-filesystems", supported_filesystems)
    }

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-can-check")]
    //fn connect_handle_can_check<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-can-format")]
    //fn connect_handle_can_format<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-can-repair")]
    //fn connect_handle_can_repair<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-can-resize")]
    //fn connect_handle_can_resize<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[cfg(feature = "v2_9")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_9")))]
    //#[doc(alias = "handle-enable-module")]
    //fn connect_handle_enable_module<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[doc(alias = "handle-enable-modules")]
    //fn connect_handle_enable_modules<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //}

    //#[cfg(feature = "v2_7_2")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_2")))]
    //#[doc(alias = "handle-get-block-devices")]
    //fn connect_handle_get_block_devices<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-loop-setup")]
    //fn connect_handle_loop_setup<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored fd_list: Gio.UnixFDList
    //    Ignored arg_fd: GLib.Variant
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-mdraid-create")]
    //fn connect_handle_mdraid_create<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Empty ctype arg_blocks: *.CArray TypeId { ns_id: 0, id: 28 }
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_7_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_7_3")))]
    //#[doc(alias = "handle-resolve-device")]
    //fn connect_handle_resolve_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_devspec: GLib.Variant
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "default-encryption-type")]
    fn connect_default_encryption_type_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_default_encryption_type_trampoline<P: IsA<Manager>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Manager::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::default-encryption-type\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_default_encryption_type_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "supported-encryption-types")]
    fn connect_supported_encryption_types_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_supported_encryption_types_trampoline<P: IsA<Manager>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Manager::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::supported-encryption-types\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_supported_encryption_types_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "supported-filesystems")]
    fn connect_supported_filesystems_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_supported_filesystems_trampoline<P: IsA<Manager>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Manager::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::supported-filesystems\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_supported_filesystems_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "version")]
    fn connect_version_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_version_trampoline<P: IsA<Manager>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Manager::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::version\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_version_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Manager>> ManagerExt for O {}
