// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksDrive")]
    pub struct Drive(Interface<ffi::UDisksDrive, ffi::UDisksDriveIface>);

    match fn {
        type_ => || ffi::udisks_drive_get_type(),
    }
}

impl Drive {
        pub const NONE: Option<&'static Drive> = None;
    

    //#[doc(alias = "udisks_drive_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_drive_interface_info() }
    //}

    //#[doc(alias = "udisks_drive_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_drive_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Drive>> Sealed for T {}
}

pub trait DriveExt: IsA<Drive> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_drive_call_eject")]
    //fn call_eject<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_drive_call_eject() }
    //}

    //
    //fn call_eject_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_eject(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_drive_call_eject_sync")]
    //fn call_eject_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_drive_call_eject_sync() }
    //}

    //#[doc(alias = "udisks_drive_call_power_off")]
    //fn call_power_off<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_drive_call_power_off() }
    //}

    //
    //fn call_power_off_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_power_off(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_drive_call_power_off_sync")]
    //fn call_power_off_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_drive_call_power_off_sync() }
    //}

    //#[doc(alias = "udisks_drive_call_set_configuration")]
    //fn call_set_configuration<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_value: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_drive_call_set_configuration() }
    //}

    //
    //fn call_set_configuration_future(&self, arg_value: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_value = arg_value.clone();
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_configuration(
        //        &arg_value,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_drive_call_set_configuration_sync")]
    //fn call_set_configuration_sync(&self, arg_value: /*Ignored*/&glib::Variant, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_drive_call_set_configuration_sync() }
    //}

    //#[doc(alias = "udisks_drive_complete_eject")]
    //fn complete_eject(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_drive_complete_eject() }
    //}

    //#[doc(alias = "udisks_drive_complete_power_off")]
    //fn complete_power_off(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_drive_complete_power_off() }
    //}

    //#[doc(alias = "udisks_drive_complete_set_configuration")]
    //fn complete_set_configuration(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_drive_complete_set_configuration() }
    //}

    //#[doc(alias = "udisks_drive_dup_configuration")]
    //fn dup_configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_drive_dup_configuration() }
    //}

    #[doc(alias = "udisks_drive_dup_connection_bus")]
    fn dup_connection_bus(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_connection_bus(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_id")]
    fn dup_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_media")]
    fn dup_media(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_media(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_media_compatibility")]
    fn dup_media_compatibility(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::udisks_drive_dup_media_compatibility(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_model")]
    fn dup_model(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_revision")]
    fn dup_revision(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_revision(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_seat")]
    fn dup_seat(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_seat(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_serial")]
    fn dup_serial(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_serial(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_sibling_id")]
    fn dup_sibling_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_sibling_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_sort_key")]
    fn dup_sort_key(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_sort_key(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_vendor")]
    fn dup_vendor(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_vendor(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_dup_wwn")]
    fn dup_wwn(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_drive_dup_wwn(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_can_power_off")]
    #[doc(alias = "get_can_power_off")]
    fn can_power_off(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_can_power_off(self.as_ref().to_glib_none().0))
        }
    }

    //#[doc(alias = "udisks_drive_get_configuration")]
    //#[doc(alias = "get_configuration")]
    //fn configuration(&self) -> /*Ignored*/Option<glib::Variant> {
    //    unsafe { TODO: call ffi:udisks_drive_get_configuration() }
    //}

    #[doc(alias = "udisks_drive_get_connection_bus")]
    #[doc(alias = "get_connection_bus")]
    fn connection_bus(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_connection_bus(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_ejectable")]
    #[doc(alias = "get_ejectable")]
    fn is_ejectable(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_ejectable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_media")]
    #[doc(alias = "get_media")]
    fn media(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_media(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_media_available")]
    #[doc(alias = "get_media_available")]
    fn is_media_available(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_media_available(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_media_change_detected")]
    #[doc(alias = "get_media_change_detected")]
    fn is_media_change_detected(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_media_change_detected(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_media_compatibility")]
    #[doc(alias = "get_media_compatibility")]
    fn media_compatibility(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_none(ffi::udisks_drive_get_media_compatibility(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_media_removable")]
    #[doc(alias = "get_media_removable")]
    fn is_media_removable(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_media_removable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_model")]
    #[doc(alias = "get_model")]
    fn model(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_model(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_optical")]
    #[doc(alias = "get_optical")]
    fn is_optical(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_optical(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_optical_blank")]
    #[doc(alias = "get_optical_blank")]
    fn is_optical_blank(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_optical_blank(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_optical_num_audio_tracks")]
    #[doc(alias = "get_optical_num_audio_tracks")]
    fn optical_num_audio_tracks(&self) -> u32 {
        unsafe {
            ffi::udisks_drive_get_optical_num_audio_tracks(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_optical_num_data_tracks")]
    #[doc(alias = "get_optical_num_data_tracks")]
    fn optical_num_data_tracks(&self) -> u32 {
        unsafe {
            ffi::udisks_drive_get_optical_num_data_tracks(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_optical_num_sessions")]
    #[doc(alias = "get_optical_num_sessions")]
    fn optical_num_sessions(&self) -> u32 {
        unsafe {
            ffi::udisks_drive_get_optical_num_sessions(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_optical_num_tracks")]
    #[doc(alias = "get_optical_num_tracks")]
    fn optical_num_tracks(&self) -> u32 {
        unsafe {
            ffi::udisks_drive_get_optical_num_tracks(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_removable")]
    #[doc(alias = "get_removable")]
    fn is_removable(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_drive_get_removable(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_revision")]
    #[doc(alias = "get_revision")]
    fn revision(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_revision(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_rotation_rate")]
    #[doc(alias = "get_rotation_rate")]
    fn rotation_rate(&self) -> i32 {
        unsafe {
            ffi::udisks_drive_get_rotation_rate(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_seat")]
    #[doc(alias = "get_seat")]
    fn seat(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_seat(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_serial")]
    #[doc(alias = "get_serial")]
    fn serial(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_serial(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_sibling_id")]
    #[doc(alias = "get_sibling_id")]
    fn sibling_id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_sibling_id(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_size")]
    #[doc(alias = "get_size")]
    fn size(&self) -> u64 {
        unsafe {
            ffi::udisks_drive_get_size(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_sort_key")]
    #[doc(alias = "get_sort_key")]
    fn sort_key(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_sort_key(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_time_detected")]
    #[doc(alias = "get_time_detected")]
    fn time_detected(&self) -> u64 {
        unsafe {
            ffi::udisks_drive_get_time_detected(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_time_media_detected")]
    #[doc(alias = "get_time_media_detected")]
    fn time_media_detected(&self) -> u64 {
        unsafe {
            ffi::udisks_drive_get_time_media_detected(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_drive_get_vendor")]
    #[doc(alias = "get_vendor")]
    fn vendor(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_vendor(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_get_wwn")]
    #[doc(alias = "get_wwn")]
    fn wwn(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_drive_get_wwn(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_drive_set_can_power_off")]
    fn set_can_power_off(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_can_power_off(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    //#[doc(alias = "udisks_drive_set_configuration")]
    //fn set_configuration(&self, value: /*Ignored*/&glib::Variant) {
    //    unsafe { TODO: call ffi:udisks_drive_set_configuration() }
    //}

    #[doc(alias = "udisks_drive_set_connection_bus")]
    fn set_connection_bus(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_connection_bus(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_ejectable")]
    fn set_ejectable(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_ejectable(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_id")]
    fn set_id(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_id(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_media")]
    fn set_media(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_media(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_media_available")]
    fn set_media_available(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_media_available(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_media_change_detected")]
    fn set_media_change_detected(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_media_change_detected(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_media_removable")]
    fn set_media_removable(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_media_removable(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_model")]
    fn set_model(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_model(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_optical")]
    fn set_optical(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_optical(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_optical_blank")]
    fn set_optical_blank(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_optical_blank(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_optical_num_audio_tracks")]
    fn set_optical_num_audio_tracks(&self, value: u32) {
        unsafe {
            ffi::udisks_drive_set_optical_num_audio_tracks(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_optical_num_data_tracks")]
    fn set_optical_num_data_tracks(&self, value: u32) {
        unsafe {
            ffi::udisks_drive_set_optical_num_data_tracks(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_optical_num_sessions")]
    fn set_optical_num_sessions(&self, value: u32) {
        unsafe {
            ffi::udisks_drive_set_optical_num_sessions(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_optical_num_tracks")]
    fn set_optical_num_tracks(&self, value: u32) {
        unsafe {
            ffi::udisks_drive_set_optical_num_tracks(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_removable")]
    fn set_removable(&self, value: bool) {
        unsafe {
            ffi::udisks_drive_set_removable(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_drive_set_revision")]
    fn set_revision(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_revision(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_rotation_rate")]
    fn set_rotation_rate(&self, value: i32) {
        unsafe {
            ffi::udisks_drive_set_rotation_rate(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_seat")]
    fn set_seat(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_seat(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_serial")]
    fn set_serial(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_serial(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_sibling_id")]
    fn set_sibling_id(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_sibling_id(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_size")]
    fn set_size(&self, value: u64) {
        unsafe {
            ffi::udisks_drive_set_size(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_sort_key")]
    fn set_sort_key(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_sort_key(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_time_detected")]
    fn set_time_detected(&self, value: u64) {
        unsafe {
            ffi::udisks_drive_set_time_detected(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_time_media_detected")]
    fn set_time_media_detected(&self, value: u64) {
        unsafe {
            ffi::udisks_drive_set_time_media_detected(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_drive_set_vendor")]
    fn set_vendor(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_vendor(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_drive_set_wwn")]
    fn set_wwn(&self, value: &str) {
        unsafe {
            ffi::udisks_drive_set_wwn(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "media-compatibility")]
    fn set_media_compatibility(&self, media_compatibility: &[&str]) {
        ObjectExt::set_property(self.as_ref(),"media-compatibility", media_compatibility)
    }

    //#[doc(alias = "handle-eject")]
    //fn connect_handle_eject<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-power-off")]
    //fn connect_handle_power_off<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-configuration")]
    //fn connect_handle_set_configuration<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_value: GLib.Variant
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "can-power-off")]
    fn connect_can_power_off_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_power_off_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-power-off\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_can_power_off_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "configuration")]
    fn connect_configuration_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_configuration_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::configuration\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_configuration_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "connection-bus")]
    fn connect_connection_bus_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_connection_bus_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::connection-bus\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_connection_bus_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "ejectable")]
    fn connect_ejectable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_ejectable_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::ejectable\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_ejectable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "id")]
    fn connect_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_id_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media")]
    fn connect_media_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media-available")]
    fn connect_media_available_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_available_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-available\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_available_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media-change-detected")]
    fn connect_media_change_detected_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_change_detected_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-change-detected\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_change_detected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media-compatibility")]
    fn connect_media_compatibility_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_compatibility_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-compatibility\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_compatibility_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "media-removable")]
    fn connect_media_removable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_media_removable_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::media-removable\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_media_removable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "model")]
    fn connect_model_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_model_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::model\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_model_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "optical")]
    fn connect_optical_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_optical_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::optical\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_optical_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "optical-blank")]
    fn connect_optical_blank_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_optical_blank_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::optical-blank\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_optical_blank_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "optical-num-audio-tracks")]
    fn connect_optical_num_audio_tracks_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_optical_num_audio_tracks_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::optical-num-audio-tracks\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_optical_num_audio_tracks_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "optical-num-data-tracks")]
    fn connect_optical_num_data_tracks_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_optical_num_data_tracks_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::optical-num-data-tracks\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_optical_num_data_tracks_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "optical-num-sessions")]
    fn connect_optical_num_sessions_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_optical_num_sessions_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::optical-num-sessions\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_optical_num_sessions_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "optical-num-tracks")]
    fn connect_optical_num_tracks_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_optical_num_tracks_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::optical-num-tracks\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_optical_num_tracks_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "removable")]
    fn connect_removable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_removable_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::removable\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_removable_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "revision")]
    fn connect_revision_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_revision_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::revision\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_revision_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "rotation-rate")]
    fn connect_rotation_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_rotation_rate_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::rotation-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_rotation_rate_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "seat")]
    fn connect_seat_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_seat_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::seat\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_seat_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "serial")]
    fn connect_serial_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_serial_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::serial\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_serial_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sibling-id")]
    fn connect_sibling_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sibling_id_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sibling-id\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sibling_id_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "size")]
    fn connect_size_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_size_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::size\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_size_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sort-key")]
    fn connect_sort_key_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sort_key_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sort-key\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sort_key_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "time-detected")]
    fn connect_time_detected_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_time_detected_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::time-detected\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_time_detected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "time-media-detected")]
    fn connect_time_media_detected_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_time_media_detected_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::time-media-detected\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_time_media_detected_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "vendor")]
    fn connect_vendor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_vendor_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::vendor\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_vendor_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "wwn")]
    fn connect_wwn_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_wwn_trampoline<P: IsA<Drive>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksDrive, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Drive::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::wwn\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_wwn_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Drive>> DriveExt for O {}
