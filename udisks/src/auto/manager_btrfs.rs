// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*};
#[cfg(feature = "v2_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
use glib::{translate::*};

glib::wrapper! {
    #[doc(alias = "UDisksManagerBTRFS")]
    pub struct ManagerBTRFS(Interface<ffi::UDisksManagerBTRFS, ffi::UDisksManagerBTRFSIface>);

    match fn {
        type_ => || ffi::udisks_manager_btrfs_get_type(),
    }
}

impl ManagerBTRFS {
        pub const NONE: Option<&'static ManagerBTRFS> = None;
    

    //#[doc(alias = "udisks_manager_btrfs_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_manager_btrfs_interface_info() }
    //}

    //#[doc(alias = "udisks_manager_btrfs_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_manager_btrfs_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ManagerBTRFS>> Sealed for T {}
}

pub trait ManagerBTRFSExt: IsA<ManagerBTRFS> + sealed::Sealed + 'static {
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_manager_btrfs_call_create_volume")]
    //fn call_create_volume<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_devices: &str, arg_label: &str, arg_data_level: &str, arg_md_level: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_manager_btrfs_call_create_volume() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_create_volume_future(&self, arg_devices: &str, arg_label: &str, arg_data_level: &str, arg_md_level: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_devices = String::from(arg_devices);
        //let arg_label = String::from(arg_label);
        //let arg_data_level = String::from(arg_data_level);
        //let arg_md_level = String::from(arg_md_level);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_volume(
        //        &arg_devices,
        //        &arg_label,
        //        &arg_data_level,
        //        &arg_md_level,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_manager_btrfs_call_create_volume_sync")]
    //fn call_create_volume_sync(&self, arg_devices: &str, arg_label: &str, arg_data_level: &str, arg_md_level: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_manager_btrfs_call_create_volume_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_manager_btrfs_complete_create_volume")]
    //fn complete_create_volume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_manager_btrfs_complete_create_volume() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-create-volume")]
    //fn connect_handle_create_volume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Empty ctype arg_devices: *.CArray TypeId { ns_id: 0, id: 28 }
    //    Ignored arg_options: GLib.Variant
    //}
}

impl<O: IsA<ManagerBTRFS>> ManagerBTRFSExt for O {}
