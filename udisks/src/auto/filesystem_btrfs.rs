// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksFilesystemBTRFS")]
    pub struct FilesystemBTRFS(Interface<ffi::UDisksFilesystemBTRFS, ffi::UDisksFilesystemBTRFSIface>);

    match fn {
        type_ => || ffi::udisks_filesystem_btrfs_get_type(),
    }
}

impl FilesystemBTRFS {
        pub const NONE: Option<&'static FilesystemBTRFS> = None;
    

    //#[doc(alias = "udisks_filesystem_btrfs_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_interface_info() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::FilesystemBTRFS>> Sealed for T {}
}

pub trait FilesystemBTRFSExt: IsA<FilesystemBTRFS> + sealed::Sealed + 'static {
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_add_device")]
    //fn call_add_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_add_device() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_add_device_future(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_device = String::from(arg_device);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_add_device(
        //        &arg_device,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_add_device_sync")]
    //fn call_add_device_sync(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_add_device_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_create_snapshot")]
    //fn call_create_snapshot<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_source: &str, arg_dest: &str, arg_ro: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_create_snapshot() }
    //}

    //
    //fn call_create_snapshot_future(&self, arg_source: &str, arg_dest: &str, arg_ro: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_source = String::from(arg_source);
        //let arg_dest = String::from(arg_dest);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_snapshot(
        //        &arg_source,
        //        &arg_dest,
        //        arg_ro,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_create_snapshot_sync")]
    //fn call_create_snapshot_sync(&self, arg_source: &str, arg_dest: &str, arg_ro: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_create_snapshot_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_create_subvolume")]
    //fn call_create_subvolume<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_create_subvolume() }
    //}

    //
    //fn call_create_subvolume_future(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_create_subvolume(
        //        &arg_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_create_subvolume_sync")]
    //fn call_create_subvolume_sync(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_create_subvolume_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_get_subvolumes")]
    //fn call_get_subvolumes<P: FnOnce(Result<(/*Ignored*/glib::Variant, i32), /*Ignored*/glib::Error>) + 'static>(&self, arg_snapshots_only: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_get_subvolumes() }
    //}

    //
    //fn call_get_subvolumes_future(&self, arg_snapshots_only: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(/*Ignored*/glib::Variant, i32), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_get_subvolumes(
        //        arg_snapshots_only,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_get_subvolumes_sync")]
    //fn call_get_subvolumes_sync(&self, arg_snapshots_only: bool, arg_options: /*Ignored*/&glib::Variant, out_subvolumes: /*Ignored*/glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> Result<(i32), glib::Error> {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_get_subvolumes_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_remove_device")]
    //fn call_remove_device<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_remove_device() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_remove_device_future(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_device = String::from(arg_device);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_remove_device(
        //        &arg_device,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_remove_device_sync")]
    //fn call_remove_device_sync(&self, arg_device: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_remove_device_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_remove_subvolume")]
    //fn call_remove_subvolume<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_remove_subvolume() }
    //}

    //
    //fn call_remove_subvolume_future(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_name = String::from(arg_name);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_remove_subvolume(
        //        &arg_name,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_remove_subvolume_sync")]
    //fn call_remove_subvolume_sync(&self, arg_name: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_remove_subvolume_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_repair")]
    //fn call_repair<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_repair() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_repair_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_repair(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_repair_sync")]
    //fn call_repair_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_repair_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_resize")]
    //fn call_resize<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_resize() }
    //}

    //
    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //fn call_resize_future(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_resize(
        //        arg_size,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_call_resize_sync")]
    //fn call_resize_sync(&self, arg_size: u64, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_resize_sync() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_set_label")]
    //fn call_set_label<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_set_label() }
    //}

    //
    //fn call_set_label_future(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_label = String::from(arg_label);
        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_label(
        //        &arg_label,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_call_set_label_sync")]
    //fn call_set_label_sync(&self, arg_label: &str, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_call_set_label_sync() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_complete_add_device")]
    //fn complete_add_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_add_device() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_complete_create_snapshot")]
    //fn complete_create_snapshot(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_create_snapshot() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_complete_create_subvolume")]
    //fn complete_create_subvolume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_create_subvolume() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_complete_get_subvolumes")]
    //fn complete_get_subvolumes(&self, invocation: /*Ignored*/gio::DBusMethodInvocation, subvolumes: /*Ignored*/&glib::Variant, subvolumes_cnt: i32) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_get_subvolumes() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_complete_remove_device")]
    //fn complete_remove_device(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_remove_device() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_complete_remove_subvolume")]
    //fn complete_remove_subvolume(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_remove_subvolume() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_complete_repair")]
    //fn complete_repair(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_repair() }
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "udisks_filesystem_btrfs_complete_resize")]
    //fn complete_resize(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_resize() }
    //}

    //#[doc(alias = "udisks_filesystem_btrfs_complete_set_label")]
    //fn complete_set_label(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_filesystem_btrfs_complete_set_label() }
    //}

    #[doc(alias = "udisks_filesystem_btrfs_dup_label")]
    fn dup_label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_filesystem_btrfs_dup_label(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_dup_uuid")]
    fn dup_uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_filesystem_btrfs_dup_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_get_label")]
    #[doc(alias = "get_label")]
    fn label(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_filesystem_btrfs_get_label(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_get_num_devices")]
    #[doc(alias = "get_num_devices")]
    fn num_devices(&self) -> u64 {
        unsafe {
            ffi::udisks_filesystem_btrfs_get_num_devices(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_get_used")]
    #[doc(alias = "get_used")]
    fn used(&self) -> u64 {
        unsafe {
            ffi::udisks_filesystem_btrfs_get_used(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_get_uuid")]
    #[doc(alias = "get_uuid")]
    fn uuid(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_filesystem_btrfs_get_uuid(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_set_label")]
    fn set_label(&self, value: &str) {
        unsafe {
            ffi::udisks_filesystem_btrfs_set_label(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_set_num_devices")]
    fn set_num_devices(&self, value: u64) {
        unsafe {
            ffi::udisks_filesystem_btrfs_set_num_devices(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_set_used")]
    fn set_used(&self, value: u64) {
        unsafe {
            ffi::udisks_filesystem_btrfs_set_used(self.as_ref().to_glib_none().0, value);
        }
    }

    #[doc(alias = "udisks_filesystem_btrfs_set_uuid")]
    fn set_uuid(&self, value: &str) {
        unsafe {
            ffi::udisks_filesystem_btrfs_set_uuid(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-add-device")]
    //fn connect_handle_add_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_1_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    //#[doc(alias = "handle-create-snapshot")]
    //fn connect_handle_create_snapshot<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_1_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    //#[doc(alias = "handle-create-subvolume")]
    //fn connect_handle_create_subvolume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_1_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    //#[doc(alias = "handle-get-subvolumes")]
    //fn connect_handle_get_subvolumes<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-remove-device")]
    //fn connect_handle_remove_device<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_1_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    //#[doc(alias = "handle-remove-subvolume")]
    //fn connect_handle_remove_subvolume<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-repair")]
    //fn connect_handle_repair<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_3")))]
    //#[doc(alias = "handle-resize")]
    //fn connect_handle_resize<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[cfg(feature = "v2_1_3")]
    //#[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    //#[doc(alias = "handle-set-label")]
    //fn connect_handle_set_label<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[cfg(feature = "v2_1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    #[doc(alias = "label")]
    fn connect_label_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_label_trampoline<P: IsA<FilesystemBTRFS>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksFilesystemBTRFS, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(FilesystemBTRFS::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::label\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_label_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    #[doc(alias = "num-devices")]
    fn connect_num_devices_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_num_devices_trampoline<P: IsA<FilesystemBTRFS>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksFilesystemBTRFS, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(FilesystemBTRFS::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::num-devices\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_num_devices_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    #[doc(alias = "used")]
    fn connect_used_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_used_trampoline<P: IsA<FilesystemBTRFS>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksFilesystemBTRFS, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(FilesystemBTRFS::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::used\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_used_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(feature = "v2_1_3")]
    #[cfg_attr(docsrs, doc(cfg(feature = "v2_1_3")))]
    #[doc(alias = "uuid")]
    fn connect_uuid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_uuid_trampoline<P: IsA<FilesystemBTRFS>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksFilesystemBTRFS, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(FilesystemBTRFS::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::uuid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_uuid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<FilesystemBTRFS>> FilesystemBTRFSExt for O {}
