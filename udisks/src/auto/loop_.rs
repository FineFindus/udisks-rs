// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksLoop")]
    pub struct Loop(Interface<ffi::UDisksLoop, ffi::UDisksLoopIface>);

    match fn {
        type_ => || ffi::udisks_loop_get_type(),
    }
}

impl Loop {
        pub const NONE: Option<&'static Loop> = None;
    

    //#[doc(alias = "udisks_loop_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_loop_interface_info() }
    //}

    //#[doc(alias = "udisks_loop_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_loop_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Loop>> Sealed for T {}
}

pub trait LoopExt: IsA<Loop> + sealed::Sealed + 'static {
    //#[doc(alias = "udisks_loop_call_delete")]
    //fn call_delete<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_loop_call_delete() }
    //}

    //
    //fn call_delete_future(&self, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_delete(
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_loop_call_delete_sync")]
    //fn call_delete_sync(&self, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_loop_call_delete_sync() }
    //}

    //#[doc(alias = "udisks_loop_call_set_autoclear")]
    //fn call_set_autoclear<P: FnOnce(Result<(), /*Ignored*/glib::Error>) + 'static>(&self, arg_value: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, callback: P) {
    //    unsafe { TODO: call ffi:udisks_loop_call_set_autoclear() }
    //}

    //
    //fn call_set_autoclear_future(&self, arg_value: bool, arg_options: /*Ignored*/&glib::Variant) -> Pin<Box_<dyn std::future::Future<Output = Result<(), /*Ignored*/glib::Error>> + 'static>> {

        //let arg_options = arg_options.clone();
        //Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
        //    obj.call_set_autoclear(
        //        arg_value,
        //        &arg_options,
        //        Some(cancellable),
        //        move |res| {
        //            send.resolve(res);
        //        },
        //    );
        //}))
    //}

    //#[doc(alias = "udisks_loop_call_set_autoclear_sync")]
    //fn call_set_autoclear_sync(&self, arg_value: bool, arg_options: /*Ignored*/&glib::Variant, cancellable: /*Ignored*/Option<&gio::Cancellable>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi:udisks_loop_call_set_autoclear_sync() }
    //}

    //#[doc(alias = "udisks_loop_complete_delete")]
    //fn complete_delete(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_loop_complete_delete() }
    //}

    //#[doc(alias = "udisks_loop_complete_set_autoclear")]
    //fn complete_set_autoclear(&self, invocation: /*Ignored*/gio::DBusMethodInvocation) {
    //    unsafe { TODO: call ffi:udisks_loop_complete_set_autoclear() }
    //}

    #[doc(alias = "udisks_loop_dup_backing_file")]
    fn dup_backing_file(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_loop_dup_backing_file(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_loop_get_autoclear")]
    #[doc(alias = "get_autoclear")]
    fn is_autoclear(&self) -> bool {
        unsafe {
            from_glib(ffi::udisks_loop_get_autoclear(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_loop_get_backing_file")]
    #[doc(alias = "get_backing_file")]
    fn backing_file(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_loop_get_backing_file(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_loop_get_setup_by_uid")]
    #[doc(alias = "get_setup_by_uid")]
    fn setup_by_uid(&self) -> u32 {
        unsafe {
            ffi::udisks_loop_get_setup_by_uid(self.as_ref().to_glib_none().0)
        }
    }

    #[doc(alias = "udisks_loop_set_autoclear")]
    fn set_autoclear(&self, value: bool) {
        unsafe {
            ffi::udisks_loop_set_autoclear(self.as_ref().to_glib_none().0, value.into_glib());
        }
    }

    #[doc(alias = "udisks_loop_set_backing_file")]
    fn set_backing_file(&self, value: &str) {
        unsafe {
            ffi::udisks_loop_set_backing_file(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "udisks_loop_set_setup_by_uid")]
    fn set_setup_by_uid(&self, value: u32) {
        unsafe {
            ffi::udisks_loop_set_setup_by_uid(self.as_ref().to_glib_none().0, value);
        }
    }

    //#[doc(alias = "handle-delete")]
    //fn connect_handle_delete<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    //#[doc(alias = "handle-set-autoclear")]
    //fn connect_handle_set_autoclear<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored invocation: Gio.DBusMethodInvocation
    //    Ignored arg_options: GLib.Variant
    //}

    #[doc(alias = "autoclear")]
    fn connect_autoclear_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_autoclear_trampoline<P: IsA<Loop>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLoop, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Loop::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::autoclear\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_autoclear_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "backing-file")]
    fn connect_backing_file_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_backing_file_trampoline<P: IsA<Loop>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLoop, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Loop::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::backing-file\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_backing_file_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "setup-by-uid")]
    fn connect_setup_by_uid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_setup_by_uid_trampoline<P: IsA<Loop>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksLoop, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Loop::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::setup-by-uid\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_setup_by_uid_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Loop>> LoopExt for O {}
