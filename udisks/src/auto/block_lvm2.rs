// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ..
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "UDisksBlockLVM2")]
    pub struct BlockLVM2(Interface<ffi::UDisksBlockLVM2, ffi::UDisksBlockLVM2Iface>);

    match fn {
        type_ => || ffi::udisks_block_lvm2_get_type(),
    }
}

impl BlockLVM2 {
        pub const NONE: Option<&'static BlockLVM2> = None;
    

    //#[doc(alias = "udisks_block_lvm2_interface_info")]
    //pub fn interface_info() -> /*Ignored*/Option<gio::DBusInterfaceInfo> {
    //    unsafe { TODO: call ffi:udisks_block_lvm2_interface_info() }
    //}

    //#[doc(alias = "udisks_block_lvm2_override_properties")]
    //pub fn override_properties(klass: /*Ignored*/&mut glib::ObjectClass, property_id_begin: u32) -> u32 {
    //    unsafe { TODO: call ffi:udisks_block_lvm2_override_properties() }
    //}
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::BlockLVM2>> Sealed for T {}
}

pub trait BlockLVM2Ext: IsA<BlockLVM2> + sealed::Sealed + 'static {
    #[doc(alias = "udisks_block_lvm2_dup_logical_volume")]
    fn dup_logical_volume(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::udisks_block_lvm2_dup_logical_volume(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_block_lvm2_get_logical_volume")]
    #[doc(alias = "get_logical_volume")]
    fn logical_volume(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::udisks_block_lvm2_get_logical_volume(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "udisks_block_lvm2_set_logical_volume")]
    fn set_logical_volume(&self, value: &str) {
        unsafe {
            ffi::udisks_block_lvm2_set_logical_volume(self.as_ref().to_glib_none().0, value.to_glib_none().0);
        }
    }

    #[doc(alias = "logical-volume")]
    fn connect_logical_volume_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_logical_volume_trampoline<P: IsA<BlockLVM2>, F: Fn(&P) + 'static>(this: *mut ffi::UDisksBlockLVM2, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(BlockLVM2::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::logical-volume\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_logical_volume_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<BlockLVM2>> BlockLVM2Ext for O {}
