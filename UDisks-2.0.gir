<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="udisks2"/>
  <c:include name="udisks/udisks.h"/>
  <namespace name="UDisks"
             version="2.0"
             shared-library="libudisks2.so.0"
             c:identifier-prefixes="UDisks"
             c:symbol-prefixes="udisks">
    <function-macro name="BLOCK"
                    c:identifier="UDISKS_BLOCK"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1412"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_GET_IFACE"
                    c:identifier="UDISKS_BLOCK_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1414"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2"
                    c:identifier="UDISKS_BLOCK_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5146"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_GET_IFACE"
                    c:identifier="UDISKS_BLOCK_LVM2_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5148"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5181"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5182"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5183"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5251"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5252"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5253"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY"
                    c:identifier="UDISKS_BLOCK_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1918"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY_CLASS"
                    c:identifier="UDISKS_BLOCK_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1919"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1920"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON"
                    c:identifier="UDISKS_BLOCK_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1988"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON_CLASS"
                    c:identifier="UDISKS_BLOCK_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1989"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1990"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Block"
               c:symbol-prefix="block"
               c:type="UDisksBlock"
               glib:type-name="UDisksBlock"
               glib:get-type="udisks_block_get_type"
               glib:type-struct="BlockIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="13786">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1535"/>
      <function name="interface_info"
                c:identifier="udisks_block_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13730">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="1543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13735">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13743">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="1544"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13751">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13745">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13746">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15072">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1478"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15082">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15074">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_crypto_backing_device"
                      invoker="get_crypto_backing_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15125">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1480"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15135">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15127">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device"
                      invoker="get_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14319">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1482"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14329">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14321">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device_number"
                      invoker="get_device_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14478">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1484"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14486">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14480">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_drive" invoker="get_drive" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14636">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1486"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14646">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14638">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_auto"
                      invoker="get_hint_auto"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15277">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1488"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15285">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15279">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_icon_name"
                      invoker="get_hint_icon_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15363">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1490"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15373">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15365">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_ignore"
                      invoker="get_hint_ignore"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15244">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1492"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15252">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15246">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_name"
                      invoker="get_hint_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15310">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1494"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15320">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15312">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_partitionable"
                      invoker="get_hint_partitionable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15178">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1496"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15186">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15180">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_symbolic_icon_name"
                      invoker="get_hint_symbolic_icon_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15416">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1520"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15426">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15418">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_system"
                      invoker="get_hint_system"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15211">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1498"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15219">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15213">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id"
                      invoker="get_id"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14511">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1522"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14521">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14513">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_label"
                      invoker="get_id_label"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14966">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1500"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14976">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14968">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_type"
                      invoker="get_id_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14860">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1502"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14870">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14862">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_usage"
                      invoker="get_id_usage"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14807">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1504"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14817">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14809">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_uuid"
                      invoker="get_id_uuid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15019">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1506"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15029">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15021">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_version"
                      invoker="get_id_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14913">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1508"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14923">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14915">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid"
                      invoker="get_mdraid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14689">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1524"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14699">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14691">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid_member"
                      invoker="get_mdraid_member"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14748">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1526"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14758">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14750">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_preferred_device"
                      invoker="get_preferred_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14372">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1510"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14382">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14374">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_only"
                      invoker="get_read_only"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14603">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1512"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14611">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14605">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14570">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1514"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14578">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14572">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symlinks"
                      invoker="get_symlinks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14425">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1516"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14435">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14427">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_userspace_mount_options"
                      invoker="get_userspace_mount_options"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15475">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_userspace_mount_options() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1518"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15485">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15477">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_configuration_item">
        <source-position filename="udisks-generated.h" line="1425"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_format">
        <source-position filename="udisks-generated.h" line="1431"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_secret_configuration">
        <source-position filename="udisks-generated.h" line="1437"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_device">
        <source-position filename="udisks-generated.h" line="1528"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_backup">
        <source-position filename="udisks-generated.h" line="1442"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_benchmark">
        <source-position filename="udisks-generated.h" line="1448"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_restore">
        <source-position filename="udisks-generated.h" line="1454"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_configuration_item">
        <source-position filename="udisks-generated.h" line="1460"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rescan">
        <source-position filename="udisks-generated.h" line="1466"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_update_configuration_item">
        <source-position filename="udisks-generated.h" line="1471"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_configuration_item"
              c:identifier="udisks_block_call_add_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15528">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_add_configuration_item_finish() to get the result of the operation.

See udisks_block_call_add_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1600"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15530">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15531">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15532">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15533">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15534">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15535">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_finish"
              c:identifier="udisks_block_call_add_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15564">Finishes an operation started with udisks_block_call_add_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="1608"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15572">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15566">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15567">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_add_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_sync"
              c:identifier="udisks_block_call_add_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15591">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_add_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1613"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15603">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15593">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15594">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15595">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15596">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format" c:identifier="udisks_block_call_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15950">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_format_finish() to get the result of the operation.

See udisks_block_call_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1682"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15952">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15953">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15954">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15956">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15957">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_finish"
              c:identifier="udisks_block_call_format_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15986">Finishes an operation started with udisks_block_call_format().</doc>
        <source-position filename="udisks-generated.h" line="1690"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15994">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15988">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15989">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_sync"
              c:identifier="udisks_block_call_format_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16013">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1695"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16025">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16015">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16016">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16017">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16018">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration"
              c:identifier="udisks_block_call_get_secret_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15846">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_get_secret_configuration_finish() to get the result of the operation.

See udisks_block_call_get_secret_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1662"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15848">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15849">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15850">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15851">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15852">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_finish"
              c:identifier="udisks_block_call_get_secret_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15879">Finishes an operation started with udisks_block_call_get_secret_configuration().</doc>
        <source-position filename="udisks-generated.h" line="1669"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15888">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15881">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15882">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15883">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_get_secret_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_sync"
              c:identifier="udisks_block_call_get_secret_configuration_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15909">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_get_secret_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1675"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15921">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15911">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15912">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15913">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15914">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device"
              c:identifier="udisks_block_call_open_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16399">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_device_finish() to get the result of the operation.

See udisks_block_call_open_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1774"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16401">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16402">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16403">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16404">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16405">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16406">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16407">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device_finish"
              c:identifier="udisks_block_call_open_device_finish"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16440">Finishes an operation started with udisks_block_call_open_device().</doc>
        <source-position filename="udisks-generated.h" line="1783"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16450">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16442">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16443">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16444">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16445">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device_sync"
              c:identifier="udisks_block_call_open_device_sync"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16474">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1790"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16489">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16476">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16477">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16478">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16479">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16480">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16481">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16482">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup"
              c:identifier="udisks_block_call_open_for_backup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16054">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_backup_finish() to get the result of the operation.

See udisks_block_call_open_for_backup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1702"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16056">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16057">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16058">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16059">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16060">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16061">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_finish"
              c:identifier="udisks_block_call_open_for_backup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16090">Finishes an operation started with udisks_block_call_open_for_backup().</doc>
        <source-position filename="udisks-generated.h" line="1710"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16100">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16092">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16093">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16094">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16095">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_backup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_sync"
              c:identifier="udisks_block_call_open_for_backup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16122">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_backup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1717"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16136">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16124">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16125">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16126">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16127">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16128">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark"
              c:identifier="udisks_block_call_open_for_benchmark">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16284">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_benchmark_finish() to get the result of the operation.

See udisks_block_call_open_for_benchmark_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1750"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16286">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16287">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16288">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16289">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16290">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16291">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_finish"
              c:identifier="udisks_block_call_open_for_benchmark_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16320">Finishes an operation started with udisks_block_call_open_for_benchmark().</doc>
        <source-position filename="udisks-generated.h" line="1758"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16330">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16322">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16323">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16324">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16325">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_benchmark().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_sync"
              c:identifier="udisks_block_call_open_for_benchmark_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16352">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_benchmark() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1765"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16366">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16354">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16355">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16356">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16357">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16358">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16359">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore"
              c:identifier="udisks_block_call_open_for_restore">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16169">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_restore_finish() to get the result of the operation.

See udisks_block_call_open_for_restore_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1726"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16171">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16172">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16173">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16174">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16175">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16176">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_finish"
              c:identifier="udisks_block_call_open_for_restore_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16205">Finishes an operation started with udisks_block_call_open_for_restore().</doc>
        <source-position filename="udisks-generated.h" line="1734"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16215">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16207">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16208">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16209">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16210">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_restore().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_sync"
              c:identifier="udisks_block_call_open_for_restore_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16237">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_restore() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1741"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16251">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16239">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16240">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16241">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16242">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16243">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16244">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item"
              c:identifier="udisks_block_call_remove_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15632">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_remove_configuration_item_finish() to get the result of the operation.

See udisks_block_call_remove_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1620"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15634">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15635">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15636">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15637">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15638">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15639">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_finish"
              c:identifier="udisks_block_call_remove_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15668">Finishes an operation started with udisks_block_call_remove_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="1628"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15676">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15670">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15671">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_remove_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_sync"
              c:identifier="udisks_block_call_remove_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15695">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_remove_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1633"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15707">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15697">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15698">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15699">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15700">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan" c:identifier="udisks_block_call_rescan">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16526">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_rescan_finish() to get the result of the operation.

See udisks_block_call_rescan_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1800"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16528">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16529">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16530">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16531">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16532">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_finish"
              c:identifier="udisks_block_call_rescan_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16559">Finishes an operation started with udisks_block_call_rescan().</doc>
        <source-position filename="udisks-generated.h" line="1807"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16567">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16561">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16562">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_rescan().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_sync"
              c:identifier="udisks_block_call_rescan_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16586">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_rescan() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1812"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16597">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16588">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16589">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16590">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item"
              c:identifier="udisks_block_call_update_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15736">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_update_configuration_item_finish() to get the result of the operation.

See udisks_block_call_update_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1640"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15738">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15739">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15740">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15741">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15742">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15743">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15744">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_finish"
              c:identifier="udisks_block_call_update_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15775">Finishes an operation started with udisks_block_call_update_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="1649"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15783">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15777">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15778">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_update_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_sync"
              c:identifier="udisks_block_call_update_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15802">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_update_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1654"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15815">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15804">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15805">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15806">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15807">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15808">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_configuration_item"
              c:identifier="udisks_block_complete_add_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16624">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1548"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16626">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16627">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_format"
              c:identifier="udisks_block_complete_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16699">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1565"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16701">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16702">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_secret_configuration"
              c:identifier="udisks_block_complete_get_secret_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16678">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1560"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16680">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16681">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="configuration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16682">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_device"
              c:identifier="udisks_block_complete_open_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16789">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1587"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16791">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16792">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16793">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16794">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_backup"
              c:identifier="udisks_block_complete_open_for_backup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16717">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1569"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16719">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16720">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16721">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16722">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_benchmark"
              c:identifier="udisks_block_complete_open_for_benchmark">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16765">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1581"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16767">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16768">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16769">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16770">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_restore"
              c:identifier="udisks_block_complete_open_for_restore">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16741">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1575"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16743">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16744">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16745">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16746">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_configuration_item"
              c:identifier="udisks_block_complete_remove_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16642">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1552"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16644">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16645">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rescan"
              c:identifier="udisks_block_complete_rescan">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16815">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1593"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16817">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16818">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_update_configuration_item"
              c:identifier="udisks_block_complete_update_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16660">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1556"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16662">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="16663">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_block_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15092">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1879"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15100">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15094">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_crypto_backing_device"
              c:identifier="udisks_block_dup_crypto_backing_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15145">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1883"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15153">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15147">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device"
              c:identifier="udisks_block_dup_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14339">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1822"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14347">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14341">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drive"
              c:identifier="udisks_block_dup_drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14656">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1847"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14664">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14658">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_icon_name"
              c:identifier="udisks_block_dup_hint_icon_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15383">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1903"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15391">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15385">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_name"
              c:identifier="udisks_block_dup_hint_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15330">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1899"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15338">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15332">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_symbolic_icon_name"
              c:identifier="udisks_block_dup_hint_symbolic_icon_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15438">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1907"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15446">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15440">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_block_dup_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14533">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1837"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14541">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14535">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_label"
              c:identifier="udisks_block_dup_id_label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14986">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1871"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14994">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14988">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_type"
              c:identifier="udisks_block_dup_id_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14880">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1863"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14888">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14882">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_usage"
              c:identifier="udisks_block_dup_id_usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14827">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1859"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14835">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14829">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_uuid"
              c:identifier="udisks_block_dup_id_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15039">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1875"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15047">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15041">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_version"
              c:identifier="udisks_block_dup_id_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14933">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1867"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14941">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14935">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid"
              c:identifier="udisks_block_dup_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14711">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1851"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14719">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14713">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid_member"
              c:identifier="udisks_block_dup_mdraid_member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14770">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1855"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14778">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14772">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_preferred_device"
              c:identifier="udisks_block_dup_preferred_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14392">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1826"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14400">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14394">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_symlinks"
              c:identifier="udisks_block_dup_symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14445">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1830"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14453">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14447">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_userspace_mount_options"
              c:identifier="udisks_block_dup_userspace_mount_options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15495">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1911"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15503">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15497">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_block_get_configuration"
              glib:get-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15072">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1878"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15082">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15074">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crypto_backing_device"
              c:identifier="udisks_block_get_crypto_backing_device"
              glib:get-property="crypto-backing-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15125">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1882"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15135">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15127">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="udisks_block_get_device"
              glib:get-property="device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14319">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1821"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14329">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14321">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_number"
              c:identifier="udisks_block_get_device_number"
              glib:get-property="device-number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14478">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1833"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14486">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14480">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_block_get_drive"
              glib:get-property="drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14636">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1846"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14646">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14638">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_auto"
              c:identifier="udisks_block_get_hint_auto"
              glib:get-property="hint-auto"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15277">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1895"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15285">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15279">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_icon_name"
              c:identifier="udisks_block_get_hint_icon_name"
              glib:get-property="hint-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15363">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1902"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15373">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15365">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_ignore"
              c:identifier="udisks_block_get_hint_ignore"
              glib:get-property="hint-ignore"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15244">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1892"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15252">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15246">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_name"
              c:identifier="udisks_block_get_hint_name"
              glib:get-property="hint-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15310">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1898"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15320">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15312">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_partitionable"
              c:identifier="udisks_block_get_hint_partitionable"
              glib:get-property="hint-partitionable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15178">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1886"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15186">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15180">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_symbolic_icon_name"
              c:identifier="udisks_block_get_hint_symbolic_icon_name"
              glib:get-property="hint-symbolic-icon-name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15416">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1906"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15426">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15418">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_system"
              c:identifier="udisks_block_get_hint_system"
              glib:get-property="hint-system"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15211">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1889"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15219">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15213">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_block_get_id"
              glib:get-property="id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14511">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1836"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14521">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14513">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_label"
              c:identifier="udisks_block_get_id_label"
              glib:get-property="id-label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14966">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1870"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14976">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14968">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_type"
              c:identifier="udisks_block_get_id_type"
              glib:get-property="id-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14860">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1862"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14870">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14862">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_usage"
              c:identifier="udisks_block_get_id_usage"
              glib:get-property="id-usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14807">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1858"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14817">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14809">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_uuid"
              c:identifier="udisks_block_get_id_uuid"
              glib:get-property="id-uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15019">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1874"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15029">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15021">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_version"
              c:identifier="udisks_block_get_id_version"
              glib:get-property="id-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14913">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1866"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14923">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14915">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_block_get_mdraid"
              glib:get-property="mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14689">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1850"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14699">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14691">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_member"
              c:identifier="udisks_block_get_mdraid_member"
              glib:get-property="mdraid-member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14748">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1854"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14758">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14750">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_device"
              c:identifier="udisks_block_get_preferred_device"
              glib:get-property="preferred-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14372">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1825"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14382">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14374">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_only"
              c:identifier="udisks_block_get_read_only"
              glib:get-property="read-only"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14603">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1843"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14611">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14605">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_block_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14570">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1840"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14578">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14572">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symlinks"
              c:identifier="udisks_block_get_symlinks"
              glib:get-property="symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14425">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1829"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14435">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14427">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_userspace_mount_options"
              c:identifier="udisks_block_get_userspace_mount_options"
              glib:get-property="userspace-mount-options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15475">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_userspace_mount_options() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1910"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15485">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15477">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_block_set_configuration"
              glib:set-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15110">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1880"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15112">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15113">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_crypto_backing_device"
              c:identifier="udisks_block_set_crypto_backing_device"
              glib:set-property="crypto-backing-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15163">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1884"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15165">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15166">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device"
              c:identifier="udisks_block_set_device"
              glib:set-property="device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14357">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1823"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14359">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14360">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_number"
              c:identifier="udisks_block_set_device_number"
              glib:set-property="device-number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14496">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1834"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14498">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14499">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive"
              c:identifier="udisks_block_set_drive"
              glib:set-property="drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14674">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1848"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14676">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14677">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_auto"
              c:identifier="udisks_block_set_hint_auto"
              glib:set-property="hint-auto"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15295">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1896"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15297">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15298">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_icon_name"
              c:identifier="udisks_block_set_hint_icon_name"
              glib:set-property="hint-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15401">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1904"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15403">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15404">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_ignore"
              c:identifier="udisks_block_set_hint_ignore"
              glib:set-property="hint-ignore"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15262">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1893"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15264">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15265">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_name"
              c:identifier="udisks_block_set_hint_name"
              glib:set-property="hint-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15348">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1900"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15350">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15351">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_partitionable"
              c:identifier="udisks_block_set_hint_partitionable"
              glib:set-property="hint-partitionable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15196">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1887"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15198">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15199">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_symbolic_icon_name"
              c:identifier="udisks_block_set_hint_symbolic_icon_name"
              glib:set-property="hint-symbolic-icon-name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15458">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1908"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15460">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15461">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_system"
              c:identifier="udisks_block_set_hint_system"
              glib:set-property="hint-system"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15229">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1890"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15231">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15232">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_block_set_id"
              glib:set-property="id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14553">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1838"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14555">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14556">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_label"
              c:identifier="udisks_block_set_id_label"
              glib:set-property="id-label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15004">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1872"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15006">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15007">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_type"
              c:identifier="udisks_block_set_id_type"
              glib:set-property="id-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14898">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1864"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14900">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14901">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_usage"
              c:identifier="udisks_block_set_id_usage"
              glib:set-property="id-usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14845">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1860"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14847">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14848">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_uuid"
              c:identifier="udisks_block_set_id_uuid"
              glib:set-property="id-uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15057">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1876"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15059">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15060">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_version"
              c:identifier="udisks_block_set_id_version"
              glib:set-property="id-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14951">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1868"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14953">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14954">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_block_set_mdraid"
              glib:set-property="mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14731">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1852"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14733">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14734">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid_member"
              c:identifier="udisks_block_set_mdraid_member"
              glib:set-property="mdraid-member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14790">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1856"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14792">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14793">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preferred_device"
              c:identifier="udisks_block_set_preferred_device"
              glib:set-property="preferred-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14410">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14412">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14413">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_only"
              c:identifier="udisks_block_set_read_only"
              glib:set-property="read-only"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14621">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1844"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14623">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14624">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_block_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14588">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1841"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14590">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14591">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_symlinks"
              c:identifier="udisks_block_set_symlinks"
              glib:set-property="symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14463">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1831"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14465">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14466">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_userspace_mount_options"
              c:identifier="udisks_block_set_userspace_mount_options"
              glib:set-property="userspace-mount-options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15513">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1912"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15515">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15516">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_configuration"
                getter="get_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14225">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="crypto-backing-device"
                writable="1"
                transfer-ownership="none"
                setter="set_crypto_backing_device"
                getter="get_crypto_backing_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14234">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device"
                writable="1"
                transfer-ownership="none"
                setter="set_device"
                getter="get_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14084">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device-number"
                writable="1"
                transfer-ownership="none"
                setter="set_device_number"
                getter="get_device_number"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14111">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="drive"
                writable="1"
                transfer-ownership="none"
                setter="set_drive"
                getter="get_drive"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14149">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-auto"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_auto"
                getter="get_hint_auto"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14270">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_icon_name"
                getter="get_hint_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14288">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-ignore"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_ignore"
                getter="get_hint_ignore"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14261">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_name"
                getter="get_hint_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14279">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-partitionable"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_partitionable"
                getter="get_hint_partitionable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14243">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-symbolic-icon-name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_symbolic_icon_name"
                getter="get_hint_symbolic_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14297">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-system"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_system"
                getter="get_hint_system"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14252">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14120">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-label"
                writable="1"
                transfer-ownership="none"
                setter="set_id_label"
                getter="get_id_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14207">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-type"
                writable="1"
                transfer-ownership="none"
                setter="set_id_type"
                getter="get_id_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14189">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-usage"
                writable="1"
                transfer-ownership="none"
                setter="set_id_usage"
                getter="get_id_usage"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14180">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_id_uuid"
                getter="get_id_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14216">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-version"
                writable="1"
                transfer-ownership="none"
                setter="set_id_version"
                getter="get_id_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14198">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_mdraid"
                getter="get_mdraid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14158">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid-member"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_mdraid_member"
                getter="get_mdraid_member"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14169">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="preferred-device"
                writable="1"
                transfer-ownership="none"
                setter="set_preferred_device"
                getter="get_preferred_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14093">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-only"
                writable="1"
                transfer-ownership="none"
                setter="set_read_only"
                getter="get_read_only"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14140">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14131">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="symlinks"
                writable="1"
                transfer-ownership="none"
                setter="set_symlinks"
                getter="get_symlinks">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14102">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="userspace-mount-options"
                writable="1"
                transfer-ownership="none"
                setter="set_userspace_mount_options"
                getter="get_userspace_mount_options">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14308">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="handle-add-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13841">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_add_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13852">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13844">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13845">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13846">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-format" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13937">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13948">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13940">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13941">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13942">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-secret-configuration" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13914">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_get_secret_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13924">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13917">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13918">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-device" when="last" version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14033">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14045">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14036">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14037">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14038">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14039">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-backup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13961">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_backup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13972">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13964">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13965">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13966">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-benchmark" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14009">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_benchmark() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14020">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14012">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14013">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14014">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-restore" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13985">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_restore() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13996">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13988">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13989">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13990">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13865">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_remove_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13876">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13868">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13869">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13870">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rescan" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14060">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_rescan() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14070">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14063">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14064">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-update-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13889">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_update_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13901">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13892">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13893">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13894">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13895">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="BlockIface"
            c:type="UDisksBlockIface"
            glib:is-gtype-struct-for="Block">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="13792">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1535"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13794">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_configuration_item">
        <callback name="handle_add_configuration_item">
          <source-position filename="udisks-generated.h" line="1425"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_format">
        <callback name="handle_format">
          <source-position filename="udisks-generated.h" line="1431"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_secret_configuration">
        <callback name="handle_get_secret_configuration">
          <source-position filename="udisks-generated.h" line="1437"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_backup">
        <callback name="handle_open_for_backup">
          <source-position filename="udisks-generated.h" line="1442"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_benchmark">
        <callback name="handle_open_for_benchmark">
          <source-position filename="udisks-generated.h" line="1448"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_restore">
        <callback name="handle_open_for_restore">
          <source-position filename="udisks-generated.h" line="1454"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_configuration_item">
        <callback name="handle_remove_configuration_item">
          <source-position filename="udisks-generated.h" line="1460"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rescan">
        <callback name="handle_rescan">
          <source-position filename="udisks-generated.h" line="1466"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_update_configuration_item">
        <callback name="handle_update_configuration_item">
          <source-position filename="udisks-generated.h" line="1471"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_old_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_new_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="udisks-generated.h" line="1478"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15082">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15074">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_crypto_backing_device">
        <callback name="get_crypto_backing_device">
          <source-position filename="udisks-generated.h" line="1480"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15135">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15127">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device">
        <callback name="get_device">
          <source-position filename="udisks-generated.h" line="1482"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14329">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14321">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device_number">
        <callback name="get_device_number">
          <source-position filename="udisks-generated.h" line="1484"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14486">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14480">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_drive">
        <callback name="get_drive">
          <source-position filename="udisks-generated.h" line="1486"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14646">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14638">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_auto">
        <callback name="get_hint_auto">
          <source-position filename="udisks-generated.h" line="1488"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15285">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15279">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_icon_name">
        <callback name="get_hint_icon_name">
          <source-position filename="udisks-generated.h" line="1490"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15373">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15365">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_ignore">
        <callback name="get_hint_ignore">
          <source-position filename="udisks-generated.h" line="1492"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15252">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15246">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_name">
        <callback name="get_hint_name">
          <source-position filename="udisks-generated.h" line="1494"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15320">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15312">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_partitionable">
        <callback name="get_hint_partitionable">
          <source-position filename="udisks-generated.h" line="1496"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15186">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15180">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_system">
        <callback name="get_hint_system">
          <source-position filename="udisks-generated.h" line="1498"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15219">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15213">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_label">
        <callback name="get_id_label">
          <source-position filename="udisks-generated.h" line="1500"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14976">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14968">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_type">
        <callback name="get_id_type">
          <source-position filename="udisks-generated.h" line="1502"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14870">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14862">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_usage">
        <callback name="get_id_usage">
          <source-position filename="udisks-generated.h" line="1504"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14817">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14809">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_uuid">
        <callback name="get_id_uuid">
          <source-position filename="udisks-generated.h" line="1506"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15029">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15021">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_version">
        <callback name="get_id_version">
          <source-position filename="udisks-generated.h" line="1508"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14923">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14915">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_preferred_device">
        <callback name="get_preferred_device">
          <source-position filename="udisks-generated.h" line="1510"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14382">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14374">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_only">
        <callback name="get_read_only">
          <source-position filename="udisks-generated.h" line="1512"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14611">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14605">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="1514"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14578">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14572">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symlinks">
        <callback name="get_symlinks">
          <source-position filename="udisks-generated.h" line="1516"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14435">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14427">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_userspace_mount_options">
        <callback name="get_userspace_mount_options">
          <source-position filename="udisks-generated.h" line="1518"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15485">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15477">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_symbolic_icon_name">
        <callback name="get_hint_symbolic_icon_name">
          <source-position filename="udisks-generated.h" line="1520"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15426">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="15418">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="udisks-generated.h" line="1522"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14521">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14513">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid">
        <callback name="get_mdraid">
          <source-position filename="udisks-generated.h" line="1524"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14699">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14691">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid_member">
        <callback name="get_mdraid_member">
          <source-position filename="udisks-generated.h" line="1526"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14758">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="14750">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_device">
        <callback name="handle_open_device">
          <source-position filename="udisks-generated.h" line="1528"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_mode" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="BlockLVM2"
               c:symbol-prefix="block_lvm2"
               c:type="UDisksBlockLVM2"
               version="2.0.0"
               glib:type-name="UDisksBlockLVM2"
               glib:get-type="udisks_block_lvm2_get_type"
               glib:type-struct="BlockLVM2Iface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42177">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5160"/>
      <function name="interface_info"
                c:identifier="udisks_block_lvm2_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42141">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42146">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_lvm2_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42156">Overrides all #GObject properties in the #UDisksBlockLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42164">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42158">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42159">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_logical_volume"
                      invoker="get_logical_volume"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42215">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_lvm2_dup_logical_volume() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5158"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42225">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42217">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_logical_volume"
              c:identifier="udisks_block_lvm2_dup_logical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42237">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5174"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42245">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42239">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_volume"
              c:identifier="udisks_block_lvm2_get_logical_volume"
              glib:get-property="logical-volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42215">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_lvm2_dup_logical_volume() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5173"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42225">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42217">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_logical_volume"
              c:identifier="udisks_block_lvm2_set_logical_volume"
              glib:set-property="logical-volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42257">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42259">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42260">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="logical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_logical_volume"
                getter="get_logical_volume"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42202">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="BlockLVM2Iface"
            c:type="UDisksBlockLVM2Iface"
            glib:is-gtype-struct-for="BlockLVM2"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42185">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5160"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42187">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_logical_volume">
        <callback name="get_logical_volume">
          <source-position filename="udisks-generated.h" line="5158"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42225">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="42217">A #UDisksBlockLVM2.</doc>
              <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="BlockLVM2Proxy"
           c:symbol-prefix="block_lvm2_proxy"
           c:type="UDisksBlockLVM2Proxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockLVM2Proxy"
           glib:get-type="udisks_block_lvm2_proxy_get_type"
           glib:type-struct="BlockLVM2ProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42276">The #UDisksBlockLVM2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5201"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="BlockLVM2"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_lvm2_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42542">Finishes an operation started with udisks_block_lvm2_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5217"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42549">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42544">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_lvm2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_lvm2_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42638">Finishes an operation started with udisks_block_lvm2_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5236"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42645">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42640">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_lvm2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_lvm2_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42665">Like udisks_block_lvm2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_lvm2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5239"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42680">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42667">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42668">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42669">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42670">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42671">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_lvm2_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42569">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_lvm2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5220"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42584">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42571">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42572">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42573">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42574">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42575">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_block_lvm2_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42510">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_lvm2_proxy_new_finish() to get the result of the operation.

See udisks_block_lvm2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42512">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42513">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42514">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42515">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42516">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42517">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42518">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_lvm2_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42606">Like udisks_block_lvm2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_lvm2_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_lvm2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42608">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42609">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42610">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42611">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42612">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42613">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42614">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockLVM2ProxyPrivate"
              c:type="UDisksBlockLVM2ProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockLVM2ProxyClass"
            c:type="UDisksBlockLVM2ProxyClass"
            glib:is-gtype-struct-for="BlockLVM2Proxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42284">Class structure for #UDisksBlockLVM2Proxy.</doc>
      <source-position filename="udisks-generated.h" line="5201"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42286">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockLVM2ProxyPrivate"
            c:type="UDisksBlockLVM2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5189"/>
    </record>
    <class name="BlockLVM2Skeleton"
           c:symbol-prefix="block_lvm2_skeleton"
           c:type="UDisksBlockLVM2Skeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockLVM2Skeleton"
           glib:get-type="udisks_block_lvm2_skeleton_get_type"
           glib:type-struct="BlockLVM2SkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42704">The #UDisksBlockLVM2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5271"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="BlockLVM2"/>
      <constructor name="new"
                   c:identifier="udisks_block_lvm2_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43161">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5279"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43166">The skeleton object.</doc>
          <type name="BlockLVM2Skeleton" c:type="UDisksBlockLVM2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockLVM2SkeletonPrivate"
              c:type="UDisksBlockLVM2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockLVM2SkeletonClass"
            c:type="UDisksBlockLVM2SkeletonClass"
            glib:is-gtype-struct-for="BlockLVM2Skeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42712">Class structure for #UDisksBlockLVM2Skeleton.</doc>
      <source-position filename="udisks-generated.h" line="5271"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42714">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockLVM2SkeletonPrivate"
            c:type="UDisksBlockLVM2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5259"/>
    </record>
    <class name="BlockProxy"
           c:symbol-prefix="block_proxy"
           c:type="UDisksBlockProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockProxy"
           glib:get-type="udisks_block_proxy_get_type"
           glib:type-struct="BlockProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16835">The #UDisksBlockProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1938"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Block"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17485">Finishes an operation started with udisks_block_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1954"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17492">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17487">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17575">Finishes an operation started with udisks_block_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1973"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17582">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17577">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17600">Like udisks_block_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1976"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17615">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17602">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17603">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17604">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17605">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17606">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17510">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1957"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17525">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17512">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17513">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17514">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17515">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17516">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_block_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17455">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_proxy_new_finish() to get the result of the operation.

See udisks_block_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17457">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17458">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17459">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17460">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17461">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17462">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17463">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17545">Like udisks_block_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1965"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17547">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17548">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17549">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17550">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17551">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17552">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17553">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockProxyPrivate" c:type="UDisksBlockProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockProxyClass"
            c:type="UDisksBlockProxyClass"
            glib:is-gtype-struct-for="BlockProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16841">Class structure for #UDisksBlockProxy.</doc>
      <source-position filename="udisks-generated.h" line="1938"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16843">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockProxyPrivate"
            c:type="UDisksBlockProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1926"/>
    </record>
    <class name="BlockSkeleton"
           c:symbol-prefix="block_skeleton"
           c:type="UDisksBlockSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockSkeleton"
           glib:get-type="udisks_block_skeleton_get_type"
           glib:type-struct="BlockSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17637">The #UDisksBlockSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2008"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Block"/>
      <constructor name="new" c:identifier="udisks_block_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18402">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2016"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18407">The skeleton object.</doc>
          <type name="BlockSkeleton" c:type="UDisksBlock*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockSkeletonPrivate"
              c:type="UDisksBlockSkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockSkeletonClass"
            c:type="UDisksBlockSkeletonClass"
            glib:is-gtype-struct-for="BlockSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17643">Class structure for #UDisksBlockSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2008"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17645">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockSkeletonPrivate"
            c:type="UDisksBlockSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1996"/>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="UDISKS_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="53">Macro to check against the version of the libudisks2 library that
is being compiled against.</doc>
      <source-position filename="udisksversion.h" line="65"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="55">The major version to check for.</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="56">the minor version to check for.</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="57">The micro version to check for.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT"
                    c:identifier="UDISKS_CLIENT"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_GET_CLASS"
                    c:identifier="UDISKS_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="UDisksClient"
           parent="GObject.Object"
           glib:type-name="UDisksClient"
           glib:get-type="udisks_client_get_type">
      <doc xml:space="preserve"
           filename="udisksclient.c"
           line="30">#UDisksClient is used for accessing the UDisks service from a
client program.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="393">Finishes an operation started with udisks_client_new().</doc>
        <source-position filename="udisksclient.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="400">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="395">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_connection_finish"
                   c:identifier="udisks_client_new_for_connection_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="410">Finishes an operation started with udisks_client_new_for_connection().</doc>
        <source-position filename="udisksclient.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="417">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="412">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="429">Synchronously gets a #UDisksClient for the local system.</doc>
        <source-position filename="udisksclient.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="436">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="431">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_job_description_from_operation"
                c:identifier="udisks_client_get_job_description_from_operation">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2592">Gets a human-readable and localized text string describing a
a job @operation.

For known job operation types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <source-position filename="udisksclient.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2603">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2594">A job operation name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_client_new">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="321">Asynchronously gets a #UDisksClient. When the operation is
finished, @callback will be invoked in the &lt;link
linkend="g-main-context-push-thread-default"&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.</doc>
        <source-position filename="udisksclient.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="323">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="324">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="325">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_connection"
                c:identifier="udisks_client_new_for_connection"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="345">Like #udisks_client_new() but takes a #GDBusConnection which will be used
when connecting to the UDisks daemon over D-Bus. This is useful for unit
tests which may want to use #GTestDBus to create a D-Bus daemon on the
session bus.</doc>
        <source-position filename="udisksclient.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="347">a #GDBusConnection. If %NULL, a system bus
  connection will be used.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="349">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="350">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="351">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_all_blocks_for_mdraid"
              c:identifier="udisks_client_get_all_blocks_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1086">Gets all RAID devices (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt; and &lt;filename&gt;/dev/md1&lt;/filename&gt;) for @raid.

This is usually only useful in &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
situations&lt;/ulink&gt; — see udisks_client_get_block_for_mdraid() for
an example — and is normally used only to convey the problem in an
user interface.</doc>
        <source-position filename="udisksclient.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1099">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1088">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1089">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_dev"
              c:identifier="udisks_client_get_block_for_dev">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="776">Gets the #UDisksBlock corresponding to @block_device_number, if any.</doc>
        <source-position filename="udisksclient.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="783">A #UDisksBlock or %NULL if not found.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="778">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block_device_number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="779">A #dev_t to get a #UDisksBlock for.</doc>
            <type name="guint64" c:type="dev_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_drive"
              c:identifier="udisks_client_get_block_for_drive">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="869">Gets a block device corresponding to @drive. The returned block
device, if any, is for the whole disk drive, e.g. a partition block
device is never returned.

Set @get_physical to %TRUE if you need a block device that you can
send low-level SCSI commands with (for multipath, this returns one
of the physical paths). Set it to %FALSE if you need a block device
that you can read/write data with (for multipath, this returns the
mapped device).</doc>
        <source-position filename="udisksclient.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="885">A #UDisksBlock or %NULL if the requested
kind of block device is not available - use g_object_unref() to
free the returned object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="871">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="872">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="get_physical" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="873">%TRUE to get a physical device, %FALSE to get the logical device.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_label"
              c:identifier="udisks_client_get_block_for_label">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="685">Gets all the #UDisksBlock instances with the given label, if any.</doc>
        <source-position filename="udisksclient.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="692">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="687">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="688">The label.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_mdraid"
              c:identifier="udisks_client_get_block_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1045">Gets the RAID device (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt;) for @raid.

In the case of a &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
syndrome&lt;/ulink&gt;, it is undefined which RAID device is
returned. For example this can happen if
&lt;filename&gt;/dev/sda&lt;/filename&gt; and &lt;filename&gt;/dev/sdb&lt;/filename&gt; are
components of a two-disk RAID-1 and &lt;filename&gt;/dev/md0&lt;/filename&gt;
and &lt;filename&gt;/dev/md1&lt;/filename&gt; are two degraded arrays, each one
using exactly one of the two devices. Use
udisks_client_get_all_blocks_for_mdraid() to get all RAID devices.</doc>
        <source-position filename="udisksclient.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1062">A #UDisksBlock or %NULL if no RAID device is running.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1047">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1048">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_uuid"
              c:identifier="udisks_client_get_block_for_uuid">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="729">Gets all the #UDisksBlock instances with the given uuid, if any.</doc>
        <source-position filename="udisksclient.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="736">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="731">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="732">The uuid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cleartext_block"
              c:identifier="udisks_client_get_cleartext_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1267">If @block is an unlocked encrypted device, gets the cleartext device.</doc>
        <source-position filename="udisksclient.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1274">A #UDisksBlock or %NULL. Free with
g_object_unref() when done with it.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1269">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1270">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_for_block"
              c:identifier="udisks_client_get_drive_for_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="923">Gets the #UDisksDrive that @block belongs to, if any.</doc>
        <source-position filename="udisksclient.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="930">A #UDisksDrive or %NULL if there is no
#UDisksDrive for @block - free the returned object with
g_object_unref().</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="925">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="926">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_info"
              c:identifier="udisks_client_get_drive_info"
              deprecated="1"
              deprecated-version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="979">Gets information about a #UDisksDrive object that is suitable to
present in an user interface. The returned strings are localized.</doc>
        <doc-deprecated xml:space="preserve">Use udisks_client_get_object_info() instead.</doc-deprecated>
        <source-position filename="udisksclient.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="981">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="982">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="983">Return location for name or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="984">Return location for description or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_drive_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="985">Return location for icon representing the drive or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
          <parameter name="out_media_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="986">Return location for description of the media or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_media_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="987">Return location for icon representing the media or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_siblings"
              c:identifier="udisks_client_get_drive_siblings"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1316">Gets all siblings for @drive.</doc>
        <source-position filename="udisksclient.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1323">A list of #UDisksDrive instances. The
  returned list should be freed with g_list_free() after each element has been
  freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Drive"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1318">A #UDisksClient</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1319">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id_for_display"
              c:identifier="udisks_client_get_id_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2075">Gets a human readable localized string for @usage, @type and @version.</doc>
        <source-position filename="udisksclient.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2085">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2077">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="usage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2078">Usage id e.g. "filesystem" or "crypto".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2079">Type e.g. "ext4" or "crypto_LUKS"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2080">Version.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2081">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_job_description"
              c:identifier="udisks_client_get_job_description">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2657">Gets a human-readable and localized text string describing the
operation of @job.

For known job types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <source-position filename="udisksclient.h" line="161"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2669">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2659">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="job" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2660">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_jobs_for_object"
              c:identifier="udisks_client_get_jobs_for_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1507">Gets all the #UDisksJob instances that reference @object, if any.</doc>
        <source-position filename="udisksclient.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1514">A list of #UDisksJob instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Job"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1509">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1510">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop_for_block"
              c:identifier="udisks_client_get_loop_for_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1449">Gets the corresponding loop interface for @block.

This only works if @block itself is a loop device or a partition of
a loop device.</doc>
        <source-position filename="udisksclient.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1459">A #UDisksLoop or %NULL. Free with g_object_unref().</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1451">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1452">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="udisks_client_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="584">Gets the #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object.</doc>
        <source-position filename="udisksclient.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="591">A #UDisksManager or %NULL if the udisksd
daemon is not currently running. Do not free, the instance is owned
by @client.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="586">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_for_block"
              c:identifier="udisks_client_get_mdraid_for_block"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="952">Gets the #UDisksMDRaid that @block is the block device for, if any.</doc>
        <source-position filename="udisksclient.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="959">A #UDisksMDRaid or %NULL if there is no
  #UDisksMDRaid for @block or @block is not a MD-RAID block
  device. Free the returned object with g_object_unref().</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="954">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="955">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_compat_for_display"
              c:identifier="udisks_client_get_media_compat_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1864">Gets a human-readable string of the media described by
@media_compat. The returned information is localized.</doc>
        <source-position filename="udisksclient.h" line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1872">A string that should be freed with g_free() or
%NULL if unknown.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1866">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="media_compat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1867">An array of media types.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_members_for_mdraid"
              c:identifier="udisks_client_get_members_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1116">Gets the physical block devices that are part of @raid.</doc>
        <source-position filename="udisksclient.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1123">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1118">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1119">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="udisks_client_get_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="640">Convenience function for looking up an #UDisksObject for @object_path.</doc>
        <source-position filename="udisksclient.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="647">A #UDisksObject corresponding to
@object_path or %NULL if not found. The returned object must be
freed with g_object_unref().</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="642">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="643">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_info"
              c:identifier="udisks_client_get_object_info"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="884">Gets information about a #UDisksObject instance that is suitable to
present in an user interface. Information is returned in the
#UDisksObjectInfo object and is localized.</doc>
        <source-position filename="udisksclient.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="893">A #UDisksObjectInfo instance that should be freed with g_object_unref().</doc>
          <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="886">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="887">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_manager"
              c:identifier="udisks_client_get_object_manager"
              glib:get-property="object-manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="568">Gets the #GDBusObjectManager used by @client.</doc>
        <source-position filename="udisksclient.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="574">A #GDBusObjectManager. Do not free, the
instance is owned by @client.</doc>
          <type name="Gio.DBusObjectManager" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="570">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_info"
              c:identifier="udisks_client_get_partition_info">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1158">Gets information about @partition that is suitable to present in an
user interface in a single line of text.

The returned string is localized and includes things like the
partition type, flags (if any) and name (if any).</doc>
        <source-position filename="udisksclient.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1169">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1160">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1161"># #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_client_get_partition_table">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1419">Gets the #UDisksPartitionTable corresponding to @partition.</doc>
        <source-position filename="udisksclient.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1426">A #UDisksPartitionTable. Free with g_object_unref().</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1421">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1422">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtype_for_display"
              c:identifier="udisks_client_get_partition_table_subtype_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2256">Gets a human readable localized string for @partition_table_type and @partition_table_subtype.</doc>
        <source-position filename="udisksclient.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2264">A description of @partition_table_type and
@partition_table_subtype or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2258">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2259">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2260">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtypes"
              c:identifier="udisks_client_get_partition_table_subtypes">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2289">Gets all known subtypes for @partition_table_type.</doc>
        <source-position filename="udisksclient.h" line="135"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2296">A %NULL-terminated array of
strings. Only the container should be freed with g_free().</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2291">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2292">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_type_for_display"
              c:identifier="udisks_client_get_partition_table_type_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2201">Gets a human readable localized string for @partition_table_type.</doc>
        <source-position filename="udisksclient.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2208">A description of @partition_table_type or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2203">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2204">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_and_subtype_for_display"
              c:identifier="udisks_client_get_partition_type_and_subtype_for_display"
              version="2.1.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2547">Like udisks_client_get_partition_type_for_display() but also takes
the partition table subtype into account, if available. This is
useful in scenarios where different subtypes is using the same
partition type.</doc>
        <source-position filename="udisksclient.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2559">A description of @partition_type or %NULL if
unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2549">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2550">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2551">A partitioning subtype or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2552">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_for_display"
              c:identifier="udisks_client_get_partition_type_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2514">Gets a human readable localized string for @partiton_table_type and @partition_type.</doc>
        <source-position filename="udisksclient.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2522">A description of @partition_type or %NULL if
unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2516">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2517">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2518">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_infos"
              c:identifier="udisks_client_get_partition_type_infos">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2476">Gets information about all known partition types for @partition_table_type and @partition_table_subtype.</doc>
        <source-position filename="udisksclient.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2484">A list of
  #UDisksPartitionTypeInfo instances. The returned list should be freed
  with g_list_free() after freeing each element with udisks_partition_type_info_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="PartitionTypeInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2478">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2479">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2480">A partition table subtype or %NULL to get all known types.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_client_get_partitions">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1370">Gets all partitions of @table.</doc>
        <source-position filename="udisksclient.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1377">A list of #UDisksPartition instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Partition"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1372">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1373">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size_for_display"
              c:identifier="udisks_client_get_size_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1802">Utility function to get a human-readable string that represents @size.</doc>
        <source-position filename="udisksclient.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1811">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1804">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1805">Size in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="use_pow2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1806">Whether power-of-two units should be used instead of power-of-ten units.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1807">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_object" c:identifier="udisks_client_peek_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="659">Like udisks_client_get_object() but doesn't increase the reference
count on the returned #UDisksObject.

&lt;warning&gt;The returned object is only valid until removed so it is only safe to use this function on the thread where @client was constructed. Use udisks_client_get_object() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="udisksclient.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="669">A #UDisksObject corresponding to
@object_path or %NULL if not found.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="661">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="662">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_changed"
              c:identifier="udisks_client_queue_changed"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1586">Queues up a #UDisksClient::changed signal and rate-limit it. See
the documentation for the #UDisksClient::changed property for more
information.</doc>
        <source-position filename="udisksclient.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1588">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="settle" c:identifier="udisks_client_settle">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="614">Blocks until all pending D-Bus messages have been delivered. Also
emits the (rate-limited) #UDisksClient::changed signal if changes
are currently pending.

This is useful in two situations: 1. when using synchronous method
calls since e.g. D-Bus signals received while waiting for the reply
are queued up and dispatched after the synchronous call ends; and
2. when using asynchronous calls where the return value references
a newly created object (such as the &lt;link
linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;Manager.LoopSetup()&lt;/link&gt; method).</doc>
        <source-position filename="udisksclient.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="616">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bus-connection"
                version="2.9.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="270">The #GDBusConnection used to create the #UDisksClient:object-manager, or
%NULL if one wasn't specified during construction of the #UDisksClient (in
which case a system bus connection is used).</doc>
        <type name="Gio.DBusConnection"/>
      </property>
      <property name="manager" transfer-ownership="none" getter="get_manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="255">The #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object</doc>
        <type name="Manager"/>
      </property>
      <property name="object-manager"
                transfer-ownership="none"
                getter="get_object_manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="241">The #GDBusObjectManager used by the #UDisksClient instance.</doc>
        <type name="Gio.DBusObjectManager"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="289">This signal is emitted either when an object or interface is
added or removed a when property has changed. Additionally,
multiple received signals are coalesced into a single signal that
is rate-limited to fire at most every 100ms.

Note that calling udisks_client_settle() will cause this signal
to fire if any changes are outstanding.

For greater detail, connect to the
#GDBusObjectManager::object-added,
#GDBusObjectManager::object-removed,
#GDBusObjectManager::interface-added,
#GDBusObjectManager::interface-removed,
#GDBusObjectManagerClient::interface-proxy-properties-changed and
signals on the #UDisksClient:object-manager object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <function-macro name="DRIVE"
                    c:identifier="UDISKS_DRIVE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="507"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA"
                    c:identifier="UDISKS_DRIVE_ATA"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="890"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_ATA_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="892"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1307"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1308"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1309"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1377"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1378"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1379"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="509"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY"
                    c:identifier="UDISKS_DRIVE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="785"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="786"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="787"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON"
                    c:identifier="UDISKS_DRIVE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="855"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="856"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="857"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Drive"
               c:symbol-prefix="drive"
               c:type="UDisksDrive"
               glib:type-name="UDisksDrive"
               glib:get-type="udisks_drive_get_type"
               glib:type-struct="DriveIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4347">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="594"/>
      <function name="interface_info"
                c:identifier="udisks_drive_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4287">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="602"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4292">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4300">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="603"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4308">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4302">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4303">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_power_off"
                      invoker="get_can_power_off"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5870">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="590"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5878">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5872">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5057">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="531"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5067">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5059">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_connection_bus"
                      invoker="get_connection_bus"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5645">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="533"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5655">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5647">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ejectable"
                      invoker="get_ejectable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5784">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="535"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5792">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5786">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5004">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="537"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5014">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5006">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media" invoker="get_media" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5110">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="539"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5120">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5112">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_available"
                      invoker="get_media_available"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5249">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="541"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5257">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5251">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_change_detected"
                      invoker="get_media_change_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5282">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5290">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5284">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_compatibility"
                      invoker="get_media_compatibility"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5163">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="545"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5173">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5165">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_removable"
                      invoker="get_media_removable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5216">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="547"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5224">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5218">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_model" invoker="get_model" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4792">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="549"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4802">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4794">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical"
                      invoker="get_optical"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="551"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5422">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5416">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_blank"
                      invoker="get_optical_blank"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5447">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="553"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5455">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5449">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_audio_tracks"
                      invoker="get_optical_num_audio_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5513">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="555"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5521">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5515">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_data_tracks"
                      invoker="get_optical_num_data_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5546">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="557"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5554">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5548">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_sessions"
                      invoker="get_optical_num_sessions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5579">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="559"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5587">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5581">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_tracks"
                      invoker="get_optical_num_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5480">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="561"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5488">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5482">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_removable"
                      invoker="get_removable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5751">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="563"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5759">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5753">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_revision"
                      invoker="get_revision"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4845">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="565"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4855">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4847">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rotation_rate"
                      invoker="get_rotation_rate"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5612">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="567"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5620">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5614">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_seat" invoker="get_seat" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5698">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="569"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5700">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial"
                      invoker="get_serial"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4898">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="571"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4908">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4900">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sibling_id"
                      invoker="get_sibling_id"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5907">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="592"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5917">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5909">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5315">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="573"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5323">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5317">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sort_key"
                      invoker="get_sort_key"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5817">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="575"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5827">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5819">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_detected"
                      invoker="get_time_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5348">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="577"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5356">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5350">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_media_detected"
                      invoker="get_time_media_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5381">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5389">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5383">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vendor"
                      invoker="get_vendor"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4739">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="581"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4749">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4741">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_wwn" invoker="get_wwn" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4951">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="583"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4961">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4953">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_eject">
        <source-position filename="udisks-generated.h" line="520"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_power_off">
        <source-position filename="udisks-generated.h" line="585"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_configuration">
        <source-position filename="udisks-generated.h" line="525"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_eject" c:identifier="udisks_drive_call_eject">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5966">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_eject_finish() to get the result of the operation.

See udisks_drive_call_eject_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="622"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5968">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5969">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5970">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5971">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5972">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_finish"
              c:identifier="udisks_drive_call_eject_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5999">Finishes an operation started with udisks_drive_call_eject().</doc>
        <source-position filename="udisks-generated.h" line="629"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6007">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6001">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6002">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_eject().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_sync"
              c:identifier="udisks_drive_call_eject_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6026">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_eject() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="634"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6037">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6028">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6029">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6030">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off"
              c:identifier="udisks_drive_call_power_off"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6168">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_power_off_finish() to get the result of the operation.

See udisks_drive_call_power_off_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="660"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6170">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6171">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6172">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6173">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6174">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_finish"
              c:identifier="udisks_drive_call_power_off_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6203">Finishes an operation started with udisks_drive_call_power_off().</doc>
        <source-position filename="udisks-generated.h" line="667"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6211">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6205">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6206">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_power_off().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_sync"
              c:identifier="udisks_drive_call_power_off_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6232">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_power_off() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="672"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6243">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6234">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6235">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6236">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration"
              c:identifier="udisks_drive_call_set_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6064">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_set_configuration_finish() to get the result of the operation.

See udisks_drive_call_set_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="640"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6066">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6067">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6068">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6069">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6070">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6071">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_finish"
              c:identifier="udisks_drive_call_set_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6100">Finishes an operation started with udisks_drive_call_set_configuration().</doc>
        <source-position filename="udisks-generated.h" line="648"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6108">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6102">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6103">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_set_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_sync"
              c:identifier="udisks_drive_call_set_configuration_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6127">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_set_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="653"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6139">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6129">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6130">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6131">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6132">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_eject" c:identifier="udisks_drive_complete_eject">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6272">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="607"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6274">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6275">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_power_off"
              c:identifier="udisks_drive_complete_power_off"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6308">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="615"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6310">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6311">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_configuration"
              c:identifier="udisks_drive_complete_set_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6290">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="611"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6292">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6293">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_drive_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5077">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="706"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5085">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5079">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_connection_bus"
              c:identifier="udisks_drive_dup_connection_bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5665">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="757"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5673">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5667">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_drive_dup_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5024">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="702"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5032">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5026">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media"
              c:identifier="udisks_drive_dup_media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5130">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="710"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5138">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5132">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media_compatibility"
              c:identifier="udisks_drive_dup_media_compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5183">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="714"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5191">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5185">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model"
              c:identifier="udisks_drive_dup_model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4812">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="686"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4820">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4814">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_revision"
              c:identifier="udisks_drive_dup_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4865">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="690"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4873">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4867">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_seat"
              c:identifier="udisks_drive_dup_seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5718">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="761"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5726">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5720">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_serial"
              c:identifier="udisks_drive_dup_serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4918">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="694"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4926">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4920">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sibling_id"
              c:identifier="udisks_drive_dup_sibling_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5929">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="778"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5937">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5931">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sort_key"
              c:identifier="udisks_drive_dup_sort_key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5837">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="771"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5845">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5839">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vendor"
              c:identifier="udisks_drive_dup_vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4759">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="682"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4767">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4761">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_wwn"
              c:identifier="udisks_drive_dup_wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4971">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="698"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4979">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4973">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_power_off"
              c:identifier="udisks_drive_get_can_power_off"
              glib:get-property="can-power-off"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5870">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="774"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5878">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5872">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_drive_get_configuration"
              glib:get-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5057">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="705"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5067">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5059">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_bus"
              c:identifier="udisks_drive_get_connection_bus"
              glib:get-property="connection-bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5645">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="756"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5655">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5647">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ejectable"
              c:identifier="udisks_drive_get_ejectable"
              glib:get-property="ejectable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5784">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="767"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5792">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5786">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_drive_get_id"
              glib:get-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5004">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="701"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5014">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5006">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="udisks_drive_get_media"
              glib:get-property="media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5110">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="709"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5120">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5112">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_available"
              c:identifier="udisks_drive_get_media_available"
              glib:get-property="media-available"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5249">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="720"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5257">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5251">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_change_detected"
              c:identifier="udisks_drive_get_media_change_detected"
              glib:get-property="media-change-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5282">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="723"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5290">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5284">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_compatibility"
              c:identifier="udisks_drive_get_media_compatibility"
              glib:get-property="media-compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5163">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="713"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5173">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5165">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_removable"
              c:identifier="udisks_drive_get_media_removable"
              glib:get-property="media-removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5216">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="717"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5224">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5218">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="udisks_drive_get_model"
              glib:get-property="model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4792">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="685"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4802">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4794">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical"
              c:identifier="udisks_drive_get_optical"
              glib:get-property="optical"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="735"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5422">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5416">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_blank"
              c:identifier="udisks_drive_get_optical_blank"
              glib:get-property="optical-blank"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5447">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="738"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5455">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5449">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_audio_tracks"
              c:identifier="udisks_drive_get_optical_num_audio_tracks"
              glib:get-property="optical-num-audio-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5513">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="744"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5521">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5515">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_data_tracks"
              c:identifier="udisks_drive_get_optical_num_data_tracks"
              glib:get-property="optical-num-data-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5546">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="747"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5554">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5548">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_sessions"
              c:identifier="udisks_drive_get_optical_num_sessions"
              glib:get-property="optical-num-sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5579">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="750"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5587">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5581">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_tracks"
              c:identifier="udisks_drive_get_optical_num_tracks"
              glib:get-property="optical-num-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5480">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="741"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5488">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5482">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_removable"
              c:identifier="udisks_drive_get_removable"
              glib:get-property="removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5751">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="764"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5759">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5753">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="udisks_drive_get_revision"
              glib:get-property="revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4845">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="689"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4855">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4847">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation_rate"
              c:identifier="udisks_drive_get_rotation_rate"
              glib:get-property="rotation-rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5612">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="753"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5620">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5614">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat"
              c:identifier="udisks_drive_get_seat"
              glib:get-property="seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5698">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="760"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5700">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="udisks_drive_get_serial"
              glib:get-property="serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4898">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="693"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4908">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4900">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sibling_id"
              c:identifier="udisks_drive_get_sibling_id"
              glib:get-property="sibling-id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5907">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="777"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5917">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5909">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_drive_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5315">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="726"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5323">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5317">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_drive_get_sort_key"
              glib:get-property="sort-key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5817">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="770"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5827">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5819">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_detected"
              c:identifier="udisks_drive_get_time_detected"
              glib:get-property="time-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5348">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="729"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5356">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5350">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_media_detected"
              c:identifier="udisks_drive_get_time_media_detected"
              glib:get-property="time-media-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5381">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="732"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5389">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5383">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="udisks_drive_get_vendor"
              glib:get-property="vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4739">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="681"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4749">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4741">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwn"
              c:identifier="udisks_drive_get_wwn"
              glib:get-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4951">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="697"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4961">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4953">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_power_off"
              c:identifier="udisks_drive_set_can_power_off"
              glib:set-property="can-power-off"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5890">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="775"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5892">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5893">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_drive_set_configuration"
              glib:set-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5095">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="707"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5097">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5098">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connection_bus"
              c:identifier="udisks_drive_set_connection_bus"
              glib:set-property="connection-bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5683">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="758"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5685">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5686">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ejectable"
              c:identifier="udisks_drive_set_ejectable"
              glib:set-property="ejectable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5802">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="768"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5804">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5805">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_drive_set_id"
              glib:set-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5042">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="703"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5044">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5045">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media"
              c:identifier="udisks_drive_set_media"
              glib:set-property="media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5148">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="711"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5150">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5151">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_available"
              c:identifier="udisks_drive_set_media_available"
              glib:set-property="media-available"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5267">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="721"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5269">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5270">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_change_detected"
              c:identifier="udisks_drive_set_media_change_detected"
              glib:set-property="media-change-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5300">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="724"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5302">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5303">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_compatibility"
              c:identifier="udisks_drive_set_media_compatibility"
              glib:set-property="media-compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5201">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="715"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5203">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5204">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_removable"
              c:identifier="udisks_drive_set_media_removable"
              glib:set-property="media-removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5234">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="718"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5236">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5237">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="udisks_drive_set_model"
              glib:set-property="model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4830">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="687"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4832">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4833">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical"
              c:identifier="udisks_drive_set_optical"
              glib:set-property="optical"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5432">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="736"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5434">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5435">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_blank"
              c:identifier="udisks_drive_set_optical_blank"
              glib:set-property="optical-blank"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5465">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="739"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5467">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5468">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_audio_tracks"
              c:identifier="udisks_drive_set_optical_num_audio_tracks"
              glib:set-property="optical-num-audio-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5531">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="745"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5533">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5534">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_data_tracks"
              c:identifier="udisks_drive_set_optical_num_data_tracks"
              glib:set-property="optical-num-data-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5564">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="748"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5566">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5567">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_sessions"
              c:identifier="udisks_drive_set_optical_num_sessions"
              glib:set-property="optical-num-sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5597">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="751"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5599">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5600">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_tracks"
              c:identifier="udisks_drive_set_optical_num_tracks"
              glib:set-property="optical-num-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5498">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="742"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5500">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5501">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_removable"
              c:identifier="udisks_drive_set_removable"
              glib:set-property="removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5769">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="765"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5771">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5772">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revision"
              c:identifier="udisks_drive_set_revision"
              glib:set-property="revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4883">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="691"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4885">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4886">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rotation_rate"
              c:identifier="udisks_drive_set_rotation_rate"
              glib:set-property="rotation-rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5630">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="754"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5632">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5633">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_seat"
              c:identifier="udisks_drive_set_seat"
              glib:set-property="seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5736">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="762"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5738">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5739">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial"
              c:identifier="udisks_drive_set_serial"
              glib:set-property="serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4936">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="695"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4938">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4939">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sibling_id"
              c:identifier="udisks_drive_set_sibling_id"
              glib:set-property="sibling-id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5949">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="779"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5951">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5952">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_drive_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5333">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="727"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5335">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5336">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_key"
              c:identifier="udisks_drive_set_sort_key"
              glib:set-property="sort-key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5855">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="772"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5857">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5858">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_detected"
              c:identifier="udisks_drive_set_time_detected"
              glib:set-property="time-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5366">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="730"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5368">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5369">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_media_detected"
              c:identifier="udisks_drive_set_time_media_detected"
              glib:set-property="time-media-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5399">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="733"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5401">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5402">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vendor"
              c:identifier="udisks_drive_set_vendor"
              glib:set-property="vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4777">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="683"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4779">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4780">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wwn"
              c:identifier="udisks_drive_set_wwn"
              glib:set-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4989">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="699"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4991">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4992">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-power-off"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_power_off"
                getter="get_can_power_off"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4715">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_configuration"
                getter="get_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4526">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="connection-bus"
                writable="1"
                transfer-ownership="none"
                setter="set_connection_bus"
                getter="get_connection_bus"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4670">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ejectable"
                writable="1"
                transfer-ownership="none"
                setter="set_ejectable"
                getter="get_ejectable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4697">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4517">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media"
                writable="1"
                transfer-ownership="none"
                setter="set_media"
                getter="get_media"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4535">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-available"
                writable="1"
                transfer-ownership="none"
                setter="set_media_available"
                getter="get_media_available"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4562">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-change-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_media_change_detected"
                getter="get_media_change_detected"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4571">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-compatibility"
                writable="1"
                transfer-ownership="none"
                setter="set_media_compatibility"
                getter="get_media_compatibility">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4544">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="media-removable"
                writable="1"
                transfer-ownership="none"
                setter="set_media_removable"
                getter="get_media_removable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4553">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4481">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="optical"
                writable="1"
                transfer-ownership="none"
                setter="set_optical"
                getter="get_optical"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4607">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-blank"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_blank"
                getter="get_optical_blank"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4616">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-num-audio-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_audio_tracks"
                getter="get_optical_num_audio_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4634">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-data-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_data_tracks"
                getter="get_optical_num_data_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4643">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-sessions"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_sessions"
                getter="get_optical_num_sessions"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4652">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_tracks"
                getter="get_optical_num_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4625">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="removable"
                writable="1"
                transfer-ownership="none"
                setter="set_removable"
                getter="get_removable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4688">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="revision"
                writable="1"
                transfer-ownership="none"
                setter="set_revision"
                getter="get_revision"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4490">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rotation-rate"
                writable="1"
                transfer-ownership="none"
                setter="set_rotation_rate"
                getter="get_rotation_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4661">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="seat"
                writable="1"
                transfer-ownership="none"
                setter="set_seat"
                getter="get_seat"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4679">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial"
                writable="1"
                transfer-ownership="none"
                setter="set_serial"
                getter="get_serial"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4499">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sibling-id"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sibling_id"
                getter="get_sibling_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4726">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4580">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sort-key"
                writable="1"
                transfer-ownership="none"
                setter="set_sort_key"
                getter="get_sort_key"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4706">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="time-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_time_detected"
                getter="get_time_detected"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4589">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="time-media-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_time_media_detected"
                getter="get_time_media_detected"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4598">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vendor"
                writable="1"
                transfer-ownership="none"
                setter="set_vendor"
                getter="get_vendor"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4472">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wwn"
                writable="1"
                transfer-ownership="none"
                setter="set_wwn"
                getter="get_wwn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4508">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-eject" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4399">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_eject() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4409">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4402">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4403">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-power-off" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4446">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_power_off() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4456">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4449">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4450">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-configuration" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4422">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_set_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4433">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4425">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4426">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4427">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="DriveAta"
               c:symbol-prefix="drive_ata"
               c:type="UDisksDriveAta"
               glib:type-name="UDisksDriveAta"
               glib:get-type="udisks_drive_ata_get_type"
               glib:type-struct="DriveAtaIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="8829">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1000"/>
      <function name="interface_info"
                c:identifier="udisks_drive_ata_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8773">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="1008"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8778">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_ata_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8786">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="1009"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8794">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8788">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8789">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_aam_enabled"
                      invoker="get_aam_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9878">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="944"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9886">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9880">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_supported"
                      invoker="get_aam_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9845">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="946"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9853">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9847">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_vendor_recommended_value"
                      invoker="get_aam_vendor_recommended_value"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9911">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="948"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9919">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9913">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_enabled"
                      invoker="get_apm_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9812">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="950"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9820">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9814">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_supported"
                      invoker="get_apm_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9779">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="952"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9787">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9781">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_enabled"
                      invoker="get_pm_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9746">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="954"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9754">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9748">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_supported"
                      invoker="get_pm_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9713">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="956"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9721">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9715">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_enabled"
                      invoker="get_read_lookahead_enabled"
                      version="2.1.7"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10055">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="996"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10063">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10057">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_supported"
                      invoker="get_read_lookahead_supported"
                      version="2.1.7"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10018">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="998"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10026">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10020">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_enhanced_erase_unit_minutes"
                      invoker="get_security_enhanced_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10125">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="958"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10133">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10127">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_erase_unit_minutes"
                      invoker="get_security_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10092">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="960"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10100">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10094">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_frozen"
                      invoker="get_security_frozen"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10158">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="962"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10166">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10160">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_enabled"
                      invoker="get_smart_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9363">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="964"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9371">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9365">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_failing"
                      invoker="get_smart_failing"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9429">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="966"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9437">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9431">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failed_in_the_past"
                      invoker="get_smart_num_attributes_failed_in_the_past"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9561">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="968"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9569">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9563">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failing"
                      invoker="get_smart_num_attributes_failing"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9528">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="970"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9536">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9530">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_bad_sectors"
                      invoker="get_smart_num_bad_sectors"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9594">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="972"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9602">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9596">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_power_on_seconds"
                      invoker="get_smart_power_on_seconds"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9462">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="974"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9470">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9464">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_percent_remaining"
                      invoker="get_smart_selftest_percent_remaining"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9680">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="976"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9688">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9682">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_status"
                      invoker="get_smart_selftest_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9627">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="978"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9637">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9629">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_supported"
                      invoker="get_smart_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9330">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="980"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9338">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9332">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_temperature"
                      invoker="get_smart_temperature"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9495">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="982"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9503">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9497">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_updated"
                      invoker="get_smart_updated"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9396">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="984"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9404">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9398">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_enabled"
                      invoker="get_write_cache_enabled"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9981">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="992"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9989">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9983">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_supported"
                      invoker="get_write_cache_supported"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9944">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="994"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9952">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9946">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_get_state">
        <source-position filename="udisks-generated.h" line="903"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_standby">
        <source-position filename="udisks-generated.h" line="908"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_wakeup">
        <source-position filename="udisks-generated.h" line="913"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_security_erase_unit">
        <source-position filename="udisks-generated.h" line="918"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_get_attributes">
        <source-position filename="udisks-generated.h" line="923"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_abort">
        <source-position filename="udisks-generated.h" line="928"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_start">
        <source-position filename="udisks-generated.h" line="933"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_set_enabled">
        <source-position filename="udisks-generated.h" line="986"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_update">
        <source-position filename="udisks-generated.h" line="939"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_pm_get_state"
              c:identifier="udisks_drive_ata_call_pm_get_state">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10705">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_get_state_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_get_state_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10707">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10708">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10709">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10710">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10711">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_finish"
              c:identifier="udisks_drive_ata_call_pm_get_state_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10738">Finishes an operation started with udisks_drive_ata_call_pm_get_state().</doc>
        <source-position filename="udisks-generated.h" line="1157"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10747">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10740">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10741">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10742">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_get_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_sync"
              c:identifier="udisks_drive_ata_call_pm_get_state_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10768">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_get_state() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1163"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10780">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10770">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10771">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10772">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10773">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby"
              c:identifier="udisks_drive_ata_call_pm_standby">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10809">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_standby_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_standby_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10811">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10812">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10813">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10814">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10815">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_finish"
              c:identifier="udisks_drive_ata_call_pm_standby_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10842">Finishes an operation started with udisks_drive_ata_call_pm_standby().</doc>
        <source-position filename="udisks-generated.h" line="1177"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10850">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10844">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10845">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_standby().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_sync"
              c:identifier="udisks_drive_ata_call_pm_standby_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10869">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_standby() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1182"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10880">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10871">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10872">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10873">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup"
              c:identifier="udisks_drive_ata_call_pm_wakeup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10907">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_wakeup_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_wakeup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10909">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10910">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10911">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10912">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10913">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_finish"
              c:identifier="udisks_drive_ata_call_pm_wakeup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10940">Finishes an operation started with udisks_drive_ata_call_pm_wakeup().</doc>
        <source-position filename="udisks-generated.h" line="1195"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10948">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10942">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10943">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_wakeup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_sync"
              c:identifier="udisks_drive_ata_call_pm_wakeup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10967">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_wakeup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1200"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10978">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10969">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10970">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10971">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit"
              c:identifier="udisks_drive_ata_call_security_erase_unit">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11005">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_security_erase_unit_finish() to get the result of the operation.

See udisks_drive_ata_call_security_erase_unit_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11007">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11008">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11009">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11010">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11011">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_finish"
              c:identifier="udisks_drive_ata_call_security_erase_unit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11038">Finishes an operation started with udisks_drive_ata_call_security_erase_unit().</doc>
        <source-position filename="udisks-generated.h" line="1213"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="11046">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11040">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11041">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_security_erase_unit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_sync"
              c:identifier="udisks_drive_ata_call_security_erase_unit_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11065">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_security_erase_unit() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1218"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="11076">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11067">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11068">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11069">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes"
              c:identifier="udisks_drive_ata_call_smart_get_attributes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10289">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_get_attributes_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_get_attributes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1072"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10291">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10292">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10293">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10294">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10295">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_finish"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10322">Finishes an operation started with udisks_drive_ata_call_smart_get_attributes().</doc>
        <source-position filename="udisks-generated.h" line="1079"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10331">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10324">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10325">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10326">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_get_attributes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_sync"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10352">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_get_attributes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1085"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10364">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10354">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10355">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10356">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10357">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10497">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_selftest_abort_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_abort_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10499">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10500">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10502">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10503">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10530">Finishes an operation started with udisks_drive_ata_call_smart_selftest_abort().</doc>
        <source-position filename="udisks-generated.h" line="1119"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10538">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10532">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10533">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_abort().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10557">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_abort() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1124"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10568">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10559">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10560">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10561">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start"
              c:identifier="udisks_drive_ata_call_smart_selftest_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10393">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_selftest_start_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1092"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10395">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10396">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10397">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10398">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10399">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10400">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10429">Finishes an operation started with udisks_drive_ata_call_smart_selftest_start().</doc>
        <source-position filename="udisks-generated.h" line="1100"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10437">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10431">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10432">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10456">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1105"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10468">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10458">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10459">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10460">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10461">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled"
              c:identifier="udisks_drive_ata_call_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10595">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_set_enabled_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_set_enabled_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10597">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10598">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10599">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10600">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10601">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10602">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_finish"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10633">Finishes an operation started with udisks_drive_ata_call_smart_set_enabled().</doc>
        <source-position filename="udisks-generated.h" line="1138"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10641">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10635">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10636">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_set_enabled().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_sync"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10662">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_set_enabled() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1143"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10674">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10664">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10665">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10666">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10667">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update"
              c:identifier="udisks_drive_ata_call_smart_update">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10191">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_update_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_update_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1054"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10193">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10194">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10195">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10196">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10197">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_finish"
              c:identifier="udisks_drive_ata_call_smart_update_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10224">Finishes an operation started with udisks_drive_ata_call_smart_update().</doc>
        <source-position filename="udisks-generated.h" line="1061"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10232">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10226">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10227">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_update().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_sync"
              c:identifier="udisks_drive_ata_call_smart_update_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10251">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_update() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1066"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10262">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10253">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10254">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10255">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_get_state"
              c:identifier="udisks_drive_ata_complete_pm_get_state">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11198">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1034"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11200">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11201">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11202">Parameter to return.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_standby"
              c:identifier="udisks_drive_ata_complete_pm_standby">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11219">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1039"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11221">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11222">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_wakeup"
              c:identifier="udisks_drive_ata_complete_pm_wakeup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11237">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1043"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11239">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11240">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_security_erase_unit"
              c:identifier="udisks_drive_ata_complete_security_erase_unit">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11255">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1047"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11257">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11258">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_get_attributes"
              c:identifier="udisks_drive_ata_complete_smart_get_attributes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11121">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1017"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11123">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11124">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11125">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_abort"
              c:identifier="udisks_drive_ata_complete_smart_selftest_abort">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11160">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1026"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11162">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11163">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_start"
              c:identifier="udisks_drive_ata_complete_smart_selftest_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11142">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1022"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11144">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11145">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_set_enabled"
              c:identifier="udisks_drive_ata_complete_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11178">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1030"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11180">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11181">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_update"
              c:identifier="udisks_drive_ata_complete_smart_update">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11103">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1013"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11105">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11106">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_smart_selftest_status"
              c:identifier="udisks_drive_ata_dup_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9647">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1255"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9655">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9649">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_enabled"
              c:identifier="udisks_drive_ata_get_aam_enabled"
              glib:get-property="aam-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9878">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1276"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9886">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9880">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_supported"
              c:identifier="udisks_drive_ata_get_aam_supported"
              glib:get-property="aam-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9845">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9853">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9847">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_get_aam_vendor_recommended_value"
              glib:get-property="aam-vendor-recommended-value"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9911">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1279"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9919">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9913">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_enabled"
              c:identifier="udisks_drive_ata_get_apm_enabled"
              glib:get-property="apm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9812">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1270"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9820">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9814">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_supported"
              c:identifier="udisks_drive_ata_get_apm_supported"
              glib:get-property="apm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9779">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1267"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9787">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9781">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_enabled"
              c:identifier="udisks_drive_ata_get_pm_enabled"
              glib:get-property="pm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9746">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1264"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9754">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9748">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_supported"
              c:identifier="udisks_drive_ata_get_pm_supported"
              glib:get-property="pm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9713">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9721">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9715">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_get_read_lookahead_enabled"
              glib:get-property="read-lookahead-enabled"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10055">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1291"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10063">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10057">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_supported"
              c:identifier="udisks_drive_ata_get_read_lookahead_supported"
              glib:get-property="read-lookahead-supported"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10018">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1288"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10026">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10020">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_enhanced_erase_unit_minutes"
              glib:get-property="security-enhanced-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10125">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10133">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10127">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_erase_unit_minutes"
              glib:get-property="security-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10092">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10100">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10094">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_frozen"
              c:identifier="udisks_drive_ata_get_security_frozen"
              glib:get-property="security-frozen"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10158">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1300"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10166">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10160">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_enabled"
              c:identifier="udisks_drive_ata_get_smart_enabled"
              glib:get-property="smart-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9363">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9371">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9365">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_failing"
              c:identifier="udisks_drive_ata_get_smart_failing"
              glib:get-property="smart-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9429">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9437">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9431">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failed_in_the_past"
              glib:get-property="smart-num-attributes-failed-in-the-past"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9561">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9569">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9563">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failing"
              glib:get-property="smart-num-attributes-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9528">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9536">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9530">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_get_smart_num_bad_sectors"
              glib:get-property="smart-num-bad-sectors"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9594">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9602">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9596">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_get_smart_power_on_seconds"
              glib:get-property="smart-power-on-seconds"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9462">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9470">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9464">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_get_smart_selftest_percent_remaining"
              glib:get-property="smart-selftest-percent-remaining"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9680">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9688">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9682">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_status"
              c:identifier="udisks_drive_ata_get_smart_selftest_status"
              glib:get-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9627">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1254"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9637">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9629">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_supported"
              c:identifier="udisks_drive_ata_get_smart_supported"
              glib:get-property="smart-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9330">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9338">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9332">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_temperature"
              c:identifier="udisks_drive_ata_get_smart_temperature"
              glib:get-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9495">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9503">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9497">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_updated"
              c:identifier="udisks_drive_ata_get_smart_updated"
              glib:get-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9396">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9404">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9398">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_enabled"
              c:identifier="udisks_drive_ata_get_write_cache_enabled"
              glib:get-property="write-cache-enabled"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9981">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9989">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9983">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_supported"
              c:identifier="udisks_drive_ata_get_write_cache_supported"
              glib:get-property="write-cache-supported"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9944">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1282"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9952">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9946">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_aam_enabled"
              c:identifier="udisks_drive_ata_set_aam_enabled"
              glib:set-property="aam-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9896">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1277"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9898">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9899">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_supported"
              c:identifier="udisks_drive_ata_set_aam_supported"
              glib:set-property="aam-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9863">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9865">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9866">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_set_aam_vendor_recommended_value"
              glib:set-property="aam-vendor-recommended-value"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9929">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1280"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9931">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9932">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_enabled"
              c:identifier="udisks_drive_ata_set_apm_enabled"
              glib:set-property="apm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9830">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9832">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9833">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_supported"
              c:identifier="udisks_drive_ata_set_apm_supported"
              glib:set-property="apm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9797">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9799">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9800">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_enabled"
              c:identifier="udisks_drive_ata_set_pm_enabled"
              glib:set-property="pm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9764">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9766">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9767">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_supported"
              c:identifier="udisks_drive_ata_set_pm_supported"
              glib:set-property="pm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9731">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9733">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9734">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_set_read_lookahead_enabled"
              glib:set-property="read-lookahead-enabled"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10075">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1292"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10077">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10078">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_supported"
              c:identifier="udisks_drive_ata_set_read_lookahead_supported"
              glib:set-property="read-lookahead-supported"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10038">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1289"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10040">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10041">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_enhanced_erase_unit_minutes"
              glib:set-property="security-enhanced-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10143">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10145">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10146">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_erase_unit_minutes"
              glib:set-property="security-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10110">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10112">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10113">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_frozen"
              c:identifier="udisks_drive_ata_set_security_frozen"
              glib:set-property="security-frozen"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10176">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10178">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10179">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_enabled"
              c:identifier="udisks_drive_ata_set_smart_enabled"
              glib:set-property="smart-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9381">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1231"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9383">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9384">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_failing"
              c:identifier="udisks_drive_ata_set_smart_failing"
              glib:set-property="smart-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9447">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9449">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9450">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failed_in_the_past"
              glib:set-property="smart-num-attributes-failed-in-the-past"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9579">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9581">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9582">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failing"
              glib:set-property="smart-num-attributes-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9546">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9548">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9549">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_set_smart_num_bad_sectors"
              glib:set-property="smart-num-bad-sectors"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9612">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9614">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9615">The value to set.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_set_smart_power_on_seconds"
              glib:set-property="smart-power-on-seconds"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9480">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9482">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9483">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_set_smart_selftest_percent_remaining"
              glib:set-property="smart-selftest-percent-remaining"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9698">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9700">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9701">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_status"
              c:identifier="udisks_drive_ata_set_smart_selftest_status"
              glib:set-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9665">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9667">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9668">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_supported"
              c:identifier="udisks_drive_ata_set_smart_supported"
              glib:set-property="smart-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9348">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9350">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9351">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_temperature"
              c:identifier="udisks_drive_ata_set_smart_temperature"
              glib:set-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9513">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9515">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9516">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_updated"
              c:identifier="udisks_drive_ata_set_smart_updated"
              glib:set-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9414">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9416">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9417">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_enabled"
              c:identifier="udisks_drive_ata_set_write_cache_enabled"
              glib:set-property="write-cache-enabled"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10001">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10003">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10004">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_supported"
              c:identifier="udisks_drive_ata_set_write_cache_supported"
              glib:set-property="write-cache-supported"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9964">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9966">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9967">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="aam-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_enabled"
                getter="get_aam_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9239">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_supported"
                getter="get_aam_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9230">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-vendor-recommended-value"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_vendor_recommended_value"
                getter="get_aam_vendor_recommended_value"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9248">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="apm-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_apm_enabled"
                getter="get_apm_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9221">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="apm-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_apm_supported"
                getter="get_apm_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9212">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_pm_enabled"
                getter="get_pm_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9203">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_pm_supported"
                getter="get_pm_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9194">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-enabled"
                version="2.1.7"
                writable="1"
                transfer-ownership="none"
                setter="set_read_lookahead_enabled"
                getter="get_read_lookahead_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9290">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-supported"
                version="2.1.7"
                writable="1"
                transfer-ownership="none"
                setter="set_read_lookahead_supported"
                getter="get_read_lookahead_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9279">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="security-enhanced-erase-unit-minutes"
                writable="1"
                transfer-ownership="none"
                setter="set_security_enhanced_erase_unit_minutes"
                getter="get_security_enhanced_erase_unit_minutes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9310">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-erase-unit-minutes"
                writable="1"
                transfer-ownership="none"
                setter="set_security_erase_unit_minutes"
                getter="get_security_erase_unit_minutes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9301">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-frozen"
                writable="1"
                transfer-ownership="none"
                setter="set_security_frozen"
                getter="get_security_frozen"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9319">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_enabled"
                getter="get_smart_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9104">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-failing"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_failing"
                getter="get_smart_failing"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9122">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-num-attributes-failed-in-the-past"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_attributes_failed_in_the_past"
                getter="get_smart_num_attributes_failed_in_the_past"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9158">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-attributes-failing"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_attributes_failing"
                getter="get_smart_num_attributes_failing"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9149">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-bad-sectors"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_bad_sectors"
                getter="get_smart_num_bad_sectors"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9167">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="smart-power-on-seconds"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_power_on_seconds"
                getter="get_smart_power_on_seconds"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9131">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="smart-selftest-percent-remaining"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_percent_remaining"
                getter="get_smart_selftest_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9185">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-selftest-status"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_status"
                getter="get_smart_selftest_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9176">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_supported"
                getter="get_smart_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9095">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-temperature"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_temperature"
                getter="get_smart_temperature"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9140">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="smart-updated"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_updated"
                getter="get_smart_updated"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9113">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="write-cache-enabled"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_write_cache_enabled"
                getter="get_write_cache_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9268">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="write-cache-supported"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_write_cache_supported"
                getter="get_write_cache_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9257">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-pm-get-state" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9002">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_get_state() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9012">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9005">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9006">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-standby" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9025">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_standby() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9035">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9028">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9029">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-wakeup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9048">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_wakeup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9058">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9051">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9052">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-security-erase-unit" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9071">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_security_erase_unit() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9081">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9074">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9075">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-get-attributes" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8906">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_get_attributes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8916">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8909">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8910">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-abort" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8953">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_abort() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8963">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8956">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8957">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-start" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8929">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8940">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8932">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8933">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8934">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-set-enabled" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8976">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_set_enabled() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8987">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8979">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8980">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8981">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-update" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8883">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_update() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8893">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8886">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8887">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DriveAtaIface"
            c:type="UDisksDriveAtaIface"
            glib:is-gtype-struct-for="DriveAta">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="8835">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1000"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8837">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_pm_get_state">
        <callback name="handle_pm_get_state">
          <source-position filename="udisks-generated.h" line="903"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_standby">
        <callback name="handle_pm_standby">
          <source-position filename="udisks-generated.h" line="908"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_wakeup">
        <callback name="handle_pm_wakeup">
          <source-position filename="udisks-generated.h" line="913"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_security_erase_unit">
        <callback name="handle_security_erase_unit">
          <source-position filename="udisks-generated.h" line="918"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_get_attributes">
        <callback name="handle_smart_get_attributes">
          <source-position filename="udisks-generated.h" line="923"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_abort">
        <callback name="handle_smart_selftest_abort">
          <source-position filename="udisks-generated.h" line="928"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_start">
        <callback name="handle_smart_selftest_start">
          <source-position filename="udisks-generated.h" line="933"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_update">
        <callback name="handle_smart_update">
          <source-position filename="udisks-generated.h" line="939"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_enabled">
        <callback name="get_aam_enabled">
          <source-position filename="udisks-generated.h" line="944"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9886">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9880">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_supported">
        <callback name="get_aam_supported">
          <source-position filename="udisks-generated.h" line="946"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9853">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9847">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_vendor_recommended_value">
        <callback name="get_aam_vendor_recommended_value">
          <source-position filename="udisks-generated.h" line="948"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9919">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9913">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_enabled">
        <callback name="get_apm_enabled">
          <source-position filename="udisks-generated.h" line="950"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9820">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9814">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_supported">
        <callback name="get_apm_supported">
          <source-position filename="udisks-generated.h" line="952"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9787">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9781">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_enabled">
        <callback name="get_pm_enabled">
          <source-position filename="udisks-generated.h" line="954"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9754">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9748">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_supported">
        <callback name="get_pm_supported">
          <source-position filename="udisks-generated.h" line="956"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9721">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9715">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_enhanced_erase_unit_minutes">
        <callback name="get_security_enhanced_erase_unit_minutes">
          <source-position filename="udisks-generated.h" line="958"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10133">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="10127">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_erase_unit_minutes">
        <callback name="get_security_erase_unit_minutes">
          <source-position filename="udisks-generated.h" line="960"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10100">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="10094">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_frozen">
        <callback name="get_security_frozen">
          <source-position filename="udisks-generated.h" line="962"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10166">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="10160">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_enabled">
        <callback name="get_smart_enabled">
          <source-position filename="udisks-generated.h" line="964"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9371">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9365">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_failing">
        <callback name="get_smart_failing">
          <source-position filename="udisks-generated.h" line="966"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9437">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9431">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failed_in_the_past">
        <callback name="get_smart_num_attributes_failed_in_the_past">
          <source-position filename="udisks-generated.h" line="968"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9569">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9563">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failing">
        <callback name="get_smart_num_attributes_failing">
          <source-position filename="udisks-generated.h" line="970"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9536">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9530">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_bad_sectors">
        <callback name="get_smart_num_bad_sectors">
          <source-position filename="udisks-generated.h" line="972"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9602">The property value.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9596">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_power_on_seconds">
        <callback name="get_smart_power_on_seconds">
          <source-position filename="udisks-generated.h" line="974"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9470">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9464">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_percent_remaining">
        <callback name="get_smart_selftest_percent_remaining">
          <source-position filename="udisks-generated.h" line="976"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9688">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9682">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_status">
        <callback name="get_smart_selftest_status">
          <source-position filename="udisks-generated.h" line="978"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9637">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9629">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_supported">
        <callback name="get_smart_supported">
          <source-position filename="udisks-generated.h" line="980"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9338">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9332">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_temperature">
        <callback name="get_smart_temperature">
          <source-position filename="udisks-generated.h" line="982"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9503">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9497">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_updated">
        <callback name="get_smart_updated">
          <source-position filename="udisks-generated.h" line="984"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9404">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9398">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_set_enabled">
        <callback name="handle_smart_set_enabled">
          <source-position filename="udisks-generated.h" line="986"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_enabled">
        <callback name="get_write_cache_enabled">
          <source-position filename="udisks-generated.h" line="992"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9989">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9983">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_supported">
        <callback name="get_write_cache_supported">
          <source-position filename="udisks-generated.h" line="994"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9952">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9946">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_enabled">
        <callback name="get_read_lookahead_enabled">
          <source-position filename="udisks-generated.h" line="996"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10063">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="10057">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_supported">
        <callback name="get_read_lookahead_supported">
          <source-position filename="udisks-generated.h" line="998"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10026">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="10020">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveAtaProxy"
           c:symbol-prefix="drive_ata_proxy"
           c:type="UDisksDriveAtaProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveAtaProxy"
           glib:get-type="udisks_drive_ata_proxy_get_type"
           glib:type-struct="DriveAtaProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="11275">The #UDisksDriveAtaProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1327"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveAta"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_ata_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11919">Finishes an operation started with udisks_drive_ata_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1343"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="11926">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11921">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12009">Finishes an operation started with udisks_drive_ata_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1362"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12016">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12011">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12034">Like udisks_drive_ata_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1365"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12049">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12036">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12037">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12038">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12039">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12040">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_ata_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11944">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1346"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="11959">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11946">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11947">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11948">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11949">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11950">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_ata_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11889">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_proxy_new_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1335"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11891">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11892">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11893">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11894">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11895">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11896">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11897">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_ata_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11979">Like udisks_drive_ata_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11981">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11982">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11983">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11984">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11985">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11986">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="11987">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaProxyPrivate"
              c:type="UDisksDriveAtaProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaProxyClass"
            c:type="UDisksDriveAtaProxyClass"
            glib:is-gtype-struct-for="DriveAtaProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="11281">Class structure for #UDisksDriveAtaProxy.</doc>
      <source-position filename="udisks-generated.h" line="1327"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11283">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveAtaProxyPrivate"
            c:type="UDisksDriveAtaProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1315"/>
    </record>
    <class name="DriveAtaSkeleton"
           c:symbol-prefix="drive_ata_skeleton"
           c:type="UDisksDriveAtaSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveAtaSkeleton"
           glib:get-type="udisks_drive_ata_skeleton_get_type"
           glib:type-struct="DriveAtaSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12071">The #UDisksDriveAtaSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1397"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveAta"/>
      <constructor name="new" c:identifier="udisks_drive_ata_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12836">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="1405"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12841">The skeleton object.</doc>
          <type name="DriveAtaSkeleton" c:type="UDisksDriveAta*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaSkeletonPrivate"
              c:type="UDisksDriveAtaSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaSkeletonClass"
            c:type="UDisksDriveAtaSkeletonClass"
            glib:is-gtype-struct-for="DriveAtaSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12077">Class structure for #UDisksDriveAtaSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="1397"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12079">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveAtaSkeletonPrivate"
            c:type="UDisksDriveAtaSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1385"/>
    </record>
    <record name="DriveIface"
            c:type="UDisksDriveIface"
            glib:is-gtype-struct-for="Drive">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4353">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="594"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4355">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_eject">
        <callback name="handle_eject">
          <source-position filename="udisks-generated.h" line="520"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_configuration">
        <callback name="handle_set_configuration">
          <source-position filename="udisks-generated.h" line="525"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="udisks-generated.h" line="531"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5067">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5059">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_connection_bus">
        <callback name="get_connection_bus">
          <source-position filename="udisks-generated.h" line="533"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5655">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5647">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ejectable">
        <callback name="get_ejectable">
          <source-position filename="udisks-generated.h" line="535"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5792">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5786">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="udisks-generated.h" line="537"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5014">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5006">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media">
        <callback name="get_media">
          <source-position filename="udisks-generated.h" line="539"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5120">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5112">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_available">
        <callback name="get_media_available">
          <source-position filename="udisks-generated.h" line="541"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5257">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5251">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_change_detected">
        <callback name="get_media_change_detected">
          <source-position filename="udisks-generated.h" line="543"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5290">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5284">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_compatibility">
        <callback name="get_media_compatibility">
          <source-position filename="udisks-generated.h" line="545"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5173">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5165">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_removable">
        <callback name="get_media_removable">
          <source-position filename="udisks-generated.h" line="547"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5224">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5218">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model">
        <callback name="get_model">
          <source-position filename="udisks-generated.h" line="549"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4802">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="4794">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical">
        <callback name="get_optical">
          <source-position filename="udisks-generated.h" line="551"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5422">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5416">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_blank">
        <callback name="get_optical_blank">
          <source-position filename="udisks-generated.h" line="553"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5455">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5449">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_audio_tracks">
        <callback name="get_optical_num_audio_tracks">
          <source-position filename="udisks-generated.h" line="555"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5521">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5515">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_data_tracks">
        <callback name="get_optical_num_data_tracks">
          <source-position filename="udisks-generated.h" line="557"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5554">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5548">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_sessions">
        <callback name="get_optical_num_sessions">
          <source-position filename="udisks-generated.h" line="559"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5587">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5581">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_tracks">
        <callback name="get_optical_num_tracks">
          <source-position filename="udisks-generated.h" line="561"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5488">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5482">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_removable">
        <callback name="get_removable">
          <source-position filename="udisks-generated.h" line="563"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5759">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5753">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_revision">
        <callback name="get_revision">
          <source-position filename="udisks-generated.h" line="565"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4855">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="4847">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rotation_rate">
        <callback name="get_rotation_rate">
          <source-position filename="udisks-generated.h" line="567"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5620">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5614">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_seat">
        <callback name="get_seat">
          <source-position filename="udisks-generated.h" line="569"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5700">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <source-position filename="udisks-generated.h" line="571"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4908">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="4900">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="573"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5323">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5317">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sort_key">
        <callback name="get_sort_key">
          <source-position filename="udisks-generated.h" line="575"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5827">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5819">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_detected">
        <callback name="get_time_detected">
          <source-position filename="udisks-generated.h" line="577"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5356">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5350">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_media_detected">
        <callback name="get_time_media_detected">
          <source-position filename="udisks-generated.h" line="579"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5389">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5383">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vendor">
        <callback name="get_vendor">
          <source-position filename="udisks-generated.h" line="581"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4749">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="4741">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_wwn">
        <callback name="get_wwn">
          <source-position filename="udisks-generated.h" line="583"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4961">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="4953">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_power_off">
        <callback name="handle_power_off">
          <source-position filename="udisks-generated.h" line="585"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_power_off">
        <callback name="get_can_power_off">
          <source-position filename="udisks-generated.h" line="590"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5878">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5872">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sibling_id">
        <callback name="get_sibling_id">
          <source-position filename="udisks-generated.h" line="592"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5917">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5909">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveProxy"
           c:symbol-prefix="drive_proxy"
           c:type="UDisksDriveProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveProxy"
           glib:get-type="udisks_drive_proxy_get_type"
           glib:type-struct="DriveProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6330">The #UDisksDriveProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="805"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Drive"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7040">Finishes an operation started with udisks_drive_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="821"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7047">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7042">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7130">Finishes an operation started with udisks_drive_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="840"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7137">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7132">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7155">Like udisks_drive_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="843"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7170">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7157">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7158">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7159">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7160">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7161">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7065">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="824"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7080">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7067">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7068">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7069">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7070">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7071">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7010">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_proxy_new_finish() to get the result of the operation.

See udisks_drive_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="813"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7012">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7013">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7014">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7015">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7016">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7017">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7018">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7100">Like udisks_drive_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="832"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7102">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7103">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7104">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7105">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7106">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7107">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7108">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveProxyPrivate" c:type="UDisksDriveProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveProxyClass"
            c:type="UDisksDriveProxyClass"
            glib:is-gtype-struct-for="DriveProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6336">Class structure for #UDisksDriveProxy.</doc>
      <source-position filename="udisks-generated.h" line="805"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6338">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveProxyPrivate"
            c:type="UDisksDriveProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="793"/>
    </record>
    <class name="DriveSkeleton"
           c:symbol-prefix="drive_skeleton"
           c:type="UDisksDriveSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveSkeleton"
           glib:get-type="udisks_drive_skeleton_get_type"
           glib:type-struct="DriveSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7192">The #UDisksDriveSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="875"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Drive"/>
      <constructor name="new" c:identifier="udisks_drive_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8009">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="883"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8014">The skeleton object.</doc>
          <type name="DriveSkeleton" c:type="UDisksDrive*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveSkeletonPrivate"
              c:type="UDisksDriveSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveSkeletonClass"
            c:type="UDisksDriveSkeletonClass"
            glib:is-gtype-struct-for="DriveSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7198">Class structure for #UDisksDriveSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="875"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7200">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveSkeletonPrivate"
            c:type="UDisksDriveSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="863"/>
    </record>
    <function-macro name="ENCRYPTED"
                    c:identifier="UDISKS_ENCRYPTED"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3194"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_GET_IFACE"
                    c:identifier="UDISKS_ENCRYPTED_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3196"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY"
                    c:identifier="UDISKS_ENCRYPTED_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3376"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3377"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY_GET_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3378"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3446"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3447"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3448"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ERROR_NUM_ENTRIES"
              value="27"
              c:type="UDISKS_ERROR_NUM_ENTRIES">
      <source-position filename="udisksenums.h" line="84"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Encrypted"
               c:symbol-prefix="encrypted"
               c:type="UDisksEncrypted"
               glib:type-name="UDisksEncrypted"
               glib:get-type="udisks_encrypted_get_type"
               glib:type-struct="EncryptedIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27382">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3239"/>
      <function name="interface_info"
                c:identifier="udisks_encrypted_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27347">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27352">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_encrypted_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27360">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27368">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27362">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27363">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27547">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3225"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27557">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27549">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cleartext_device"
                      invoker="get_cleartext_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27686">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_cleartext_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3227"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27696">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27688">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_encryption_type"
                      invoker="get_hint_encryption_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27600">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_hint_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3229"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27610">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27602">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata_size"
                      invoker="get_metadata_size"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27653">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27661">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27655">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_change_passphrase">
        <source-position filename="udisks-generated.h" line="3207"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_lock">
        <source-position filename="udisks-generated.h" line="3214"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="3233"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unlock">
        <source-position filename="udisks-generated.h" line="3219"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_change_passphrase"
              c:identifier="udisks_encrypted_call_change_passphrase">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27947">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_change_passphrase_finish() to get the result of the operation.

See udisks_encrypted_call_change_passphrase_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3312"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27949">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27950">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27951">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27952">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27953">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27954">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27955">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_finish"
              c:identifier="udisks_encrypted_call_change_passphrase_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27986">Finishes an operation started with udisks_encrypted_call_change_passphrase().</doc>
        <source-position filename="udisks-generated.h" line="3321"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27994">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27988">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27989">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_change_passphrase().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_sync"
              c:identifier="udisks_encrypted_call_change_passphrase_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28013">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_change_passphrase() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3326"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28026">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28015">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28016">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28017">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28018">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28019">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock" c:identifier="udisks_encrypted_call_lock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27849">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_lock_finish() to get the result of the operation.

See udisks_encrypted_call_lock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3294"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27851">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27852">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27853">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27854">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27855">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_finish"
              c:identifier="udisks_encrypted_call_lock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27882">Finishes an operation started with udisks_encrypted_call_lock().</doc>
        <source-position filename="udisks-generated.h" line="3301"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27890">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27884">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27885">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_lock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_sync"
              c:identifier="udisks_encrypted_call_lock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27909">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_lock() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3306"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27920">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27911">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27912">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27913">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_encrypted_call_resize"
              version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28057">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_resize_finish() to get the result of the operation.

See udisks_encrypted_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3334"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28059">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28060">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28061">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28062">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28063">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28064">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_encrypted_call_resize_finish"
              version="2.8.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28095">Finishes an operation started with udisks_encrypted_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="3342"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28103">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28097">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28098">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_encrypted_call_resize_sync"
              version="2.8.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28124">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3347"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28136">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28126">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28127">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28128">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock" c:identifier="udisks_encrypted_call_unlock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27739">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_unlock_finish() to get the result of the operation.

See udisks_encrypted_call_unlock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3272"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27741">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27742">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27743">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27744">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27745">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27746">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_finish"
              c:identifier="udisks_encrypted_call_unlock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27775">Finishes an operation started with udisks_encrypted_call_unlock().</doc>
        <source-position filename="udisks-generated.h" line="3280"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27784">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27777">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27778">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27779">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_unlock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_sync"
              c:identifier="udisks_encrypted_call_unlock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27805">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_unlock() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3286"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27818">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27807">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27808">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27809">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27810">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27811">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_change_passphrase"
              c:identifier="udisks_encrypted_complete_change_passphrase">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28206">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28208">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28209">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_lock"
              c:identifier="udisks_encrypted_complete_lock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28188">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28190">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28191">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_encrypted_complete_resize"
              version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28224">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28226">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28227">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unlock"
              c:identifier="udisks_encrypted_complete_unlock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28167">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28169">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28170">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="cleartext_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28171">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_encrypted_dup_child_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27567">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3358"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27575">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27569">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_cleartext_device"
              c:identifier="udisks_encrypted_dup_cleartext_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27706">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3369"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27714">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27708">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_encryption_type"
              c:identifier="udisks_encrypted_dup_hint_encryption_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27620">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3362"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27628">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27622">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_encrypted_get_child_configuration"
              glib:get-property="child-configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27547">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3357"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27557">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27549">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cleartext_device"
              c:identifier="udisks_encrypted_get_cleartext_device"
              glib:get-property="cleartext-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27686">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_cleartext_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3368"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27696">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27688">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_encryption_type"
              c:identifier="udisks_encrypted_get_hint_encryption_type"
              glib:get-property="hint-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27600">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_hint_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3361"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27610">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27602">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_size"
              c:identifier="udisks_encrypted_get_metadata_size"
              glib:get-property="metadata-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27653">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3365"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27661">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27655">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_encrypted_set_child_configuration"
              glib:set-property="child-configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27585">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3359"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27587">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27588">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cleartext_device"
              c:identifier="udisks_encrypted_set_cleartext_device"
              glib:set-property="cleartext-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27724">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3370"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27726">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27727">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_encryption_type"
              c:identifier="udisks_encrypted_set_hint_encryption_type"
              glib:set-property="hint-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27638">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3363"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27640">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27641">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_size"
              c:identifier="udisks_encrypted_set_metadata_size"
              glib:set-property="metadata-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27671">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3366"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27673">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27674">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27509">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="cleartext-device"
                writable="1"
                transfer-ownership="none"
                setter="set_cleartext_device"
                getter="get_cleartext_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27536">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-encryption-type"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_encryption_type"
                getter="get_hint_encryption_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27518">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata-size"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata_size"
                getter="get_metadata_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27527">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-change-passphrase" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27457">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_change_passphrase() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27469">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27460">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27461">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27462">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27463">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-lock" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27434">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27444">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27437">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27438">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27482">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27493">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27485">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27486">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27487">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unlock" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27410">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_unlock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27421">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27413">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27414">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27415">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="EncryptedIface"
            c:type="UDisksEncryptedIface"
            glib:is-gtype-struct-for="Encrypted">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27388">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3239"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27390">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_change_passphrase">
        <callback name="handle_change_passphrase">
          <source-position filename="udisks-generated.h" line="3207"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_new_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_lock">
        <callback name="handle_lock">
          <source-position filename="udisks-generated.h" line="3214"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unlock">
        <callback name="handle_unlock">
          <source-position filename="udisks-generated.h" line="3219"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="3225"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27557">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="27549">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cleartext_device">
        <callback name="get_cleartext_device">
          <source-position filename="udisks-generated.h" line="3227"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27696">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="27688">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_encryption_type">
        <callback name="get_hint_encryption_type">
          <source-position filename="udisks-generated.h" line="3229"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27610">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="27602">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata_size">
        <callback name="get_metadata_size">
          <source-position filename="udisks-generated.h" line="3231"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27661">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="27655">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="3233"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EncryptedProxy"
           c:symbol-prefix="encrypted_proxy"
           c:type="UDisksEncryptedProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksEncryptedProxy"
           glib:get-type="udisks_encrypted_proxy_get_type"
           glib:type-struct="EncryptedProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28246">The #UDisksEncryptedProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3396"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Encrypted"/>
      <constructor name="new_finish"
                   c:identifier="udisks_encrypted_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28552">Finishes an operation started with udisks_encrypted_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3412"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28559">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28554">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28642">Finishes an operation started with udisks_encrypted_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3431"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28649">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28644">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28667">Like udisks_encrypted_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3434"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28682">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28669">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28670">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28671">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28672">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28673">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_encrypted_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28577">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3415"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28592">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28579">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28580">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28581">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28582">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28583">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_encrypted_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28522">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_proxy_new_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3404"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28524">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28525">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28526">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28527">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28528">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28529">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28530">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_encrypted_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28612">Like udisks_encrypted_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3423"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28614">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28615">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28616">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28617">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28618">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28619">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28620">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedProxyPrivate"
              c:type="UDisksEncryptedProxyPrivate*"/>
      </field>
    </class>
    <record name="EncryptedProxyClass"
            c:type="UDisksEncryptedProxyClass"
            glib:is-gtype-struct-for="EncryptedProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28252">Class structure for #UDisksEncryptedProxy.</doc>
      <source-position filename="udisks-generated.h" line="3396"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28254">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="EncryptedProxyPrivate"
            c:type="UDisksEncryptedProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3384"/>
    </record>
    <class name="EncryptedSkeleton"
           c:symbol-prefix="encrypted_skeleton"
           c:type="UDisksEncryptedSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksEncryptedSkeleton"
           glib:get-type="udisks_encrypted_skeleton_get_type"
           glib:type-struct="EncryptedSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28704">The #UDisksEncryptedSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3466"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Encrypted"/>
      <constructor name="new" c:identifier="udisks_encrypted_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29196">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3474"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29201">The skeleton object.</doc>
          <type name="EncryptedSkeleton" c:type="UDisksEncrypted*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedSkeletonPrivate"
              c:type="UDisksEncryptedSkeletonPrivate*"/>
      </field>
    </class>
    <record name="EncryptedSkeletonClass"
            c:type="UDisksEncryptedSkeletonClass"
            glib:is-gtype-struct-for="EncryptedSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28710">Class structure for #UDisksEncryptedSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3466"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28712">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="EncryptedSkeletonPrivate"
            c:type="UDisksEncryptedSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3454"/>
    </record>
    <enumeration name="Error"
                 glib:type-name="UDisksError"
                 glib:get-type="udisks_error_get_type"
                 c:type="UDisksError"
                 glib:error-domain="udisks-error-quark">
      <doc xml:space="preserve"
           filename="udisksenums.h"
           line="32">Error codes for the #UDISKS_ERROR error domain and the
corresponding D-Bus error names.</doc>
      <member name="failed"
              value="0"
              c:identifier="UDISKS_ERROR_FAILED"
              glib:nick="failed"
              glib:name="UDISKS_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="34">The operation failed.</doc>
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="UDISKS_ERROR_CANCELLED"
              glib:nick="cancelled"
              glib:name="UDISKS_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="35">The operation was cancelled.</doc>
      </member>
      <member name="already_cancelled"
              value="2"
              c:identifier="UDISKS_ERROR_ALREADY_CANCELLED"
              glib:nick="already-cancelled"
              glib:name="UDISKS_ERROR_ALREADY_CANCELLED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="36">The operation has already been cancelled.</doc>
      </member>
      <member name="not_authorized"
              value="3"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED"
              glib:nick="not-authorized"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="37">Not authorized to perform the requested operation.</doc>
      </member>
      <member name="not_authorized_can_obtain"
              value="4"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN"
              glib:nick="not-authorized-can-obtain"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="38">Like %UDISKS_ERROR_NOT_AUTHORIZED but authorization can be obtained through e.g. authentication.</doc>
      </member>
      <member name="not_authorized_dismissed"
              value="5"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED"
              glib:nick="not-authorized-dismissed"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="39">Like %UDISKS_ERROR_NOT_AUTHORIZED but an authentication was shown and the user dismissed it.</doc>
      </member>
      <member name="already_mounted"
              value="6"
              c:identifier="UDISKS_ERROR_ALREADY_MOUNTED"
              glib:nick="already-mounted"
              glib:name="UDISKS_ERROR_ALREADY_MOUNTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="40">The device is already mounted.</doc>
      </member>
      <member name="not_mounted"
              value="7"
              c:identifier="UDISKS_ERROR_NOT_MOUNTED"
              glib:nick="not-mounted"
              glib:name="UDISKS_ERROR_NOT_MOUNTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="41">The device is not mounted.</doc>
      </member>
      <member name="option_not_permitted"
              value="8"
              c:identifier="UDISKS_ERROR_OPTION_NOT_PERMITTED"
              glib:nick="option-not-permitted"
              glib:name="UDISKS_ERROR_OPTION_NOT_PERMITTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="42">Not permitted to use the requested option.</doc>
      </member>
      <member name="mounted_by_other_user"
              value="9"
              c:identifier="UDISKS_ERROR_MOUNTED_BY_OTHER_USER"
              glib:nick="mounted-by-other-user"
              glib:name="UDISKS_ERROR_MOUNTED_BY_OTHER_USER">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="43">The device is mounted by another user.</doc>
      </member>
      <member name="already_unmounting"
              value="10"
              c:identifier="UDISKS_ERROR_ALREADY_UNMOUNTING"
              glib:nick="already-unmounting"
              glib:name="UDISKS_ERROR_ALREADY_UNMOUNTING">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="44">The device is already unmounting.</doc>
      </member>
      <member name="not_supported"
              value="11"
              c:identifier="UDISKS_ERROR_NOT_SUPPORTED"
              glib:nick="not-supported"
              glib:name="UDISKS_ERROR_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="45">The operation is not supported due to missing driver/tool support.</doc>
      </member>
      <member name="timed_out"
              value="12"
              c:identifier="UDISKS_ERROR_TIMED_OUT"
              glib:nick="timed-out"
              glib:name="UDISKS_ERROR_TIMED_OUT">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="46">The operation timed out.</doc>
      </member>
      <member name="would_wakeup"
              value="13"
              c:identifier="UDISKS_ERROR_WOULD_WAKEUP"
              glib:nick="would-wakeup"
              glib:name="UDISKS_ERROR_WOULD_WAKEUP">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="47">The operation would wake up a disk that is in a deep-sleep state.</doc>
      </member>
      <member name="device_busy"
              value="14"
              c:identifier="UDISKS_ERROR_DEVICE_BUSY"
              glib:nick="device-busy"
              glib:name="UDISKS_ERROR_DEVICE_BUSY">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="48">Attempting to unmount a device that is busy.</doc>
      </member>
      <member name="iscsi_daemon_transport_failed"
              value="15"
              c:identifier="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED"
              glib:nick="iscsi-daemon-transport-failed"
              glib:name="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED">
      </member>
      <member name="iscsi_host_not_found"
              value="16"
              c:identifier="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND"
              glib:nick="iscsi-host-not-found"
              glib:name="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND">
      </member>
      <member name="iscsi_idmb"
              value="17"
              c:identifier="UDISKS_ERROR_ISCSI_IDMB"
              glib:nick="iscsi-idmb"
              glib:name="UDISKS_ERROR_ISCSI_IDMB">
      </member>
      <member name="iscsi_login_failed"
              value="18"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FAILED"
              glib:nick="iscsi-login-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_FAILED">
      </member>
      <member name="iscsi_login_auth_failed"
              value="19"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED"
              glib:nick="iscsi-login-auth-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED">
      </member>
      <member name="iscsi_login_fatal"
              value="20"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FATAL"
              glib:nick="iscsi-login-fatal"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_FATAL">
      </member>
      <member name="iscsi_logout_failed"
              value="21"
              c:identifier="UDISKS_ERROR_ISCSI_LOGOUT_FAILED"
              glib:nick="iscsi-logout-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGOUT_FAILED">
      </member>
      <member name="iscsi_no_firmware"
              value="22"
              c:identifier="UDISKS_ERROR_ISCSI_NO_FIRMWARE"
              glib:nick="iscsi-no-firmware"
              glib:name="UDISKS_ERROR_ISCSI_NO_FIRMWARE">
      </member>
      <member name="iscsi_no_objects_found"
              value="23"
              c:identifier="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND"
              glib:nick="iscsi-no-objects-found"
              glib:name="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND">
      </member>
      <member name="iscsi_not_connected"
              value="24"
              c:identifier="UDISKS_ERROR_ISCSI_NOT_CONNECTED"
              glib:nick="iscsi-not-connected"
              glib:name="UDISKS_ERROR_ISCSI_NOT_CONNECTED">
      </member>
      <member name="iscsi_transport_failed"
              value="25"
              c:identifier="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED"
              glib:nick="iscsi-transport-failed"
              glib:name="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED">
      </member>
      <member name="iscsi_unknown_discovery_type"
              value="26"
              c:identifier="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE"
              glib:nick="iscsi-unknown-discovery-type"
              glib:name="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE">
      </member>
      <function name="quark" c:identifier="udisks_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function-macro name="FILESYSTEM"
                    c:identifier="UDISKS_FILESYSTEM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2608"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4530"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_GET_IFACE"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4532"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4867"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4868"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4869"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4937"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4938"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4939"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_GET_IFACE"
                    c:identifier="UDISKS_FILESYSTEM_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2610"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY"
                    c:identifier="UDISKS_FILESYSTEM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2859"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2860"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2861"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2929"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2930"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2931"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Filesystem"
               c:symbol-prefix="filesystem"
               c:type="UDisksFilesystem"
               glib:type-name="UDisksFilesystem"
               glib:get-type="udisks_filesystem_get_type"
               glib:type-struct="FilesystemIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23392">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2662"/>
      <function name="interface_info"
                c:identifier="udisks_filesystem_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23359">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2670"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23364">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23372">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2671"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23380">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23374">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23375">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_mount_points"
                      invoker="get_mount_points"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23613">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2637"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23623">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23615">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23666">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2639"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23674">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23668">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_check">
        <source-position filename="udisks-generated.h" line="2641"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mount">
        <source-position filename="udisks-generated.h" line="2621"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="2646"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="2651"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="2626"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_take_ownership">
        <source-position filename="udisks-generated.h" line="2657"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unmount">
        <source-position filename="udisks-generated.h" line="2632"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_check"
              c:identifier="udisks_filesystem_call_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24115">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_check_finish() to get the result of the operation.

See udisks_filesystem_call_check_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2787"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24117">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24118">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24119">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24120">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24121">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_check_finish"
              c:identifier="udisks_filesystem_call_check_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24150">Finishes an operation started with udisks_filesystem_call_check().</doc>
        <source-position filename="udisks-generated.h" line="2794"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24159">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24152">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_consistent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24153">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24154">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_check().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_check_sync"
              c:identifier="udisks_filesystem_call_check_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24182">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_check() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2800"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24194">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24184">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24185">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_consistent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24186">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24187">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount" c:identifier="udisks_filesystem_call_mount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23803">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_mount_finish() to get the result of the operation.

See udisks_filesystem_call_mount_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2729"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23805">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23806">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23807">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23808">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23809">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_finish"
              c:identifier="udisks_filesystem_call_mount_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23836">Finishes an operation started with udisks_filesystem_call_mount().</doc>
        <source-position filename="udisks-generated.h" line="2736"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23845">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23838">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23839">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23840">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_mount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_sync"
              c:identifier="udisks_filesystem_call_mount_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23866">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_mount() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2742"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23878">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23868">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23869">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23870">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23871">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_filesystem_call_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24225">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_repair_finish() to get the result of the operation.

See udisks_filesystem_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2807"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24227">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24228">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24229">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24230">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24231">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_filesystem_call_repair_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24260">Finishes an operation started with udisks_filesystem_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="2814"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24269">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24262">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_repaired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24263">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24264">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_filesystem_call_repair_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24292">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2820"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24304">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24294">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24295">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_repaired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24296">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24297">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_filesystem_call_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24005">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_resize_finish() to get the result of the operation.

See udisks_filesystem_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2767"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24007">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24008">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24009">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24010">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24011">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24012">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_filesystem_call_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24043">Finishes an operation started with udisks_filesystem_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="2775"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24051">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24045">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24046">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_filesystem_call_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24072">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2780"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24084">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24074">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24075">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24076">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24077">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_call_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23699">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2709"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23701">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23702">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23703">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23704">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23705">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23706">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23735">Finishes an operation started with udisks_filesystem_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="2717"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23743">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23737">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23738">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23762">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2722"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23774">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23764">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23765">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23766">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23767">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership"
              c:identifier="udisks_filesystem_call_take_ownership"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24335">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_take_ownership_finish() to get the result of the operation.

See udisks_filesystem_call_take_ownership_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24337">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24338">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24339">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24340">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24341">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership_finish"
              c:identifier="udisks_filesystem_call_take_ownership_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24370">Finishes an operation started with udisks_filesystem_call_take_ownership().</doc>
        <source-position filename="udisks-generated.h" line="2834"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24378">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24372">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24373">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_take_ownership().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership_sync"
              c:identifier="udisks_filesystem_call_take_ownership_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24399">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_take_ownership() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2839"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24410">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24401">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24402">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24403">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount"
              c:identifier="udisks_filesystem_call_unmount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23907">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_unmount_finish() to get the result of the operation.

See udisks_filesystem_call_unmount_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2749"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23909">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23910">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23911">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23912">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23913">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_finish"
              c:identifier="udisks_filesystem_call_unmount_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23940">Finishes an operation started with udisks_filesystem_call_unmount().</doc>
        <source-position filename="udisks-generated.h" line="2756"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23948">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23942">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23943">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_unmount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_sync"
              c:identifier="udisks_filesystem_call_unmount_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23967">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_unmount() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2761"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23978">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23969">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23970">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23971">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_check"
              c:identifier="udisks_filesystem_complete_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24516">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2692"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24518">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24519">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="consistent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24520">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mount"
              c:identifier="udisks_filesystem_complete_mount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24457">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2679"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24459">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24460">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="mount_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24461">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_filesystem_complete_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24539">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2697"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24541">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24542">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="repaired" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24543">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_filesystem_complete_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24496">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2688"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24498">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24499">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_complete_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24439">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2675"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24441">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24442">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_take_ownership"
              c:identifier="udisks_filesystem_complete_take_ownership"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24562">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2702"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24564">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24565">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unmount"
              c:identifier="udisks_filesystem_complete_unmount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24478">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2684"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24480">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24481">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_mount_points"
              c:identifier="udisks_filesystem_dup_mount_points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23633">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2849"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23641">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23635">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_points"
              c:identifier="udisks_filesystem_get_mount_points"
              glib:get-property="mount-points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23613">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2848"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23623">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23615">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_filesystem_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23666">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2852"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23674">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23668">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mount_points"
              c:identifier="udisks_filesystem_set_mount_points"
              glib:set-property="mount-points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23651">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2850"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23653">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23654">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_filesystem_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23684">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2853"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23686">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23687">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="mount-points"
                writable="1"
                transfer-ownership="none"
                setter="set_mount_points"
                getter="get_mount_points">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23593">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23602">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-check" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23517">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_check() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23527">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23520">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23521">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mount" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23445">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_mount() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23455">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23448">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23449">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23542">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23552">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23545">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23546">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23491">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23502">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23494">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23495">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23496">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23421">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23432">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23424">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23425">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23426">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-take-ownership" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23567">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_take_ownership() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23577">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23570">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23571">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unmount" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23468">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_unmount() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23478">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23471">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23472">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="FilesystemBTRFS"
               c:symbol-prefix="filesystem_btrfs"
               c:type="UDisksFilesystemBTRFS"
               version="2.1.3"
               glib:type-name="UDisksFilesystemBTRFS"
               glib:get-type="udisks_filesystem_btrfs_get_type"
               glib:type-struct="FilesystemBTRFSIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38407">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4606"/>
      <function name="interface_info"
                c:identifier="udisks_filesystem_btrfs_interface_info"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38368">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4614"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38373">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_btrfs_override_properties"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38383">Overrides all #GObject properties in the #UDisksFilesystemBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4615"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38391">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38385">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38386">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_label"
                      invoker="get_label"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38726">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4575"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38736">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38728">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38844">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4577"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38852">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38846">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_used"
                      invoker="get_used"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38881">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38889">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38883">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38785">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4581"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38795">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38787">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="4583"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_snapshot">
        <source-position filename="udisks-generated.h" line="4543"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_subvolume">
        <source-position filename="udisks-generated.h" line="4551"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_subvolumes">
        <source-position filename="udisks-generated.h" line="4557"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="4589"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_subvolume">
        <source-position filename="udisks-generated.h" line="4563"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="4595"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="4600"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="4569"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_filesystem_btrfs_call_add_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38918">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_add_device_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4660"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38920">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38921">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38922">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38923">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38924">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38925">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_filesystem_btrfs_call_add_device_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38956">Finishes an operation started with udisks_filesystem_btrfs_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="4668"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38964">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38958">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38959">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_filesystem_btrfs_call_add_device_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38985">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4673"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38997">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38987">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38988">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38989">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38990">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39480">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_create_snapshot_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_create_snapshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4764"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39482">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39483">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39484">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39485">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39486">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39487">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39488">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39489">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_finish"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39524">Finishes an operation started with udisks_filesystem_btrfs_call_create_snapshot().</doc>
        <source-position filename="udisks-generated.h" line="4774"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39532">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39526">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39527">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_create_snapshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_sync"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39553">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_create_snapshot() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4779"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39567">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39555">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39556">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39557">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39558">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39559">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39560">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39138">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_create_subvolume_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_create_subvolume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4700"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39140">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39141">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39142">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39143">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39144">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39145">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume_finish"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39176">Finishes an operation started with udisks_filesystem_btrfs_call_create_subvolume().</doc>
        <source-position filename="udisks-generated.h" line="4708"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39184">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39178">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39179">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_create_subvolume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume_sync"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39205">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_create_subvolume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4713"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39217">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39207">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39208">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39209">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39210">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39358">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_get_subvolumes_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_get_subvolumes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4740"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39360">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39361">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39362">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39363">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39364">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39365">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes_finish"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39396">Finishes an operation started with udisks_filesystem_btrfs_call_get_subvolumes().</doc>
        <source-position filename="udisks-generated.h" line="4748"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39406">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39398">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="out_subvolumes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39399">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_subvolumes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39400">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39401">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_get_subvolumes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes_sync"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39431">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_get_subvolumes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4755"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39445">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39433">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39434">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39435">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_subvolumes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39436">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_subvolumes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39437">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39438">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_filesystem_btrfs_call_remove_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39028">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_remove_device_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4680"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39030">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39031">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39032">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39033">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39034">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39035">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_filesystem_btrfs_call_remove_device_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39066">Finishes an operation started with udisks_filesystem_btrfs_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="4688"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39074">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39068">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39069">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_filesystem_btrfs_call_remove_device_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39095">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4693"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39107">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39097">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39098">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39099">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39100">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39248">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_remove_subvolume_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_remove_subvolume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4720"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39250">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39251">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39252">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39253">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39254">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39255">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume_finish"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39286">Finishes an operation started with udisks_filesystem_btrfs_call_remove_subvolume().</doc>
        <source-position filename="udisks-generated.h" line="4728"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39294">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39288">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39289">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_remove_subvolume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume_sync"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39315">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_remove_subvolume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4733"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39327">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39317">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39318">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39319">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39320">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_filesystem_btrfs_call_repair"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39602">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_repair_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4788"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39604">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39605">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39606">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39607">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39608">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_filesystem_btrfs_call_repair_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39637">Finishes an operation started with udisks_filesystem_btrfs_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="4795"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39645">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39639">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39640">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_filesystem_btrfs_call_repair_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39666">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4800"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39677">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39668">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39669">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39670">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_filesystem_btrfs_call_resize"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39706">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_resize_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4806"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39708">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39709">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39710">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39711">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39712">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39713">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_filesystem_btrfs_call_resize_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39744">Finishes an operation started with udisks_filesystem_btrfs_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="4814"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39752">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39746">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39747">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_filesystem_btrfs_call_resize_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39773">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4819"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39785">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39775">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39776">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39777">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39778">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_btrfs_call_set_label"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39816">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4826"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39818">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39819">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39820">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39821">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39822">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39823">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_btrfs_call_set_label_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39854">Finishes an operation started with udisks_filesystem_btrfs_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="4834"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39862">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39856">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39857">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_btrfs_call_set_label_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39883">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4839"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39895">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39885">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39886">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39887">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39888">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_filesystem_btrfs_complete_add_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39926">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4619"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39928">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39929">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_snapshot"
              c:identifier="udisks_filesystem_btrfs_complete_create_snapshot"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40032">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4641"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40034">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40035">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_subvolume"
              c:identifier="udisks_filesystem_btrfs_complete_create_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39966">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4627"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39968">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39969">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_subvolumes"
              c:identifier="udisks_filesystem_btrfs_complete_get_subvolumes"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40006">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40008">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40009">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="subvolumes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40010">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="subvolumes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40011">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_filesystem_btrfs_complete_remove_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39946">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4623"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39948">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39949">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_subvolume"
              c:identifier="udisks_filesystem_btrfs_complete_remove_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39986">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4631"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39988">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39989">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_filesystem_btrfs_complete_repair"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40052">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4645"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40054">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40055">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_filesystem_btrfs_complete_resize"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40072">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4649"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40074">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40075">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_btrfs_complete_set_label"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40092">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4653"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40094">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40095">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_label"
              c:identifier="udisks_filesystem_btrfs_dup_label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38748">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4850"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38756">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38750">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_filesystem_btrfs_dup_uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38807">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4854"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38815">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38809">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="udisks_filesystem_btrfs_get_label"
              glib:get-property="label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38726">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4849"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38736">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38728">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_filesystem_btrfs_get_num_devices"
              glib:get-property="num-devices"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38844">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4857"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38852">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38846">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used"
              c:identifier="udisks_filesystem_btrfs_get_used"
              glib:get-property="used"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38881">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4860"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38889">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38883">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_filesystem_btrfs_get_uuid"
              glib:get-property="uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38785">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4853"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38795">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38787">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="udisks_filesystem_btrfs_set_label"
              glib:set-property="label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38768">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4851"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38770">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38771">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_filesystem_btrfs_set_num_devices"
              glib:set-property="num-devices"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38864">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4858"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38866">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38867">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_used"
              c:identifier="udisks_filesystem_btrfs_set_used"
              glib:set-property="used"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38901">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4861"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38903">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38904">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_filesystem_btrfs_set_uuid"
              glib:set-property="uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38827">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4855"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38829">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38830">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38680">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_num_devices"
                getter="get_num_devices"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38702">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="used"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_used"
                getter="get_used"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38713">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38691">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38444">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38455">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38447">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38448">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38449">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-snapshot" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38574">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_create_snapshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38587">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38577">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38578">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38579">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38580">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38581">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-subvolume" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38496">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_create_subvolume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38507">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38499">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38500">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38501">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-subvolumes" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38548">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_get_subvolumes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38559">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38551">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38552">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38553">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38470">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38481">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38473">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38474">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38475">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-subvolume" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38522">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_remove_subvolume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38533">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38525">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38526">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38527">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38602">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38612">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38605">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38606">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38627">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38638">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38630">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38631">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38632">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38653">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38664">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38656">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38657">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38658">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="FilesystemBTRFSIface"
            c:type="UDisksFilesystemBTRFSIface"
            glib:is-gtype-struct-for="FilesystemBTRFS"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38415">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4606"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38417">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_snapshot">
        <callback name="handle_create_snapshot">
          <source-position filename="udisks-generated.h" line="4543"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_source" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_dest" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_ro" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_subvolume">
        <callback name="handle_create_subvolume">
          <source-position filename="udisks-generated.h" line="4551"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_subvolumes">
        <callback name="handle_get_subvolumes">
          <source-position filename="udisks-generated.h" line="4557"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_snapshots_only" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_subvolume">
        <callback name="handle_remove_subvolume">
          <source-position filename="udisks-generated.h" line="4563"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="4569"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_label">
        <callback name="get_label">
          <source-position filename="udisks-generated.h" line="4575"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38736">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="38728">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <source-position filename="udisks-generated.h" line="4577"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38852">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="38846">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_used">
        <callback name="get_used">
          <source-position filename="udisks-generated.h" line="4579"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38889">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="38883">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="4581"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38795">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="38787">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="4583"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="4589"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="4595"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="4600"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemBTRFSProxy"
           c:symbol-prefix="filesystem_btrfs_proxy"
           c:type="UDisksFilesystemBTRFSProxy"
           version="2.1.3"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemBTRFSProxy"
           glib:get-type="udisks_filesystem_btrfs_proxy_get_type"
           glib:type-struct="FilesystemBTRFSProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40114">The #UDisksFilesystemBTRFSProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4887"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="FilesystemBTRFS"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40428">Finishes an operation started with udisks_filesystem_btrfs_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4903"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40435">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40430">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40524">Finishes an operation started with udisks_filesystem_btrfs_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4922"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40531">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40526">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40551">Like udisks_filesystem_btrfs_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4925"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40566">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40553">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40554">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40555">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40556">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40557">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40455">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4906"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40470">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40457">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40458">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40459">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40460">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40461">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_filesystem_btrfs_proxy_new"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40396">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_btrfs_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4895"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40398">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40399">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40400">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40401">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40402">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40403">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40404">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40492">Like udisks_filesystem_btrfs_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_btrfs_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4914"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40494">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40495">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40496">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40497">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40498">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40499">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40500">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemBTRFSProxyPrivate"
              c:type="UDisksFilesystemBTRFSProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemBTRFSProxyClass"
            c:type="UDisksFilesystemBTRFSProxyClass"
            glib:is-gtype-struct-for="FilesystemBTRFSProxy"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40122">Class structure for #UDisksFilesystemBTRFSProxy.</doc>
      <source-position filename="udisks-generated.h" line="4887"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40124">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemBTRFSProxyPrivate"
            c:type="UDisksFilesystemBTRFSProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4875"/>
    </record>
    <class name="FilesystemBTRFSSkeleton"
           c:symbol-prefix="filesystem_btrfs_skeleton"
           c:type="UDisksFilesystemBTRFSSkeleton"
           version="2.1.3"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemBTRFSSkeleton"
           glib:get-type="udisks_filesystem_btrfs_skeleton_get_type"
           glib:type-struct="FilesystemBTRFSSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40590">The #UDisksFilesystemBTRFSSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4957"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="FilesystemBTRFS"/>
      <constructor name="new"
                   c:identifier="udisks_filesystem_btrfs_skeleton_new"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41086">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4965"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41091">The skeleton object.</doc>
          <type name="FilesystemBTRFSSkeleton"
                c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemBTRFSSkeletonPrivate"
              c:type="UDisksFilesystemBTRFSSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemBTRFSSkeletonClass"
            c:type="UDisksFilesystemBTRFSSkeletonClass"
            glib:is-gtype-struct-for="FilesystemBTRFSSkeleton"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40598">Class structure for #UDisksFilesystemBTRFSSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4957"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40600">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemBTRFSSkeletonPrivate"
            c:type="UDisksFilesystemBTRFSSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4945"/>
    </record>
    <record name="FilesystemIface"
            c:type="UDisksFilesystemIface"
            glib:is-gtype-struct-for="Filesystem">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23398">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2662"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23400">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_mount">
        <callback name="handle_mount">
          <source-position filename="udisks-generated.h" line="2621"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="2626"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unmount">
        <callback name="handle_unmount">
          <source-position filename="udisks-generated.h" line="2632"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mount_points">
        <callback name="get_mount_points">
          <source-position filename="udisks-generated.h" line="2637"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23623">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="23615">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="2639"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23674">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="23668">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_check">
        <callback name="handle_check">
          <source-position filename="udisks-generated.h" line="2641"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="2646"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="2651"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_take_ownership">
        <callback name="handle_take_ownership">
          <source-position filename="udisks-generated.h" line="2657"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemProxy"
           c:symbol-prefix="filesystem_proxy"
           c:type="UDisksFilesystemProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemProxy"
           glib:get-type="udisks_filesystem_proxy_get_type"
           glib:type-struct="FilesystemProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24584">The #UDisksFilesystemProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2879"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Filesystem"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24864">Finishes an operation started with udisks_filesystem_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2895"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24871">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24866">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24954">Finishes an operation started with udisks_filesystem_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2914"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24961">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24956">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24979">Like udisks_filesystem_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2917"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24994">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24981">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24982">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24983">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24984">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24985">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24889">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2898"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24904">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24891">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24892">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24893">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24894">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24895">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_filesystem_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24834">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2887"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24836">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24837">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24838">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24839">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24840">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24841">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24842">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24924">Like udisks_filesystem_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2906"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24926">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24927">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24928">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24929">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24930">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24931">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24932">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemProxyPrivate"
              c:type="UDisksFilesystemProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemProxyClass"
            c:type="UDisksFilesystemProxyClass"
            glib:is-gtype-struct-for="FilesystemProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24590">Class structure for #UDisksFilesystemProxy.</doc>
      <source-position filename="udisks-generated.h" line="2879"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24592">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemProxyPrivate"
            c:type="UDisksFilesystemProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2867"/>
    </record>
    <class name="FilesystemSkeleton"
           c:symbol-prefix="filesystem_skeleton"
           c:type="UDisksFilesystemSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemSkeleton"
           glib:get-type="udisks_filesystem_skeleton_get_type"
           glib:type-struct="FilesystemSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25016">The #UDisksFilesystemSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2949"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Filesystem"/>
      <constructor name="new" c:identifier="udisks_filesystem_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25482">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2957"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25487">The skeleton object.</doc>
          <type name="FilesystemSkeleton" c:type="UDisksFilesystem*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemSkeletonPrivate"
              c:type="UDisksFilesystemSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemSkeletonClass"
            c:type="UDisksFilesystemSkeletonClass"
            glib:is-gtype-struct-for="FilesystemSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25022">Class structure for #UDisksFilesystemSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2949"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25024">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemSkeletonPrivate"
            c:type="UDisksFilesystemSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2937"/>
    </record>
    <function-macro name="IS_BLOCK"
                    c:identifier="UDISKS_IS_BLOCK"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1413"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2"
                    c:identifier="UDISKS_IS_BLOCK_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5147"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_PROXY"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5184"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5185"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_SKELETON"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5254"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5255"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_PROXY"
                    c:identifier="UDISKS_IS_BLOCK_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1921"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_PROXY_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1922"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_SKELETON"
                    c:identifier="UDISKS_IS_BLOCK_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1991"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1992"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT"
                    c:identifier="UDISKS_IS_CLIENT"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE"
                    c:identifier="UDISKS_IS_DRIVE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="508"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA"
                    c:identifier="UDISKS_IS_DRIVE_ATA"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="891"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_ATA_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1310"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_ATA_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1311"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_ATA_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1380"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_ATA_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1381"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="788"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="789"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="858"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="859"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED"
                    c:identifier="UDISKS_IS_ENCRYPTED"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3195"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_PROXY"
                    c:identifier="UDISKS_IS_ENCRYPTED_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3379"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_PROXY_CLASS"
                    c:identifier="UDISKS_IS_ENCRYPTED_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3380"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_SKELETON"
                    c:identifier="UDISKS_IS_ENCRYPTED_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3449"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_ENCRYPTED_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3450"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM"
                    c:identifier="UDISKS_IS_FILESYSTEM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2609"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4531"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_PROXY"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4870"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4871"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_SKELETON"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4940"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4941"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_PROXY"
                    c:identifier="UDISKS_IS_FILESYSTEM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2862"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_PROXY_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2863"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_SKELETON"
                    c:identifier="UDISKS_IS_FILESYSTEM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2932"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2933"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB"
                    c:identifier="UDISKS_IS_JOB"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4120"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_PROXY"
                    c:identifier="UDISKS_IS_JOB_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4251"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_PROXY_CLASS"
                    c:identifier="UDISKS_IS_JOB_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4252"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_SKELETON"
                    c:identifier="UDISKS_IS_JOB_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4321"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_JOB_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4322"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5955"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6328"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6329"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6398"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6399"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP"
                    c:identifier="UDISKS_IS_LOOP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3482"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_PROXY"
                    c:identifier="UDISKS_IS_LOOP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3593"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_PROXY_CLASS"
                    c:identifier="UDISKS_IS_LOOP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3594"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_SKELETON"
                    c:identifier="UDISKS_IS_LOOP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3663"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_LOOP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3664"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="UDISKS_IS_MANAGER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4354"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4428"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4429"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4498"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4499"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2"
                    c:identifier="UDISKS_IS_MANAGER_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4973"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5044"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5045"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5114"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5115"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID"
                    c:identifier="UDISKS_IS_MDRAID"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3696"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_PROXY"
                    c:identifier="UDISKS_IS_MDRAID_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4017"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MDRAID_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4018"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_SKELETON"
                    c:identifier="UDISKS_IS_MDRAID_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4087"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MDRAID_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4088"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="UDISKS_IS_OBJECT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6760"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_INFO"
                    c:identifier="UDISKS_IS_OBJECT_INFO"
                    introspectable="0">
      <source-position filename="udisksobjectinfo.h" line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT"
                    c:identifier="UDISKS_IS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6907"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6908"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY"
                    c:identifier="UDISKS_IS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6823"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6824"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON"
                    c:identifier="UDISKS_IS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6854"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6855"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION"
                    c:identifier="UDISKS_IS_PARTITION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2267"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_PROXY"
                    c:identifier="UDISKS_IS_PARTITION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2506"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2507"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_SKELETON"
                    c:identifier="UDISKS_IS_PARTITION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2576"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2577"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE"
                    c:identifier="UDISKS_IS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2024"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_PROXY"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2164"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2165"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_SKELETON"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2234"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2235"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5287"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5334"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5335"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5405"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE"
                    c:identifier="UDISKS_IS_SWAPSPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2965"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_PROXY"
                    c:identifier="UDISKS_IS_SWAPSPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3092"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_SWAPSPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3093"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_SKELETON"
                    c:identifier="UDISKS_IS_SWAPSPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3162"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_SWAPSPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3163"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME"
                    c:identifier="UDISKS_IS_VDO_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6431"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_VDO_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6658"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_VDO_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6659"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_VDO_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6728"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_VDO_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6729"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP"
                    c:identifier="UDISKS_IS_VOLUME_GROUP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5437"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_PROXY"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5852"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_PROXY_CLASS"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5853"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_SKELETON"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5922"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5923"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB" c:identifier="UDISKS_JOB" introspectable="0">
      <source-position filename="udisks-generated.h" line="4119"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_GET_IFACE"
                    c:identifier="UDISKS_JOB_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4121"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY"
                    c:identifier="UDISKS_JOB_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4248"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY_CLASS"
                    c:identifier="UDISKS_JOB_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4249"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY_GET_CLASS"
                    c:identifier="UDISKS_JOB_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4250"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON"
                    c:identifier="UDISKS_JOB_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4318"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON_CLASS"
                    c:identifier="UDISKS_JOB_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4319"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_JOB_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4320"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Job"
               c:symbol-prefix="job"
               c:type="UDisksJob"
               glib:type-name="UDisksJob"
               glib:get-type="udisks_job_get_type"
               glib:type-struct="JobIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34982">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4163"/>
      <function name="interface_info" c:identifier="udisks_job_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34941">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34946">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_job_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34954">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34962">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34956">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34957">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="completed">
        <source-position filename="udisks-generated.h" line="4154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bytes"
                      invoker="get_bytes"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35274">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35282">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35276">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cancelable"
                      invoker="get_cancelable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35500">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35508">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35502">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_expected_end_time"
                      invoker="get_expected_end_time"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35381">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35389">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35383">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_objects"
                      invoker="get_objects"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4142"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35424">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35416">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operation"
                      invoker="get_operation"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35155">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4144"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35165">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35157">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress"
                      invoker="get_progress"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35208">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35216">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35210">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress_valid"
                      invoker="get_progress_valid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35241">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35249">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35243">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rate"
                      invoker="get_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35311">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35319">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35313">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_start_time"
                      invoker="get_start_time"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35348">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35356">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35350">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_started_by_uid"
                      invoker="get_started_by_uid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35467">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35475">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35469">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="udisks-generated.h" line="4133"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_cancel" c:identifier="udisks_job_call_cancel">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35550">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_call_cancel_finish() to get the result of the operation.

See udisks_job_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35552">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35553">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35554">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35555">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35556">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="udisks_job_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35583">Finishes an operation started with udisks_job_call_cancel().</doc>
        <source-position filename="udisks-generated.h" line="4198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35591">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35585">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35586">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="udisks_job_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35610">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_job_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35621">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35612">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35613">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35614">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel" c:identifier="udisks_job_complete_cancel">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35648">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35650">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35651">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_objects"
              c:identifier="udisks_job_dup_objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35434">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4235"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35442">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35436">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operation"
              c:identifier="udisks_job_dup_operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35175">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4213"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35183">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35177">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_completed" c:identifier="udisks_job_emit_completed">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35533">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="udisks-generated.h" line="4183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35535">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35536">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35537">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes"
              c:identifier="udisks_job_get_bytes"
              glib:get-property="bytes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35274">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35282">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35276">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cancelable"
              c:identifier="udisks_job_get_cancelable"
              glib:get-property="cancelable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35500">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35508">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35502">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expected_end_time"
              c:identifier="udisks_job_get_expected_end_time"
              glib:get-property="expected-end-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35381">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35389">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35383">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_objects"
              c:identifier="udisks_job_get_objects"
              glib:get-property="objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4234"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35424">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35416">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operation"
              c:identifier="udisks_job_get_operation"
              glib:get-property="operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35155">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4212"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35165">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35157">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="udisks_job_get_progress"
              glib:get-property="progress"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35208">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35216">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35210">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_valid"
              c:identifier="udisks_job_get_progress_valid"
              glib:get-property="progress-valid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35241">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35249">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35243">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate"
              c:identifier="udisks_job_get_rate"
              glib:get-property="rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35311">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35319">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35313">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_time"
              c:identifier="udisks_job_get_start_time"
              glib:get-property="start-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35348">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35356">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35350">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_started_by_uid"
              c:identifier="udisks_job_get_started_by_uid"
              glib:get-property="started-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35467">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35475">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35469">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bytes"
              c:identifier="udisks_job_set_bytes"
              glib:set-property="bytes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35294">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35296">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35297">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancelable"
              c:identifier="udisks_job_set_cancelable"
              glib:set-property="cancelable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35518">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35520">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35521">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expected_end_time"
              c:identifier="udisks_job_set_expected_end_time"
              glib:set-property="expected-end-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35399">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35401">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35402">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_objects"
              c:identifier="udisks_job_set_objects"
              glib:set-property="objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35452">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4236"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35454">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35455">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation"
              c:identifier="udisks_job_set_operation"
              glib:set-property="operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35193">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35195">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35196">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="udisks_job_set_progress"
              glib:set-property="progress"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35226">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35228">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35229">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_valid"
              c:identifier="udisks_job_set_progress_valid"
              glib:set-property="progress-valid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35259">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35261">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35262">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rate"
              c:identifier="udisks_job_set_rate"
              glib:set-property="rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35331">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35333">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35334">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_time"
              c:identifier="udisks_job_set_start_time"
              glib:set-property="start-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35366">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35368">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35369">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_started_by_uid"
              c:identifier="udisks_job_set_started_by_uid"
              glib:set-property="started-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35485">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35487">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35488">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bytes"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_bytes"
                getter="get_bytes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35086">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="cancelable"
                writable="1"
                transfer-ownership="none"
                setter="set_cancelable"
                getter="get_cancelable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35144">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expected-end-time"
                writable="1"
                transfer-ownership="none"
                setter="set_expected_end_time"
                getter="get_expected_end_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35117">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="objects"
                writable="1"
                transfer-ownership="none"
                setter="set_objects"
                getter="get_objects">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35126">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="operation"
                writable="1"
                transfer-ownership="none"
                setter="set_operation"
                getter="get_operation"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35059">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35068">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="progress-valid"
                writable="1"
                transfer-ownership="none"
                setter="set_progress_valid"
                getter="get_progress_valid"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35077">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_rate"
                getter="get_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35097">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="start-time"
                writable="1"
                transfer-ownership="none"
                setter="set_start_time"
                getter="get_start_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35108">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="started-by-uid"
                writable="1"
                transfer-ownership="none"
                setter="set_started_by_uid"
                getter="get_started_by_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35135">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="completed" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35038">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35041">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35042">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35014">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_job_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35024">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35017">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35018">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="JobIface"
            c:type="UDisksJobIface"
            glib:is-gtype-struct-for="Job">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34988">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4163"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34990">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="udisks-generated.h" line="4133"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancelable">
        <callback name="get_cancelable">
          <source-position filename="udisks-generated.h" line="4138"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35508">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35502">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_expected_end_time">
        <callback name="get_expected_end_time">
          <source-position filename="udisks-generated.h" line="4140"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35389">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35383">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_objects">
        <callback name="get_objects">
          <source-position filename="udisks-generated.h" line="4142"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35424">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35416">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operation">
        <callback name="get_operation">
          <source-position filename="udisks-generated.h" line="4144"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35165">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35157">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <source-position filename="udisks-generated.h" line="4146"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35216">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35210">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress_valid">
        <callback name="get_progress_valid">
          <source-position filename="udisks-generated.h" line="4148"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35249">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35243">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_start_time">
        <callback name="get_start_time">
          <source-position filename="udisks-generated.h" line="4150"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35356">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35350">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_started_by_uid">
        <callback name="get_started_by_uid">
          <source-position filename="udisks-generated.h" line="4152"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35475">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35469">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="completed">
        <callback name="completed">
          <source-position filename="udisks-generated.h" line="4154"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="arg_success" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bytes">
        <callback name="get_bytes">
          <source-position filename="udisks-generated.h" line="4159"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35282">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35276">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rate">
        <callback name="get_rate">
          <source-position filename="udisks-generated.h" line="4161"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35319">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35313">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="JobProxy"
           c:symbol-prefix="job_proxy"
           c:type="UDisksJobProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksJobProxy"
           glib:get-type="udisks_job_proxy_get_type"
           glib:type-struct="JobProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="35668">The #UDisksJobProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4268"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Job"/>
      <constructor name="new_finish"
                   c:identifier="udisks_job_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36076">Finishes an operation started with udisks_job_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4284"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36083">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36078">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_job_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36166">Finishes an operation started with udisks_job_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4303"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36173">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36168">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_job_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36191">Like udisks_job_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4306"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36206">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36193">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36194">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36195">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36196">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36197">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_job_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36101">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4287"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36116">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36103">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36104">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36105">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36106">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36107">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_job_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36046">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_proxy_new_finish() to get the result of the operation.

See udisks_job_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4276"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36048">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36049">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36050">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36051">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36052">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36053">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36054">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus" c:identifier="udisks_job_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36136">Like udisks_job_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_job_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36138">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36139">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36140">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36141">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36142">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36143">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36144">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobProxyPrivate" c:type="UDisksJobProxyPrivate*"/>
      </field>
    </class>
    <record name="JobProxyClass"
            c:type="UDisksJobProxyClass"
            glib:is-gtype-struct-for="JobProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="35674">Class structure for #UDisksJobProxy.</doc>
      <source-position filename="udisks-generated.h" line="4268"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35676">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="JobProxyPrivate"
            c:type="UDisksJobProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4256"/>
    </record>
    <class name="JobSkeleton"
           c:symbol-prefix="job_skeleton"
           c:type="UDisksJobSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksJobSkeleton"
           glib:get-type="udisks_job_skeleton_get_type"
           glib:type-struct="JobSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36228">The #UDisksJobSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4338"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Job"/>
      <constructor name="new" c:identifier="udisks_job_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36825">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4346"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36830">The skeleton object.</doc>
          <type name="JobSkeleton" c:type="UDisksJob*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobSkeletonPrivate" c:type="UDisksJobSkeletonPrivate*"/>
      </field>
    </class>
    <record name="JobSkeletonClass"
            c:type="UDisksJobSkeletonClass"
            glib:is-gtype-struct-for="JobSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36234">Class structure for #UDisksJobSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4338"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36236">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="JobSkeletonPrivate"
            c:type="UDisksJobSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4326"/>
    </record>
    <function-macro name="LOGICAL_VOLUME"
                    c:identifier="UDISKS_LOGICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5954"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_LOGICAL_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5956"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6325"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6326"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6327"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6395"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6396"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6397"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP" c:identifier="UDISKS_LOOP" introspectable="0">
      <source-position filename="udisks-generated.h" line="3481"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_GET_IFACE"
                    c:identifier="UDISKS_LOOP_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3483"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY"
                    c:identifier="UDISKS_LOOP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3590"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY_CLASS"
                    c:identifier="UDISKS_LOOP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3591"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY_GET_CLASS"
                    c:identifier="UDISKS_LOOP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3592"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON"
                    c:identifier="UDISKS_LOOP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3660"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON_CLASS"
                    c:identifier="UDISKS_LOOP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3661"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_LOOP_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3662"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="LogicalVolume"
               c:symbol-prefix="logical_volume"
               c:type="UDisksLogicalVolume"
               version="2.0.0"
               glib:type-name="UDisksLogicalVolume"
               glib:get-type="udisks_logical_volume_get_type"
               glib:type-struct="LogicalVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49001">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6041"/>
      <function name="interface_info"
                c:identifier="udisks_logical_volume_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48954">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6049"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48959">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_logical_volume_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48969">Overrides all #GObject properties in the #UDisksLogicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6050"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48977">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48971">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48972">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49529">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6001"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49537">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49531">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_block_device"
                      invoker="get_block_device"
                      version="2.7.1"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49972">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_block_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6039"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49982">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49974">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49913">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6003"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49923">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49915">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_data_allocated_ratio"
                      invoker="get_data_allocated_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49662">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6005"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49670">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49664">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata_allocated_ratio"
                      invoker="get_metadata_allocated_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49699">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6007"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49707">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49701">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49470">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6009"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49480">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49472">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_origin"
                      invoker="get_origin"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49854">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_origin() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6011"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49864">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49856">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49625">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6013"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49633">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49627">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_thin_pool"
                      invoker="get_thin_pool"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49795">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_thin_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6015"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49805">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49797">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_"
                      invoker="get_type_"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49736">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6017"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49746">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49738">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49566">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6019"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49576">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49568">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_volume_group"
                      invoker="get_volume_group"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49411">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6021"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49421">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49413">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_activate">
        <source-position filename="udisks-generated.h" line="5967"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_attach">
        <source-position filename="udisks-generated.h" line="6023"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_detach">
        <source-position filename="udisks-generated.h" line="6034"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_split">
        <source-position filename="udisks-generated.h" line="6029"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_snapshot">
        <source-position filename="udisks-generated.h" line="5972"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_deactivate">
        <source-position filename="udisks-generated.h" line="5979"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="5984"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rename">
        <source-position filename="udisks-generated.h" line="5989"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="5995"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_activate"
              c:identifier="udisks_logical_volume_call_activate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50031">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_activate_finish() to get the result of the operation.

See udisks_logical_volume_call_activate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6096"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50033">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50034">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50035">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50036">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50037">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_finish"
              c:identifier="udisks_logical_volume_call_activate_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50066">Finishes an operation started with udisks_logical_volume_call_activate().</doc>
        <source-position filename="udisks-generated.h" line="6103"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50075">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50068">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50069">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50070">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_activate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_sync"
              c:identifier="udisks_logical_volume_call_activate_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50098">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_activate() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6109"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50110">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50100">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50101">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50102">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50103">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach"
              c:identifier="udisks_logical_volume_call_cache_attach"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50697">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_attach_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_attach_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50699">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50700">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50701">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50702">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50703">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50704">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach_finish"
              c:identifier="udisks_logical_volume_call_cache_attach_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50735">Finishes an operation started with udisks_logical_volume_call_cache_attach().</doc>
        <source-position filename="udisks-generated.h" line="6226"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50743">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50737">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50738">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_attach().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach_sync"
              c:identifier="udisks_logical_volume_call_cache_attach_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50764">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_attach() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6231"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50776">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50766">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50767">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50768">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50769">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach"
              c:identifier="udisks_logical_volume_call_cache_detach"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50911">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_detach_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_detach_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50913">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50914">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50915">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50916">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50917">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach_finish"
              c:identifier="udisks_logical_volume_call_cache_detach_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50946">Finishes an operation started with udisks_logical_volume_call_cache_detach().</doc>
        <source-position filename="udisks-generated.h" line="6263"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50954">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50948">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50949">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_detach().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach_sync"
              c:identifier="udisks_logical_volume_call_cache_detach_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50975">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_detach() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6268"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50986">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50977">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50978">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50979">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split"
              c:identifier="udisks_logical_volume_call_cache_split"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50807">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_split_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_split_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50809">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50810">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50811">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50812">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50813">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split_finish"
              c:identifier="udisks_logical_volume_call_cache_split_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50842">Finishes an operation started with udisks_logical_volume_call_cache_split().</doc>
        <source-position filename="udisks-generated.h" line="6245"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50850">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50844">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50845">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_split().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split_sync"
              c:identifier="udisks_logical_volume_call_cache_split_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50871">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_split() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6250"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50882">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50873">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50874">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50875">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot"
              c:identifier="udisks_logical_volume_call_create_snapshot"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50575">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_create_snapshot_finish() to get the result of the operation.

See udisks_logical_volume_call_create_snapshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50577">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50578">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50579">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50580">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50581">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50582">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50583">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_finish"
              c:identifier="udisks_logical_volume_call_create_snapshot_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50616">Finishes an operation started with udisks_logical_volume_call_create_snapshot().</doc>
        <source-position filename="udisks-generated.h" line="6203"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50625">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50618">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50619">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50620">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_create_snapshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_sync"
              c:identifier="udisks_logical_volume_call_create_snapshot_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50648">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_create_snapshot() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6209"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50662">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50650">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50651">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50652">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50653">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50654">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50655">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate"
              c:identifier="udisks_logical_volume_call_deactivate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50141">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_deactivate_finish() to get the result of the operation.

See udisks_logical_volume_call_deactivate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50143">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50144">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50145">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50146">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50147">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate_finish"
              c:identifier="udisks_logical_volume_call_deactivate_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50176">Finishes an operation started with udisks_logical_volume_call_deactivate().</doc>
        <source-position filename="udisks-generated.h" line="6123"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50184">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50178">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50179">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_deactivate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate_sync"
              c:identifier="udisks_logical_volume_call_deactivate_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50205">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_deactivate() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6128"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50216">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50207">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50208">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50209">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_logical_volume_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50245">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_delete_finish() to get the result of the operation.

See udisks_logical_volume_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50247">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50248">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50249">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50250">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50251">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_logical_volume_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50280">Finishes an operation started with udisks_logical_volume_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="6141"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50288">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50282">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50283">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_logical_volume_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50309">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6146"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50320">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50311">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50312">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50313">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename"
              c:identifier="udisks_logical_volume_call_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50349">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_rename_finish() to get the result of the operation.

See udisks_logical_volume_call_rename_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50351">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50352">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50353">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50354">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50355">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50356">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_finish"
              c:identifier="udisks_logical_volume_call_rename_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50387">Finishes an operation started with udisks_logical_volume_call_rename().</doc>
        <source-position filename="udisks-generated.h" line="6160"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50396">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50389">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50390">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50391">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_rename().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_sync"
              c:identifier="udisks_logical_volume_call_rename_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50419">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_rename() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6166"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50432">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50421">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50422">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50423">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50424">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50425">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_logical_volume_call_resize"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50465">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_resize_finish() to get the result of the operation.

See udisks_logical_volume_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50467">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50468">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50469">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50470">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50471">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50472">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_logical_volume_call_resize_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50503">Finishes an operation started with udisks_logical_volume_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="6182"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50511">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50505">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50506">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_logical_volume_call_resize_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50532">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6187"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50544">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50534">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50535">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50536">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50537">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_activate"
              c:identifier="udisks_logical_volume_complete_activate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51015">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6054"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51017">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51018">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51019">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_attach"
              c:identifier="udisks_logical_volume_complete_cache_attach"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51144">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6081"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51146">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51147">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_detach"
              c:identifier="udisks_logical_volume_complete_cache_detach"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51184">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6089"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51186">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51187">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_split"
              c:identifier="udisks_logical_volume_complete_cache_split"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51164">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6085"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51166">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51167">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_snapshot"
              c:identifier="udisks_logical_volume_complete_create_snapshot"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51121">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6076"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51123">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51124">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51125">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_deactivate"
              c:identifier="udisks_logical_volume_complete_deactivate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51038">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6059"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51040">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51041">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_logical_volume_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51058">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6063"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51060">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51061">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rename"
              c:identifier="udisks_logical_volume_complete_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51078">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6067"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51080">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51081">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51082">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_logical_volume_complete_resize"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51101">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6072"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51103">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51104">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_block_device"
              c:identifier="udisks_logical_volume_dup_block_device"
              version="2.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49994">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6318"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50002">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49996">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_logical_volume_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49935">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6314"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49943">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49937">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_logical_volume_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49492">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6282"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49500">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49494">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_origin"
              c:identifier="udisks_logical_volume_dup_origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49876">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6310"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49884">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49878">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_thin_pool"
              c:identifier="udisks_logical_volume_dup_thin_pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49817">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6306"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49825">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49819">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_logical_volume_dup_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49758">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6302"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49766">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49760">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_logical_volume_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49588">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6289"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49596">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49590">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_volume_group"
              c:identifier="udisks_logical_volume_dup_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49433">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6278"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49441">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49435">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_logical_volume_get_active"
              glib:get-property="active"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49529">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49537">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49531">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_device"
              c:identifier="udisks_logical_volume_get_block_device"
              glib:get-property="block-device"
              version="2.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49972">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_block_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6317"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49982">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49974">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_logical_volume_get_child_configuration"
              glib:get-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49913">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6313"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49923">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49915">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data_allocated_ratio"
              c:identifier="udisks_logical_volume_get_data_allocated_ratio"
              glib:get-property="data-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49662">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6295"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49670">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49664">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_allocated_ratio"
              c:identifier="udisks_logical_volume_get_metadata_allocated_ratio"
              glib:get-property="metadata-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49699">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49707">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49701">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_logical_volume_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49470">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6281"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49480">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49472">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_origin"
              c:identifier="udisks_logical_volume_get_origin"
              glib:get-property="origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49854">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_origin() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6309"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49864">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49856">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_logical_volume_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49625">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49633">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49627">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thin_pool"
              c:identifier="udisks_logical_volume_get_thin_pool"
              glib:get-property="thin-pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49795">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_thin_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6305"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49805">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49797">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_logical_volume_get_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49736">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6301"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49746">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49738">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_logical_volume_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49566">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6288"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49576">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49568">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_logical_volume_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49411">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6277"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49421">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49413">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_logical_volume_set_active"
              glib:set-property="active"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49549">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49551">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49552">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_device"
              c:identifier="udisks_logical_volume_set_block_device"
              glib:set-property="block-device"
              version="2.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50014">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6319"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50016">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50017">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_logical_volume_set_child_configuration"
              glib:set-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49955">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6315"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49957">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49958">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_allocated_ratio"
              c:identifier="udisks_logical_volume_set_data_allocated_ratio"
              glib:set-property="data-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49682">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6296"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49684">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49685">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_allocated_ratio"
              c:identifier="udisks_logical_volume_set_metadata_allocated_ratio"
              glib:set-property="metadata-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49719">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49721">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49722">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_logical_volume_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49512">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49514">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49515">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_origin"
              c:identifier="udisks_logical_volume_set_origin"
              glib:set-property="origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49896">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6311"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49898">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49899">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_logical_volume_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49645">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49647">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49648">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thin_pool"
              c:identifier="udisks_logical_volume_set_thin_pool"
              glib:set-property="thin-pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49837">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6307"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49839">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49840">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_logical_volume_set_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49778">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6303"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49780">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49781">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_logical_volume_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49608">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49610">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49611">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_logical_volume_set_volume_group"
              glib:set-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49453">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49455">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49456">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49299">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="block-device"
                version="2.7.1"
                writable="1"
                transfer-ownership="none"
                setter="set_block_device"
                getter="get_block_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49398">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49387">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="data-allocated-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_data_allocated_ratio"
                getter="get_data_allocated_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49332">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="metadata-allocated-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata_allocated_ratio"
                getter="get_metadata_allocated_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49343">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49288">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="origin"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_origin"
                getter="get_origin"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49376">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49321">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="thin-pool"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_thin_pool"
                getter="get_thin_pool"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49365">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49354">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49310">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_volume_group"
                getter="get_volume_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49277">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-activate" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49046">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_activate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49056">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49049">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49050">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-attach" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49200">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_attach() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49211">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49203">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49204">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49205">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-detach" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49251">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_detach() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49261">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49254">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49255">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-split" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49226">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_split() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49236">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49229">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49230">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-snapshot" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49173">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_create_snapshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49185">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49176">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49177">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49178">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49179">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-deactivate" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49071">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_deactivate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49081">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49074">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49075">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49096">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49106">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49099">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49100">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rename" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49121">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_rename() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49132">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49124">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49125">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49126">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49147">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49158">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49150">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49151">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49152">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LogicalVolumeIface"
            c:type="UDisksLogicalVolumeIface"
            glib:is-gtype-struct-for="LogicalVolume"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49009">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6041"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49011">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_activate">
        <callback name="handle_activate">
          <source-position filename="udisks-generated.h" line="5967"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_snapshot">
        <callback name="handle_create_snapshot">
          <source-position filename="udisks-generated.h" line="5972"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_deactivate">
        <callback name="handle_deactivate">
          <source-position filename="udisks-generated.h" line="5979"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="5984"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rename">
        <callback name="handle_rename">
          <source-position filename="udisks-generated.h" line="5989"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="5995"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <source-position filename="udisks-generated.h" line="6001"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49537">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49531">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="6003"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49923">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49915">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data_allocated_ratio">
        <callback name="get_data_allocated_ratio">
          <source-position filename="udisks-generated.h" line="6005"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49670">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49664">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata_allocated_ratio">
        <callback name="get_metadata_allocated_ratio">
          <source-position filename="udisks-generated.h" line="6007"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49707">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49701">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="6009"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49480">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49472">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_origin">
        <callback name="get_origin">
          <source-position filename="udisks-generated.h" line="6011"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49864">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49856">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="6013"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49633">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49627">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_thin_pool">
        <callback name="get_thin_pool">
          <source-position filename="udisks-generated.h" line="6015"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49805">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49797">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="6017"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49746">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49738">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="6019"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49576">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49568">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_volume_group">
        <callback name="get_volume_group">
          <source-position filename="udisks-generated.h" line="6021"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49421">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49413">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_attach">
        <callback name="handle_cache_attach">
          <source-position filename="udisks-generated.h" line="6023"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_cache_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_split">
        <callback name="handle_cache_split">
          <source-position filename="udisks-generated.h" line="6029"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_detach">
        <callback name="handle_cache_detach">
          <source-position filename="udisks-generated.h" line="6034"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_block_device">
        <callback name="get_block_device">
          <source-position filename="udisks-generated.h" line="6039"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49982">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="49974">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LogicalVolumeProxy"
           c:symbol-prefix="logical_volume_proxy"
           c:type="UDisksLogicalVolumeProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLogicalVolumeProxy"
           glib:get-type="udisks_logical_volume_proxy_get_type"
           glib:type-struct="LogicalVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="51206">The #UDisksLogicalVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6345"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="LogicalVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_logical_volume_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51646">Finishes an operation started with udisks_logical_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6361"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51653">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51648">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_logical_volume_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51742">Finishes an operation started with udisks_logical_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6380"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51749">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51744">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_logical_volume_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51769">Like udisks_logical_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_logical_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6383"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51784">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51771">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51772">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51773">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51774">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51775">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_logical_volume_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51673">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_logical_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6364"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51688">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51675">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51676">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51677">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51678">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51679">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_logical_volume_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51614">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_proxy_new_finish() to get the result of the operation.

See udisks_logical_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6353"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51616">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51617">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51618">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51619">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51620">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51621">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51622">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_logical_volume_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51710">Like udisks_logical_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_logical_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6372"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51712">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51713">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51714">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51715">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51716">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51717">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51718">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LogicalVolumeProxyPrivate"
              c:type="UDisksLogicalVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="LogicalVolumeProxyClass"
            c:type="UDisksLogicalVolumeProxyClass"
            glib:is-gtype-struct-for="LogicalVolumeProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="51214">Class structure for #UDisksLogicalVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="6345"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51216">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LogicalVolumeProxyPrivate"
            c:type="UDisksLogicalVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6333"/>
    </record>
    <class name="LogicalVolumeSkeleton"
           c:symbol-prefix="logical_volume_skeleton"
           c:type="UDisksLogicalVolumeSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLogicalVolumeSkeleton"
           glib:get-type="udisks_logical_volume_skeleton_get_type"
           glib:type-struct="LogicalVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="51808">The #UDisksLogicalVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6415"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="LogicalVolume"/>
      <constructor name="new"
                   c:identifier="udisks_logical_volume_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52408">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6423"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52413">The skeleton object.</doc>
          <type name="LogicalVolumeSkeleton" c:type="UDisksLogicalVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LogicalVolumeSkeletonPrivate"
              c:type="UDisksLogicalVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LogicalVolumeSkeletonClass"
            c:type="UDisksLogicalVolumeSkeletonClass"
            glib:is-gtype-struct-for="LogicalVolumeSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="51816">Class structure for #UDisksLogicalVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6415"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51818">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LogicalVolumeSkeletonPrivate"
            c:type="UDisksLogicalVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6403"/>
    </record>
    <interface name="Loop"
               c:symbol-prefix="loop"
               c:type="UDisksLoop"
               glib:type-name="UDisksLoop"
               glib:get-type="udisks_loop_get_type"
               glib:type-struct="LoopIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29401">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3511"/>
      <function name="interface_info"
                c:identifier="udisks_loop_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29367">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29372">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_loop_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29380">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3520"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29388">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29382">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29383">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_autoclear"
                      invoker="get_autoclear"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29556">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3505"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29564">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29558">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backing_file"
                      invoker="get_backing_file"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29503">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3507"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29513">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29505">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_setup_by_uid"
                      invoker="get_setup_by_uid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29589">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3509"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29597">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29591">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="3494"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_autoclear">
        <source-position filename="udisks-generated.h" line="3499"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_loop_call_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29622">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_call_delete_finish() to get the result of the operation.

See udisks_loop_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3535"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29624">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29625">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29626">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29627">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29628">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_loop_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29655">Finishes an operation started with udisks_loop_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="3542"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29663">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29657">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29658">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_loop_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29682">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3547"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29693">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29684">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29685">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29686">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear"
              c:identifier="udisks_loop_call_set_autoclear">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29720">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_call_set_autoclear_finish() to get the result of the operation.

See udisks_loop_call_set_autoclear_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3553"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29722">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29723">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29724">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29725">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29726">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29727">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_finish"
              c:identifier="udisks_loop_call_set_autoclear_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29756">Finishes an operation started with udisks_loop_call_set_autoclear().</doc>
        <source-position filename="udisks-generated.h" line="3561"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29764">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29758">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29759">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_set_autoclear().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_sync"
              c:identifier="udisks_loop_call_set_autoclear_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29783">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_set_autoclear() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3566"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29795">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29785">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29786">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29787">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29788">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_loop_complete_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29824">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3524"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29826">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29827">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_autoclear"
              c:identifier="udisks_loop_complete_set_autoclear">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29842">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3528"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29844">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29845">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_backing_file"
              c:identifier="udisks_loop_dup_backing_file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29523">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3577"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29531">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29525">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoclear"
              c:identifier="udisks_loop_get_autoclear"
              glib:get-property="autoclear"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29556">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3580"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29564">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29558">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backing_file"
              c:identifier="udisks_loop_get_backing_file"
              glib:get-property="backing-file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29503">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3576"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29513">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29505">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setup_by_uid"
              c:identifier="udisks_loop_get_setup_by_uid"
              glib:get-property="setup-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29589">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3583"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29597">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29591">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autoclear"
              c:identifier="udisks_loop_set_autoclear"
              glib:set-property="autoclear"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29574">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3581"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29576">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29577">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backing_file"
              c:identifier="udisks_loop_set_backing_file"
              glib:set-property="backing-file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29541">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3578"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29543">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29544">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_setup_by_uid"
              c:identifier="udisks_loop_set_setup_by_uid"
              glib:set-property="setup-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29607">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3584"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29609">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29610">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="autoclear"
                writable="1"
                transfer-ownership="none"
                setter="set_autoclear"
                getter="get_autoclear"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29483">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="backing-file"
                writable="1"
                transfer-ownership="none"
                setter="set_backing_file"
                getter="get_backing_file"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29474">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="setup-by-uid"
                writable="1"
                transfer-ownership="none"
                setter="set_setup_by_uid"
                getter="get_setup_by_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29492">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29426">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29436">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29429">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29430">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-autoclear" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29449">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_set_autoclear() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29460">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29452">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29453">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29454">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LoopIface"
            c:type="UDisksLoopIface"
            glib:is-gtype-struct-for="Loop">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29407">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3511"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29409">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="3494"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_autoclear">
        <callback name="handle_set_autoclear">
          <source-position filename="udisks-generated.h" line="3499"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_autoclear">
        <callback name="get_autoclear">
          <source-position filename="udisks-generated.h" line="3505"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29564">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="29558">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backing_file">
        <callback name="get_backing_file">
          <source-position filename="udisks-generated.h" line="3507"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29513">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="29505">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_setup_by_uid">
        <callback name="get_setup_by_uid">
          <source-position filename="udisks-generated.h" line="3509"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29597">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="29591">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LoopProxy"
           c:symbol-prefix="loop_proxy"
           c:type="UDisksLoopProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLoopProxy"
           glib:get-type="udisks_loop_proxy_get_type"
           glib:type-struct="LoopProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29862">The #UDisksLoopProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3610"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Loop"/>
      <constructor name="new_finish"
                   c:identifier="udisks_loop_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30154">Finishes an operation started with udisks_loop_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3626"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30161">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30156">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_loop_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30244">Finishes an operation started with udisks_loop_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3645"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30251">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30246">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_loop_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30269">Like udisks_loop_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3648"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30284">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30271">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30272">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30273">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30274">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30275">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_loop_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30179">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3629"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30194">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30181">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30182">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30183">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30184">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30185">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_loop_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30124">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_proxy_new_finish() to get the result of the operation.

See udisks_loop_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3618"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30126">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30127">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30128">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30129">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30130">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30131">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30132">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_loop_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30214">Like udisks_loop_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_loop_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3637"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30216">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30217">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30218">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30219">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30220">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30221">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30222">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopProxyPrivate" c:type="UDisksLoopProxyPrivate*"/>
      </field>
    </class>
    <record name="LoopProxyClass"
            c:type="UDisksLoopProxyClass"
            glib:is-gtype-struct-for="LoopProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29868">Class structure for #UDisksLoopProxy.</doc>
      <source-position filename="udisks-generated.h" line="3610"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29870">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LoopProxyPrivate"
            c:type="UDisksLoopProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3598"/>
    </record>
    <class name="LoopSkeleton"
           c:symbol-prefix="loop_skeleton"
           c:type="UDisksLoopSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLoopSkeleton"
           glib:get-type="udisks_loop_skeleton_get_type"
           glib:type-struct="LoopSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30306">The #UDisksLoopSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3680"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Loop"/>
      <constructor name="new" c:identifier="udisks_loop_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30785">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3688"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30790">The skeleton object.</doc>
          <type name="LoopSkeleton" c:type="UDisksLoop*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopSkeletonPrivate" c:type="UDisksLoopSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LoopSkeletonClass"
            c:type="UDisksLoopSkeletonClass"
            glib:is-gtype-struct-for="LoopSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30312">Class structure for #UDisksLoopSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3680"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30314">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LoopSkeletonPrivate"
            c:type="UDisksLoopSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3668"/>
    </record>
    <constant name="MAJOR_VERSION" value="2" c:type="UDISKS_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="32">The major version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="37"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MANAGER"
                    c:identifier="UDISKS_MANAGER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS"
                    c:identifier="UDISKS_MANAGER_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4353"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_BTRFS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4355"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4425"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4426"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4427"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4495"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4496"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4497"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2"
                    c:identifier="UDISKS_MANAGER_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4972"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_LVM2_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4974"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5041"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5042"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5043"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5111"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5112"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5113"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY"
                    c:identifier="UDISKS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="403"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON"
                    c:identifier="UDISKS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="472"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="473"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="474"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID"
                    c:identifier="UDISKS_MDRAID"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3695"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_GET_IFACE"
                    c:identifier="UDISKS_MDRAID_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3697"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY"
                    c:identifier="UDISKS_MDRAID_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4014"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY_CLASS"
                    c:identifier="UDISKS_MDRAID_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4015"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MDRAID_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4016"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON"
                    c:identifier="UDISKS_MDRAID_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4084"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON_CLASS"
                    c:identifier="UDISKS_MDRAID_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4085"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MDRAID_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4086"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="MDRaid"
               c:symbol-prefix="mdraid"
               c:type="UDisksMDRaid"
               version="2.0.0"
               glib:type-name="UDisksMDRaid"
               glib:get-type="udisks_mdraid_get_type"
               glib:type-struct="MDRaidIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31377">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3777"/>
      <function name="interface_info"
                c:identifier="udisks_mdraid_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31327">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3785"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31332">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_mdraid_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31342">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3786"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31350">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31344">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31345">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active_devices"
                      invoker="get_active_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32324">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3747"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32334">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32326">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bitmap_location"
                      invoker="get_bitmap_location"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32228">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3749"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32238">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32230">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32383">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3751"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32393">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32385">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_chunk_size"
                      invoker="get_chunk_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32287">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3753"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32295">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32289">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_degraded"
                      invoker="get_degraded"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32191">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3755"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32199">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32193">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_level"
                      invoker="get_level"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31888">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3757"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31898">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31890">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31829">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3759"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31839">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31831">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31947">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3761"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31955">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31949">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_running"
                      invoker="get_running"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32442">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3763"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32450">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32444">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31984">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3765"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31992">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31986">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_action"
                      invoker="get_sync_action"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32021">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3767"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32031">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32023">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_completed"
                      invoker="get_sync_completed"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32080">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3769"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32088">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32082">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_rate"
                      invoker="get_sync_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32117">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3771"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32125">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32119">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_remaining_time"
                      invoker="get_sync_remaining_time"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32154">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3773"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32162">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32156">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31770">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3775"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31780">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31772">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="3708"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="3714"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="3719"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_request_sync_action">
        <source-position filename="udisks-generated.h" line="3725"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_bitmap_location">
        <source-position filename="udisks-generated.h" line="3731"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <source-position filename="udisks-generated.h" line="3737"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <source-position filename="udisks-generated.h" line="3742"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_mdraid_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32797">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_add_device_finish() to get the result of the operation.

See udisks_mdraid_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3877"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32799">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32800">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32801">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32802">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32803">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32804">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_mdraid_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32835">Finishes an operation started with udisks_mdraid_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="3885"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32843">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32837">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32838">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_mdraid_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32864">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3890"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32876">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32866">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32867">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32868">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32869">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_mdraid_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33127">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_delete_finish() to get the result of the operation.

See udisks_mdraid_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3937"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33129">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33130">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33131">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33132">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33133">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_mdraid_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33162">Finishes an operation started with udisks_mdraid_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="3944"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33170">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33164">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33165">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_mdraid_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33191">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3949"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33202">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33193">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33194">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33195">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_mdraid_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32687">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_remove_device_finish() to get the result of the operation.

See udisks_mdraid_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3857"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32689">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32690">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32691">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32692">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32693">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32694">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_mdraid_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32725">Finishes an operation started with udisks_mdraid_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="3865"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32733">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32727">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32728">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_mdraid_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32754">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3870"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32766">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32756">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32757">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32758">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32759">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action"
              c:identifier="udisks_mdraid_call_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33017">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_request_sync_action_finish() to get the result of the operation.

See udisks_mdraid_call_request_sync_action_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3917"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33019">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33020">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33021">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33022">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33023">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33024">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_finish"
              c:identifier="udisks_mdraid_call_request_sync_action_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33055">Finishes an operation started with udisks_mdraid_call_request_sync_action().</doc>
        <source-position filename="udisks-generated.h" line="3925"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33063">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33057">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33058">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_request_sync_action().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_sync"
              c:identifier="udisks_mdraid_call_request_sync_action_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33084">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_request_sync_action() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3930"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33096">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33086">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33087">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33088">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33089">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location"
              c:identifier="udisks_mdraid_call_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32907">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_set_bitmap_location_finish() to get the result of the operation.

See udisks_mdraid_call_set_bitmap_location_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3897"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32909">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32910">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32911">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32912">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32913">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32914">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_finish"
              c:identifier="udisks_mdraid_call_set_bitmap_location_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32945">Finishes an operation started with udisks_mdraid_call_set_bitmap_location().</doc>
        <source-position filename="udisks-generated.h" line="3905"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32953">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32947">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32948">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_set_bitmap_location().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_sync"
              c:identifier="udisks_mdraid_call_set_bitmap_location_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32974">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_set_bitmap_location() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3910"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32986">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32976">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32977">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32978">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32979">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start"
              c:identifier="udisks_mdraid_call_start"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32479">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_start_finish() to get the result of the operation.

See udisks_mdraid_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3821"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32481">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32482">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32483">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32484">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32485">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_mdraid_call_start_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32514">Finishes an operation started with udisks_mdraid_call_start().</doc>
        <source-position filename="udisks-generated.h" line="3828"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32522">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32516">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32517">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_mdraid_call_start_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32543">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3833"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32554">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32545">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32546">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32547">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop"
              c:identifier="udisks_mdraid_call_stop"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32583">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_stop_finish() to get the result of the operation.

See udisks_mdraid_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3839"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32585">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32586">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32587">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32588">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32589">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_mdraid_call_stop_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32618">Finishes an operation started with udisks_mdraid_call_stop().</doc>
        <source-position filename="udisks-generated.h" line="3846"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32626">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32620">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32621">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_mdraid_call_stop_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32647">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_stop() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3851"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32658">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32649">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32650">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32651">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_mdraid_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33291">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3802"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33293">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33294">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_mdraid_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33351">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3814"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33353">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33354">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_mdraid_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33271">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3798"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33273">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33274">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_request_sync_action"
              c:identifier="udisks_mdraid_complete_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33331">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3810"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33333">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33334">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_bitmap_location"
              c:identifier="udisks_mdraid_complete_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33311">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3806"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33313">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33314">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_mdraid_complete_start"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33231">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3790"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33233">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33234">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_mdraid_complete_stop"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33251">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3794"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33253">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33254">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_active_devices"
              c:identifier="udisks_mdraid_dup_active_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32346">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4000"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32354">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32348">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_bitmap_location"
              c:identifier="udisks_mdraid_dup_bitmap_location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32250">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3993"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32258">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32252">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_mdraid_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32405">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4004"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32413">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32407">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_level"
              c:identifier="udisks_mdraid_dup_level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31910">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3967"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31918">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31912">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_mdraid_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31851">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3963"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31859">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31853">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sync_action"
              c:identifier="udisks_mdraid_dup_sync_action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32043">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3977"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32051">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32045">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_mdraid_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31792">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3959"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31800">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31794">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_devices"
              c:identifier="udisks_mdraid_get_active_devices"
              glib:get-property="active-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32324">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3999"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32334">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32326">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bitmap_location"
              c:identifier="udisks_mdraid_get_bitmap_location"
              glib:get-property="bitmap-location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32228">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3992"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32238">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32230">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_mdraid_get_child_configuration"
              glib:get-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32383">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4003"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32393">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32385">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk_size"
              c:identifier="udisks_mdraid_get_chunk_size"
              glib:get-property="chunk-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32287">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3996"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32295">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32289">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_degraded"
              c:identifier="udisks_mdraid_get_degraded"
              glib:get-property="degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32191">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3989"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32199">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32193">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="udisks_mdraid_get_level"
              glib:get-property="level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31888">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3966"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31898">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31890">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_mdraid_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31829">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3962"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31839">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31831">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_mdraid_get_num_devices"
              glib:get-property="num-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31947">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3970"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31955">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31949">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running"
              c:identifier="udisks_mdraid_get_running"
              glib:get-property="running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32442">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4007"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32450">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32444">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_mdraid_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31984">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3973"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31992">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31986">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_action"
              c:identifier="udisks_mdraid_get_sync_action"
              glib:get-property="sync-action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32021">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3976"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32031">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32023">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_completed"
              c:identifier="udisks_mdraid_get_sync_completed"
              glib:get-property="sync-completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32080">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3980"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32088">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32082">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_rate"
              c:identifier="udisks_mdraid_get_sync_rate"
              glib:get-property="sync-rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32117">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3983"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32125">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32119">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_remaining_time"
              c:identifier="udisks_mdraid_get_sync_remaining_time"
              glib:get-property="sync-remaining-time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32154">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3986"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32162">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32156">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_mdraid_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31770">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3958"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31780">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31772">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active_devices"
              c:identifier="udisks_mdraid_set_active_devices"
              glib:set-property="active-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32366">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4001"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32368">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32369">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bitmap_location"
              c:identifier="udisks_mdraid_set_bitmap_location"
              glib:set-property="bitmap-location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32270">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3994"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32272">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32273">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_mdraid_set_child_configuration"
              glib:set-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32425">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4005"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32427">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32428">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chunk_size"
              c:identifier="udisks_mdraid_set_chunk_size"
              glib:set-property="chunk-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32307">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3997"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32309">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32310">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_degraded"
              c:identifier="udisks_mdraid_set_degraded"
              glib:set-property="degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32211">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3990"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32213">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32214">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_level"
              c:identifier="udisks_mdraid_set_level"
              glib:set-property="level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31930">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3968"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31932">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31933">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_mdraid_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31871">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3964"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31873">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31874">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_mdraid_set_num_devices"
              glib:set-property="num-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31967">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3971"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31969">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31970">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_running"
              c:identifier="udisks_mdraid_set_running"
              glib:set-property="running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32462">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4008"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32464">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32465">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_mdraid_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32004">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3974"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32006">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32007">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_action"
              c:identifier="udisks_mdraid_set_sync_action"
              glib:set-property="sync-action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32063">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3978"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32065">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32066">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_completed"
              c:identifier="udisks_mdraid_set_sync_completed"
              glib:set-property="sync-completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32100">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3981"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32102">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32103">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_rate"
              c:identifier="udisks_mdraid_set_sync_rate"
              glib:set-property="sync-rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32137">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3984"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32139">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32140">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_remaining_time"
              c:identifier="udisks_mdraid_set_sync_remaining_time"
              glib:set-property="sync-remaining-time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32174">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3987"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32176">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32177">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_mdraid_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31812">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3960"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31814">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31815">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_active_devices"
                getter="get_active_devices">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31735">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="bitmap-location"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_bitmap_location"
                getter="get_bitmap_location"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31713">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31746">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="chunk-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_chunk_size"
                getter="get_chunk_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31724">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="degraded"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_degraded"
                getter="get_degraded"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31702">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="level"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_level"
                getter="get_level"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31625">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31614">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_num_devices"
                getter="get_num_devices"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31636">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="running"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_running"
                getter="get_running"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31757">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31647">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-action"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_action"
                getter="get_sync_action"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31658">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sync-completed"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_completed"
                getter="get_sync_completed"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31669">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sync-rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_rate"
                getter="get_sync_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31680">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-remaining-time"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_remaining_time"
                getter="get_sync_remaining_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31691">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31603">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31499">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31510">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31502">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31503">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31504">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31577">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31587">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31580">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31581">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31473">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31484">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31476">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31477">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31478">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-request-sync-action"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31551">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_request_sync_action() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31562">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31554">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31555">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31556">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-bitmap-location"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31525">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_set_bitmap_location() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31536">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31528">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31529">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31530">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31423">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31433">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31426">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31427">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31448">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31458">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31451">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31452">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MDRaidIface"
            c:type="UDisksMDRaidIface"
            glib:is-gtype-struct-for="MDRaid"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31385">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3777"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31387">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="3708"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="3714"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="3719"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_request_sync_action">
        <callback name="handle_request_sync_action">
          <source-position filename="udisks-generated.h" line="3725"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_sync_action" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_bitmap_location">
        <callback name="handle_set_bitmap_location">
          <source-position filename="udisks-generated.h" line="3731"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <source-position filename="udisks-generated.h" line="3737"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <source-position filename="udisks-generated.h" line="3742"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_devices">
        <callback name="get_active_devices">
          <source-position filename="udisks-generated.h" line="3747"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32334">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32326">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bitmap_location">
        <callback name="get_bitmap_location">
          <source-position filename="udisks-generated.h" line="3749"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32238">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32230">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="3751"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32393">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32385">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chunk_size">
        <callback name="get_chunk_size">
          <source-position filename="udisks-generated.h" line="3753"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32295">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32289">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_degraded">
        <callback name="get_degraded">
          <source-position filename="udisks-generated.h" line="3755"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32199">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32193">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_level">
        <callback name="get_level">
          <source-position filename="udisks-generated.h" line="3757"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31898">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31890">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="3759"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31839">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31831">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <source-position filename="udisks-generated.h" line="3761"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31955">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31949">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_running">
        <callback name="get_running">
          <source-position filename="udisks-generated.h" line="3763"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32450">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32444">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="3765"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31992">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31986">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_action">
        <callback name="get_sync_action">
          <source-position filename="udisks-generated.h" line="3767"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32031">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32023">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_completed">
        <callback name="get_sync_completed">
          <source-position filename="udisks-generated.h" line="3769"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32088">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32082">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_rate">
        <callback name="get_sync_rate">
          <source-position filename="udisks-generated.h" line="3771"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32125">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32119">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_remaining_time">
        <callback name="get_sync_remaining_time">
          <source-position filename="udisks-generated.h" line="3773"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32162">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32156">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="3775"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31780">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="31772">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MDRaidProxy"
           c:symbol-prefix="mdraid_proxy"
           c:type="UDisksMDRaidProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksMDRaidProxy"
           glib:get-type="udisks_mdraid_proxy_get_type"
           glib:type-struct="MDRaidProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33373">The #UDisksMDRaidProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4034"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="MDRaid"/>
      <constructor name="new_finish"
                   c:identifier="udisks_mdraid_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33859">Finishes an operation started with udisks_mdraid_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4050"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33866">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33861">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33955">Finishes an operation started with udisks_mdraid_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4069"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33962">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33957">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33982">Like udisks_mdraid_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4072"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33997">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33984">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33985">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33986">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33987">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33988">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_mdraid_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33886">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4053"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33901">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33888">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33889">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33890">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33891">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33892">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_mdraid_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33827">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_proxy_new_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4042"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33829">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33830">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33831">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33832">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33833">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33834">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33835">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_mdraid_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33923">Like udisks_mdraid_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4061"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33925">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33926">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33927">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33928">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33929">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33930">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33931">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidProxyPrivate" c:type="UDisksMDRaidProxyPrivate*"/>
      </field>
    </class>
    <record name="MDRaidProxyClass"
            c:type="UDisksMDRaidProxyClass"
            glib:is-gtype-struct-for="MDRaidProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33381">Class structure for #UDisksMDRaidProxy.</doc>
      <source-position filename="udisks-generated.h" line="4034"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33383">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="MDRaidProxyPrivate"
            c:type="UDisksMDRaidProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4022"/>
    </record>
    <class name="MDRaidSkeleton"
           c:symbol-prefix="mdraid_skeleton"
           c:type="UDisksMDRaidSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksMDRaidSkeleton"
           glib:get-type="udisks_mdraid_skeleton_get_type"
           glib:type-struct="MDRaidSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34021">The #UDisksMDRaidSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4104"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="MDRaid"/>
      <constructor name="new"
                   c:identifier="udisks_mdraid_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34660">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34665">The skeleton object.</doc>
          <type name="MDRaidSkeleton" c:type="UDisksMDRaid*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidSkeletonPrivate"
              c:type="UDisksMDRaidSkeletonPrivate*"/>
      </field>
    </class>
    <record name="MDRaidSkeletonClass"
            c:type="UDisksMDRaidSkeletonClass"
            glib:is-gtype-struct-for="MDRaidSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34029">Class structure for #UDisksMDRaidSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4104"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34031">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="MDRaidSkeletonPrivate"
            c:type="UDisksMDRaidSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4092"/>
    </record>
    <constant name="MICRO_VERSION" value="4" c:type="UDISKS_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="46">The micro version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="9" c:type="UDISKS_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="39">The minor version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="44"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="UDisksManager"
               glib:type-name="UDisksManager"
               glib:get-type="udisks_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="832">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="100"/>
      <function name="interface_info"
                c:identifier="udisks_manager_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="797">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="802">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="810">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="818">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="812">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="813">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_default_encryption_type"
                      invoker="get_default_encryption_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1320">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_default_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1330">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1322">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_encryption_types"
                      invoker="get_supported_encryption_types"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1267">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_encryption_types() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1277">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1269">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_filesystems"
                      invoker="get_supported_filesystems"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1214">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1224">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1216">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1161">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1171">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1163">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_check">
        <source-position filename="udisks-generated.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_format">
        <source-position filename="udisks-generated.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_repair">
        <source-position filename="udisks-generated.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_resize">
        <source-position filename="udisks-generated.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_module">
        <source-position filename="udisks-generated.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_modules">
        <source-position filename="udisks-generated.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_block_devices">
        <source-position filename="udisks-generated.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_loop_setup">
        <source-position filename="udisks-generated.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mdraid_create">
        <source-position filename="udisks-generated.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resolve_device">
        <source-position filename="udisks-generated.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_can_check"
              c:identifier="udisks_manager_call_can_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1593">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_check_finish() to get the result of the operation.

See udisks_manager_call_can_check_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1595">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1596">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1597">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1598">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1599">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_check_finish"
              c:identifier="udisks_manager_call_can_check_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1628">Finishes an operation started with udisks_manager_call_can_check().</doc>
        <source-position filename="udisks-generated.h" line="212"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1637">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1630">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1631">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1632">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_check().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_check_sync"
              c:identifier="udisks_manager_call_can_check_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1660">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_check() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="218"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1672">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1662">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1663">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1664">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1665">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format"
              c:identifier="udisks_manager_call_can_format"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1373">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_format_finish() to get the result of the operation.

See udisks_manager_call_can_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1375">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1376">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1377">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1378">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1379">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format_finish"
              c:identifier="udisks_manager_call_can_format_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1408">Finishes an operation started with udisks_manager_call_can_format().</doc>
        <source-position filename="udisks-generated.h" line="172"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1417">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1410">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1411">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1412">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format_sync"
              c:identifier="udisks_manager_call_can_format_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1440">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="178"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1452">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1442">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1443">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1444">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1445">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair"
              c:identifier="udisks_manager_call_can_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1703">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_repair_finish() to get the result of the operation.

See udisks_manager_call_can_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1705">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1706">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1707">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1708">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1709">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair_finish"
              c:identifier="udisks_manager_call_can_repair_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1738">Finishes an operation started with udisks_manager_call_can_repair().</doc>
        <source-position filename="udisks-generated.h" line="232"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1747">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1740">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1741">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1742">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair_sync"
              c:identifier="udisks_manager_call_can_repair_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1770">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="238"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1782">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1772">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1773">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1774">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1775">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize"
              c:identifier="udisks_manager_call_can_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1483">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_resize_finish() to get the result of the operation.

See udisks_manager_call_can_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1485">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1486">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1487">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1488">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1489">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize_finish"
              c:identifier="udisks_manager_call_can_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1518">Finishes an operation started with udisks_manager_call_can_resize().</doc>
        <source-position filename="udisks-generated.h" line="192"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1527">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1520">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1521">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1522">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize_sync"
              c:identifier="udisks_manager_call_can_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1550">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1562">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1552">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1553">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1554">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1555">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module"
              c:identifier="udisks_manager_call_enable_module"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2172">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_enable_module_finish() to get the result of the operation.

See udisks_manager_call_enable_module_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2174">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2175">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2176">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2177">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2178">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2179">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module_finish"
              c:identifier="udisks_manager_call_enable_module_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2210">Finishes an operation started with udisks_manager_call_enable_module().</doc>
        <source-position filename="udisks-generated.h" line="325"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2218">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2212">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2213">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_module().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module_sync"
              c:identifier="udisks_manager_call_enable_module_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2239">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_module() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="330"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2251">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2241">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2242">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2243">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2244">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules"
              c:identifier="udisks_manager_call_enable_modules"
              deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2068">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_enable_modules_finish() to get the result of the operation.

See udisks_manager_call_enable_modules_sync() for the synchronous, blocking version of this method.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2070">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2071">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2072">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2073">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2074">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_finish"
              c:identifier="udisks_manager_call_enable_modules_finish"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2103">Finishes an operation started with udisks_manager_call_enable_modules().</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="306"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2111">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2105">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2106">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_modules().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_sync"
              c:identifier="udisks_manager_call_enable_modules_sync"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2132">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_modules() for the asynchronous version of this method.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="311"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2143">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2134">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2135">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2136">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices"
              c:identifier="udisks_manager_call_get_block_devices"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2282">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_get_block_devices_finish() to get the result of the operation.

See udisks_manager_call_get_block_devices_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2284">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2285">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2286">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2287">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2288">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices_finish"
              c:identifier="udisks_manager_call_get_block_devices_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2317">Finishes an operation started with udisks_manager_call_get_block_devices().</doc>
        <source-position filename="udisks-generated.h" line="344"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2326">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2319">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_block_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2320">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2321">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_get_block_devices().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices_sync"
              c:identifier="udisks_manager_call_get_block_devices_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2349">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_get_block_devices() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="350"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2361">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2351">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2352">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_block_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2353">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2354">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup"
              c:identifier="udisks_manager_call_loop_setup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1813">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_loop_setup_finish() to get the result of the operation.

See udisks_manager_call_loop_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1815">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1816">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1817">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1818">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1819">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1820">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1821">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_finish"
              c:identifier="udisks_manager_call_loop_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1852">Finishes an operation started with udisks_manager_call_loop_setup().</doc>
        <source-position filename="udisks-generated.h" line="254"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1862">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1854">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1855">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1856">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1857">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_loop_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_sync"
              c:identifier="udisks_manager_call_loop_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1884">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_loop_setup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="261"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1899">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1886">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1887">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1888">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1889">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1890">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1891">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1892">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create"
              c:identifier="udisks_manager_call_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1934">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_mdraid_create_finish() to get the result of the operation.

See udisks_manager_call_mdraid_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1936">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1937">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1938">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1939">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1940">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1941">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1942">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1943">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1944">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_finish"
              c:identifier="udisks_manager_call_mdraid_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1981">Finishes an operation started with udisks_manager_call_mdraid_create().</doc>
        <source-position filename="udisks-generated.h" line="282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1990">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1983">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1984">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1985">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_mdraid_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_sync"
              c:identifier="udisks_manager_call_mdraid_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2013">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_mdraid_create() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="288"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2029">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2015">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2016">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2017">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2018">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2019">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2020">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2021">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2022">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device"
              c:identifier="udisks_manager_call_resolve_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2392">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_resolve_device_finish() to get the result of the operation.

See udisks_manager_call_resolve_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="357"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2394">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2395">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2396">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2397">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2398">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2399">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device_finish"
              c:identifier="udisks_manager_call_resolve_device_finish"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2430">Finishes an operation started with udisks_manager_call_resolve_device().</doc>
        <source-position filename="udisks-generated.h" line="365"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2439">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2432">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2433">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2434">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_resolve_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device_sync"
              c:identifier="udisks_manager_call_resolve_device_sync"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2462">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_resolve_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="371"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2475">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2464">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2465">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2466">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2467">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2468">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_check"
              c:identifier="udisks_manager_complete_can_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2554">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2556">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2557">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2558">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_format"
              c:identifier="udisks_manager_complete_can_format"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2508">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2510">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2511">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2512">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_repair"
              c:identifier="udisks_manager_complete_can_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2577">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2579">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2580">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2581">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_resize"
              c:identifier="udisks_manager_complete_can_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2531">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2533">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2534">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2535">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_module"
              c:identifier="udisks_manager_complete_enable_module"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2667">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2669">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2670">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_modules"
              c:identifier="udisks_manager_complete_enable_modules"
              deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2647">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2649">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2650">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_block_devices"
              c:identifier="udisks_manager_complete_get_block_devices"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2687">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2689">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2690">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="block_objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2691">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_loop_setup"
              c:identifier="udisks_manager_complete_loop_setup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2600">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2602">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2603">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2604">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="resulting_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2605">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mdraid_create"
              c:identifier="udisks_manager_complete_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2624">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2626">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2627">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="resulting_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2628">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resolve_device"
              c:identifier="udisks_manager_complete_resolve_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2710">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2712">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2713">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2714">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_default_encryption_type"
              c:identifier="udisks_manager_dup_default_encryption_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1340">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="395"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1348">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1342">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_encryption_types"
              c:identifier="udisks_manager_dup_supported_encryption_types"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1287">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="391"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1295">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1289">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_filesystems"
              c:identifier="udisks_manager_dup_supported_filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1234">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="387"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1242">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1236">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="udisks_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1181">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="383"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1189">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1183">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_encryption_type"
              c:identifier="udisks_manager_get_default_encryption_type"
              glib:get-property="default-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1320">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_default_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="394"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1330">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1322">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_encryption_types"
              c:identifier="udisks_manager_get_supported_encryption_types"
              glib:get-property="supported-encryption-types"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1267">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_encryption_types() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="390"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1277">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1269">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_filesystems"
              c:identifier="udisks_manager_get_supported_filesystems"
              glib:get-property="supported-filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1214">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="386"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1224">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1216">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="udisks_manager_get_version"
              glib:get-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1161">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="382"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1171">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1163">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_encryption_type"
              c:identifier="udisks_manager_set_default_encryption_type"
              glib:set-property="default-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1358">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1360">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1361">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_encryption_types"
              c:identifier="udisks_manager_set_supported_encryption_types"
              glib:set-property="supported-encryption-types"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1305">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1307">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1308">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_filesystems"
              c:identifier="udisks_manager_set_supported_filesystems"
              glib:set-property="supported-filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1252">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1254">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1255">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="udisks_manager_set_version"
              glib:set-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1199">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1201">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1202">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-encryption-type"
                writable="1"
                transfer-ownership="none"
                setter="set_default_encryption_type"
                getter="get_default_encryption_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1150">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="supported-encryption-types"
                writable="1"
                transfer-ownership="none"
                setter="set_supported_encryption_types"
                getter="get_supported_encryption_types">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1141">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="supported-filesystems"
                writable="1"
                transfer-ownership="none"
                setter="set_supported_filesystems"
                getter="get_supported_filesystems">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1132">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="version"
                writable="1"
                transfer-ownership="none"
                setter="set_version"
                getter="get_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1123">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-can-check" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="916">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_check() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="926">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="919">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="920">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-format" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="866">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="876">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="869">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="870">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-repair" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="941">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="951">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="944">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="945">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="891">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="901">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="894">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="895">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-module" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1045">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_module() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1056">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1048">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1049">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1050">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-modules" when="last" deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1020">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_modules() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1030">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1023">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1024">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-block-devices" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1071">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_get_block_devices() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1081">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1074">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1075">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-loop-setup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="966">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_loop_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="978">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="969">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="970">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="971">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="972">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mdraid-create" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="991">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_mdraid_create() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1005">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="994">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="995">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="996">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="997">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="998">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="999">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resolve-device" when="last" version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="1096">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_resolve_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="1107">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1099">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1100">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1101">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="ManagerBTRFS"
               c:symbol-prefix="manager_btrfs"
               c:type="UDisksManagerBTRFS"
               version="2.1.3"
               glib:type-name="UDisksManagerBTRFS"
               glib:get-type="udisks_manager_btrfs_get_type"
               glib:type-struct="ManagerBTRFSIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36986">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4374"/>
      <function name="interface_info"
                c:identifier="udisks_manager_btrfs_interface_info"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36951">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4382"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36956">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_btrfs_override_properties"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36966">Overrides all #GObject properties in the #UDisksManagerBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36974">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36968">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36969">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_create_volume">
        <source-position filename="udisks-generated.h" line="4365"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_volume"
              c:identifier="udisks_manager_btrfs_call_create_volume"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37042">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_call_create_volume_finish() to get the result of the operation.

See udisks_manager_btrfs_call_create_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4394"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37044">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37045">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37046">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37047">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37048">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37049">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37050">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37051">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37052">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_volume_finish"
              c:identifier="udisks_manager_btrfs_call_create_volume_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37089">Finishes an operation started with udisks_manager_btrfs_call_create_volume().</doc>
        <source-position filename="udisks-generated.h" line="4405"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37097">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37091">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37092">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_call_create_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_volume_sync"
              c:identifier="udisks_manager_btrfs_call_create_volume_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37118">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_call_create_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4410"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37133">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37120">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37121">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37122">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37123">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37124">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37125">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37126">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_volume"
              c:identifier="udisks_manager_btrfs_complete_create_volume"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37170">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4387"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37172">A #UDisksManagerBTRFS.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37173">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-create-volume" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37011">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_btrfs_complete_create_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37025">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37014">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37015">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37016">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37017">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37018">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37019">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerBTRFSIface"
            c:type="UDisksManagerBTRFSIface"
            glib:is-gtype-struct-for="ManagerBTRFS"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36994">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4374"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36996">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_volume">
        <callback name="handle_create_volume">
          <source-position filename="udisks-generated.h" line="4365"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_devices" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_data_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_md_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerBTRFSProxy"
           c:symbol-prefix="manager_btrfs_proxy"
           c:type="UDisksManagerBTRFSProxy"
           version="2.1.3"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerBTRFSProxy"
           glib:get-type="udisks_manager_btrfs_proxy_get_type"
           glib:type-struct="ManagerBTRFSProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37192">The #UDisksManagerBTRFSProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4445"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerBTRFS"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_btrfs_proxy_new_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37389">Finishes an operation started with udisks_manager_btrfs_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4461"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37396">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37391">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_btrfs_proxy_new_for_bus_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37485">Finishes an operation started with udisks_manager_btrfs_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4480"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37492">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37487">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_btrfs_proxy_new_for_bus_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37512">Like udisks_manager_btrfs_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4483"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37527">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37514">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37515">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37516">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37517">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37518">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_btrfs_proxy_new_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37416">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4464"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37431">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37418">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37419">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37420">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37421">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37422">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_btrfs_proxy_new"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37357">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_proxy_new_finish() to get the result of the operation.

See udisks_manager_btrfs_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4453"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37359">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37360">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37361">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37362">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37363">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37364">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37365">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_btrfs_proxy_new_for_bus"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37453">Like udisks_manager_btrfs_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_btrfs_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4472"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37455">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37456">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37457">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37458">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37459">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37460">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37461">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerBTRFSProxyPrivate"
              c:type="UDisksManagerBTRFSProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerBTRFSProxyClass"
            c:type="UDisksManagerBTRFSProxyClass"
            glib:is-gtype-struct-for="ManagerBTRFSProxy"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37200">Class structure for #UDisksManagerBTRFSProxy.</doc>
      <source-position filename="udisks-generated.h" line="4445"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37202">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerBTRFSProxyPrivate"
            c:type="UDisksManagerBTRFSProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4433"/>
    </record>
    <class name="ManagerBTRFSSkeleton"
           c:symbol-prefix="manager_btrfs_skeleton"
           c:type="UDisksManagerBTRFSSkeleton"
           version="2.1.3"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerBTRFSSkeleton"
           glib:get-type="udisks_manager_btrfs_skeleton_get_type"
           glib:type-struct="ManagerBTRFSSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37551">The #UDisksManagerBTRFSSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4515"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerBTRFS"/>
      <constructor name="new"
                   c:identifier="udisks_manager_btrfs_skeleton_new"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37826">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4523"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37831">The skeleton object.</doc>
          <type name="ManagerBTRFSSkeleton" c:type="UDisksManagerBTRFS*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerBTRFSSkeletonPrivate"
              c:type="UDisksManagerBTRFSSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerBTRFSSkeletonClass"
            c:type="UDisksManagerBTRFSSkeletonClass"
            glib:is-gtype-struct-for="ManagerBTRFSSkeleton"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37559">Class structure for #UDisksManagerBTRFSSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4515"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37561">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerBTRFSSkeletonPrivate"
            c:type="UDisksManagerBTRFSSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4503"/>
    </record>
    <record name="ManagerIface"
            c:type="UDisksManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="838">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="100"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="840">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_modules">
        <callback name="handle_enable_modules">
          <source-position filename="udisks-generated.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_loop_setup">
        <callback name="handle_loop_setup">
          <source-position filename="udisks-generated.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_fd" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default_encryption_type">
        <callback name="get_default_encryption_type">
          <source-position filename="udisks-generated.h" line="46"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1330">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="1322">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_encryption_types">
        <callback name="get_supported_encryption_types">
          <source-position filename="udisks-generated.h" line="48"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1277">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="1269">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_filesystems">
        <callback name="get_supported_filesystems">
          <source-position filename="udisks-generated.h" line="50"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1224">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="1216">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="udisks-generated.h" line="52"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="1171">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="1163">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_mdraid_create">
        <callback name="handle_mdraid_create">
          <source-position filename="udisks-generated.h" line="54"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_chunk" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_check">
        <callback name="handle_can_check">
          <source-position filename="udisks-generated.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_format">
        <callback name="handle_can_format">
          <source-position filename="udisks-generated.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_repair">
        <callback name="handle_can_repair">
          <source-position filename="udisks-generated.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_resize">
        <callback name="handle_can_resize">
          <source-position filename="udisks-generated.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_block_devices">
        <callback name="handle_get_block_devices">
          <source-position filename="udisks-generated.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resolve_device">
        <callback name="handle_resolve_device">
          <source-position filename="udisks-generated.h" line="88"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_devspec" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_module">
        <callback name="handle_enable_module">
          <source-position filename="udisks-generated.h" line="94"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ManagerLVM2"
               c:symbol-prefix="manager_lvm2"
               c:type="UDisksManagerLVM2"
               version="2.0.0"
               glib:type-name="UDisksManagerLVM2"
               glib:get-type="udisks_manager_lvm2_get_type"
               glib:type-struct="ManagerLVM2Iface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41242">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4991"/>
      <function name="interface_info"
                c:identifier="udisks_manager_lvm2_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41207">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4999"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41212">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_lvm2_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41222">Overrides all #GObject properties in the #UDisksManagerLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5000"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41230">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41224">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41225">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_volume_group_create">
        <source-position filename="udisks-generated.h" line="4984"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_volume_group_create"
              c:identifier="udisks_manager_lvm2_call_volume_group_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41296">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_call_volume_group_create_finish() to get the result of the operation.

See udisks_manager_lvm2_call_volume_group_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5012"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41298">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41299">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41300">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41301">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41302">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41303">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41304">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_volume_group_create_finish"
              c:identifier="udisks_manager_lvm2_call_volume_group_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41337">Finishes an operation started with udisks_manager_lvm2_call_volume_group_create().</doc>
        <source-position filename="udisks-generated.h" line="5021"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41346">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41339">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41340">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41341">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_call_volume_group_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_volume_group_create_sync"
              c:identifier="udisks_manager_lvm2_call_volume_group_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41369">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_call_volume_group_create() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5027"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41383">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41371">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41372">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41373">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41374">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41375">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_volume_group_create"
              c:identifier="udisks_manager_lvm2_complete_volume_group_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41418">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5004"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41420">A #UDisksManagerLVM2.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41421">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41422">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-volume-group-create"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41267">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_lvm2_complete_volume_group_create() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41279">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41270">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41271">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41272">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41273">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerLVM2Iface"
            c:type="UDisksManagerLVM2Iface"
            glib:is-gtype-struct-for="ManagerLVM2"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41250">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4991"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41252">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_volume_group_create">
        <callback name="handle_volume_group_create">
          <source-position filename="udisks-generated.h" line="4984"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerLVM2Proxy"
           c:symbol-prefix="manager_lvm2_proxy"
           c:type="UDisksManagerLVM2Proxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerLVM2Proxy"
           glib:get-type="udisks_manager_lvm2_proxy_get_type"
           glib:type-struct="ManagerLVM2ProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41443">The #UDisksManagerLVM2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5061"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerLVM2"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_lvm2_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41640">Finishes an operation started with udisks_manager_lvm2_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5077"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41647">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41642">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_lvm2_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41736">Finishes an operation started with udisks_manager_lvm2_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5096"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41743">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41738">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_lvm2_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41763">Like udisks_manager_lvm2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5099"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41778">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41765">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41766">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41767">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41768">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41769">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_lvm2_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41667">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5080"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41682">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41669">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41670">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41671">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41672">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41673">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_lvm2_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41608">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_proxy_new_finish() to get the result of the operation.

See udisks_manager_lvm2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5069"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41610">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41611">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41612">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41613">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41614">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41615">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41616">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_lvm2_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41704">Like udisks_manager_lvm2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_lvm2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5088"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41706">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41707">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41708">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41709">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41710">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41711">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41712">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerLVM2ProxyPrivate"
              c:type="UDisksManagerLVM2ProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerLVM2ProxyClass"
            c:type="UDisksManagerLVM2ProxyClass"
            glib:is-gtype-struct-for="ManagerLVM2Proxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41451">Class structure for #UDisksManagerLVM2Proxy.</doc>
      <source-position filename="udisks-generated.h" line="5061"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41453">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerLVM2ProxyPrivate"
            c:type="UDisksManagerLVM2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5049"/>
    </record>
    <class name="ManagerLVM2Skeleton"
           c:symbol-prefix="manager_lvm2_skeleton"
           c:type="UDisksManagerLVM2Skeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerLVM2Skeleton"
           glib:get-type="udisks_manager_lvm2_skeleton_get_type"
           glib:type-struct="ManagerLVM2SkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41802">The #UDisksManagerLVM2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5131"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerLVM2"/>
      <constructor name="new"
                   c:identifier="udisks_manager_lvm2_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42077">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42082">The skeleton object.</doc>
          <type name="ManagerLVM2Skeleton" c:type="UDisksManagerLVM2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerLVM2SkeletonPrivate"
              c:type="UDisksManagerLVM2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerLVM2SkeletonClass"
            c:type="UDisksManagerLVM2SkeletonClass"
            glib:is-gtype-struct-for="ManagerLVM2Skeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41810">Class structure for #UDisksManagerLVM2Skeleton.</doc>
      <source-position filename="udisks-generated.h" line="5131"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41812">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerLVM2SkeletonPrivate"
            c:type="UDisksManagerLVM2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5119"/>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="UDisksManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerProxy"
           glib:get-type="udisks_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2735">The #UDisksManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="422"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Manager"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3051">Finishes an operation started with udisks_manager_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="438"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3058">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3053">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3141">Finishes an operation started with udisks_manager_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3148">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3143">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3166">Like udisks_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3181">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3168">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3169">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3170">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3171">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3172">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3076">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3091">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3078">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3079">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3080">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3081">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3082">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_manager_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3021">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_proxy_new_finish() to get the result of the operation.

See udisks_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3023">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3024">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3025">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3026">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3027">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3028">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3029">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3111">Like udisks_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3113">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3114">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3115">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3116">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3117">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3118">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3119">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="UDisksManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="UDisksManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2741">Class structure for #UDisksManagerProxy.</doc>
      <source-position filename="udisks-generated.h" line="422"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2743">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="UDisksManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="410"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="UDisksManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerSkeleton"
           glib:get-type="udisks_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="3203">The #UDisksManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="492"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Manager"/>
      <constructor name="new" c:identifier="udisks_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3695">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3700">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="UDisksManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="UDisksManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="UDisksManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="3209">Class structure for #UDisksManagerSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="492"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3211">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="UDisksManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="480"/>
    </record>
    <function-macro name="OBJECT"
                    c:identifier="UDISKS_OBJECT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6759"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_IFACE"
                    c:identifier="UDISKS_OBJECT_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6761"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_INFO"
                    c:identifier="UDISKS_OBJECT_INFO"
                    introspectable="0">
      <source-position filename="udisksobjectinfo.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6904"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6905"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6906"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY"
                    c:identifier="UDISKS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6820"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_CLASS"
                    c:identifier="UDISKS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6821"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6822"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON"
                    c:identifier="UDISKS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6851"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_CLASS"
                    c:identifier="UDISKS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6852"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6853"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Object"
               c:symbol-prefix="object"
               c:type="UDisksObject"
               glib:type-name="UDisksObject"
               glib:get-type="udisks_object_get_type"
               glib:type-struct="ObjectIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55163">The #UDisksObject type is a specialized container of interfaces.</doc>
      <source-position filename="udisks-generated.h" line="6770"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_block"
              c:identifier="udisks_object_get_block"
              glib:get-property="block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55433">Gets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6781"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55439">A #UDisksBlock that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55435">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_lvm2"
              c:identifier="udisks_object_get_block_lvm2"
              glib:get-property="block-lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55645">Gets the #UDisksBlockLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6793"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55651">A #UDisksBlockLVM2 that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55647">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_object_get_drive"
              glib:get-property="drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55399">Gets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6779"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55405">A #UDisksDrive that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55401">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_ata"
              c:identifier="udisks_object_get_drive_ata"
              glib:get-property="drive-ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55416">Gets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6780"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55422">A #UDisksDriveAta that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55418">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypted"
              c:identifier="udisks_object_get_encrypted"
              glib:get-property="encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55518">Gets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6786"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55524">A #UDisksEncrypted that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55520">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem"
              c:identifier="udisks_object_get_filesystem"
              glib:get-property="filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55484">Gets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6784"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55490">A #UDisksFilesystem that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55486">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem_btrfs"
              c:identifier="udisks_object_get_filesystem_btrfs"
              glib:get-property="filesystem-btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55607">Gets the #UDisksFilesystemBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6791"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55613">A #UDisksFilesystemBTRFS that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55609">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_job"
              c:identifier="udisks_object_get_job"
              glib:get-property="job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55571">Gets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6789"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55577">A #UDisksJob that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55573">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_volume"
              c:identifier="udisks_object_get_logical_volume"
              glib:get-property="logical-volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55702">Gets the #UDisksLogicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6796"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55708">A #UDisksLogicalVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55704">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loop"
              c:identifier="udisks_object_get_loop"
              glib:get-property="loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55535">Gets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6787"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55541">A #UDisksLoop that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55537">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="udisks_object_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55382">Gets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6778"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55388">A #UDisksManager that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55384">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_btrfs"
              c:identifier="udisks_object_get_manager_btrfs"
              glib:get-property="manager-btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55588">Gets the #UDisksManagerBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6790"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55594">A #UDisksManagerBTRFS that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55590">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_lvm2"
              c:identifier="udisks_object_get_manager_lvm2"
              glib:get-property="manager-lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55626">Gets the #UDisksManagerLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6792"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55632">A #UDisksManagerLVM2 that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55628">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_object_get_mdraid"
              glib:get-property="mdraid"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55552">Gets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6788"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55558">A #UDisksMDRaid that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55554">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition"
              c:identifier="udisks_object_get_partition"
              glib:get-property="partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55467">Gets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6783"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55473">A #UDisksPartition that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55469">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_object_get_partition_table"
              glib:get-property="partition-table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55450">Gets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6782"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55456">A #UDisksPartitionTable that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55452">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_physical_volume"
              c:identifier="udisks_object_get_physical_volume"
              glib:get-property="physical-volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55664">Gets the #UDisksPhysicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6794"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55670">A #UDisksPhysicalVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55666">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swapspace"
              c:identifier="udisks_object_get_swapspace"
              glib:get-property="swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55501">Gets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6785"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55507">A #UDisksSwapspace that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55503">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vdo_volume"
              c:identifier="udisks_object_get_vdo_volume"
              glib:get-property="vdo-volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55721">Gets the #UDisksVDOVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6797"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55727">A #UDisksVDOVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55723">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_object_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55683">Gets the #UDisksVolumeGroup instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="6795"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55689">A #UDisksVolumeGroup that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55685">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block"
              c:identifier="udisks_object_peek_block"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55801">Like udisks_object_get_block() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6801"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55809">A #UDisksBlock or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55803">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block_lvm2"
              c:identifier="udisks_object_peek_block_lvm2"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56049">Like udisks_object_get_block_lvm2() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6813"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56057">A #UDisksBlockLVM2 or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56051">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive"
              c:identifier="udisks_object_peek_drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55761">Like udisks_object_get_drive() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6799"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55769">A #UDisksDrive or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55763">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_ata"
              c:identifier="udisks_object_peek_drive_ata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55781">Like udisks_object_get_drive_ata() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6800"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55789">A #UDisksDriveAta or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55783">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_encrypted"
              c:identifier="udisks_object_peek_encrypted"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55901">Like udisks_object_get_encrypted() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6806"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55909">A #UDisksEncrypted or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55903">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem"
              c:identifier="udisks_object_peek_filesystem"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55861">Like udisks_object_get_filesystem() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6804"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55869">A #UDisksFilesystem or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55863">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem_btrfs"
              c:identifier="udisks_object_peek_filesystem_btrfs"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56005">Like udisks_object_get_filesystem_btrfs() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6811"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56013">A #UDisksFilesystemBTRFS or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56007">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_job"
              c:identifier="udisks_object_peek_job"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55963">Like udisks_object_get_job() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6809"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55971">A #UDisksJob or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55965">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_logical_volume"
              c:identifier="udisks_object_peek_logical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56115">Like udisks_object_get_logical_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6816"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56123">A #UDisksLogicalVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56117">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_loop"
              c:identifier="udisks_object_peek_loop"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55921">Like udisks_object_get_loop() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6807"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55929">A #UDisksLoop or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55923">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager"
              c:identifier="udisks_object_peek_manager"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55741">Like udisks_object_get_manager() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6798"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55749">A #UDisksManager or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55743">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_btrfs"
              c:identifier="udisks_object_peek_manager_btrfs"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55983">Like udisks_object_get_manager_btrfs() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6810"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55991">A #UDisksManagerBTRFS or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55985">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_lvm2"
              c:identifier="udisks_object_peek_manager_lvm2"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56027">Like udisks_object_get_manager_lvm2() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6812"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56035">A #UDisksManagerLVM2 or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56029">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_mdraid"
              c:identifier="udisks_object_peek_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55941">Like udisks_object_get_mdraid() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6808"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55949">A #UDisksMDRaid or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55943">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition"
              c:identifier="udisks_object_peek_partition"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55841">Like udisks_object_get_partition() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6803"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55849">A #UDisksPartition or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55843">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition_table"
              c:identifier="udisks_object_peek_partition_table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55821">Like udisks_object_get_partition_table() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6802"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55829">A #UDisksPartitionTable or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55823">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_physical_volume"
              c:identifier="udisks_object_peek_physical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56071">Like udisks_object_get_physical_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6814"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56079">A #UDisksPhysicalVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56073">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_swapspace"
              c:identifier="udisks_object_peek_swapspace"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55881">Like udisks_object_get_swapspace() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6805"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55889">A #UDisksSwapspace or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55883">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_vdo_volume"
              c:identifier="udisks_object_peek_vdo_volume"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56137">Like udisks_object_get_vdo_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6817"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56145">A #UDisksVDOVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56139">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_volume_group"
              c:identifier="udisks_object_peek_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56093">Like udisks_object_get_volume_group() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="6815"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56101">A #UDisksVolumeGroup or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56095">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="block"
                writable="1"
                transfer-ownership="none"
                getter="get_block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55209">The #UDisksBlock instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Block"/>
      </property>
      <property name="block-lvm2"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_block_lvm2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55325">The #UDisksBlockLVM2 instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="BlockLVM2"/>
      </property>
      <property name="drive"
                writable="1"
                transfer-ownership="none"
                getter="get_drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55191">The #UDisksDrive instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Drive"/>
      </property>
      <property name="drive-ata"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55200">The #UDisksDriveAta instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveAta"/>
      </property>
      <property name="encrypted"
                writable="1"
                transfer-ownership="none"
                getter="get_encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55254">The #UDisksEncrypted instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Encrypted"/>
      </property>
      <property name="filesystem"
                writable="1"
                transfer-ownership="none"
                getter="get_filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55236">The #UDisksFilesystem instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Filesystem"/>
      </property>
      <property name="filesystem-btrfs"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                getter="get_filesystem_btrfs">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55303">The #UDisksFilesystemBTRFS instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="FilesystemBTRFS"/>
      </property>
      <property name="job"
                writable="1"
                transfer-ownership="none"
                getter="get_job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55283">The #UDisksJob instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Job"/>
      </property>
      <property name="logical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_logical_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55358">The #UDisksLogicalVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="LogicalVolume"/>
      </property>
      <property name="loop"
                writable="1"
                transfer-ownership="none"
                getter="get_loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55263">The #UDisksLoop instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Loop"/>
      </property>
      <property name="manager"
                writable="1"
                transfer-ownership="none"
                getter="get_manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55182">The #UDisksManager instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Manager"/>
      </property>
      <property name="manager-btrfs"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_btrfs">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55292">The #UDisksManagerBTRFS instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerBTRFS"/>
      </property>
      <property name="manager-lvm2"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_lvm2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55314">The #UDisksManagerLVM2 instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerLVM2"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_mdraid">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55272">The #UDisksMDRaid instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="MDRaid"/>
      </property>
      <property name="partition"
                writable="1"
                transfer-ownership="none"
                getter="get_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55227">The #UDisksPartition instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Partition"/>
      </property>
      <property name="partition-table"
                writable="1"
                transfer-ownership="none"
                getter="get_partition_table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55218">The #UDisksPartitionTable instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PartitionTable"/>
      </property>
      <property name="physical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_physical_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55336">The #UDisksPhysicalVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PhysicalVolume"/>
      </property>
      <property name="swapspace"
                writable="1"
                transfer-ownership="none"
                getter="get_swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55245">The #UDisksSwapspace instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Swapspace"/>
      </property>
      <property name="vdo-volume"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                getter="get_vdo_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55369">The #UDisksVDOVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="VDOVolume"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_volume_group">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55347">The #UDisksVolumeGroup instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="VolumeGroup"/>
      </property>
    </interface>
    <record name="ObjectIface"
            c:type="UDisksObjectIface"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55169">Virtual table for the #UDisksObject interface.</doc>
      <source-position filename="udisks-generated.h" line="6770"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55171">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="ObjectInfo"
           c:symbol-prefix="object_info"
           c:type="UDisksObjectInfo"
           version="2.1"
           parent="GObject.Object"
           glib:type-name="UDisksObjectInfo"
           glib:get-type="udisks_object_info_get_type">
      <doc xml:space="preserve"
           filename="udisksobjectinfo.c"
           line="28">Detailed information about the D-Bus interfaces (such as
#UDisksBlock and #UDisksDrive) on a #UDisksObject that is suitable
to display in an user interface. Use
udisks_client_get_object_info() to get #UDisksObjectInfo objects.
Note that #UDisksObjectInfo is an immutable object; once it has
been created it cannot be modified further.

The &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintName&lt;/link&gt;
and/or &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintIconName&lt;/link&gt;
propreties on associated #UDisksBlock interfaces (if any) may
influence what udisks_object_info_get_icon() and
udisks_object_info_get_media_icon() returns.

The value return by udisks_object_info_get_one_liner() is designed
to contain enough information such that it is all that needs to be
shown about the object. As a result for e.g.  block devices or
drives it contains the special device file
e.g. &lt;filename&gt;/dev/sda&lt;/filename&gt;.</doc>
      <method name="get_description"
              c:identifier="udisks_object_info_get_description"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1065">Gets the description.</doc>
        <source-position filename="udisksobjectinfo.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1071">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1067">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="udisks_object_info_get_icon"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1082">Gets the icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1088">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1084">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_symbolic"
              c:identifier="udisks_object_info_get_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1099">Gets the symbolic icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1105">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1101">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_description"
              c:identifier="udisks_object_info_get_media_description"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1116">Gets the media description.</doc>
        <source-position filename="udisksobjectinfo.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1122">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1118">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon"
              c:identifier="udisks_object_info_get_media_icon"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1133">Gets the media icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1139">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1135">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon_symbolic"
              c:identifier="udisks_object_info_get_media_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1150">Gets the symbolic media icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1156">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1152">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_object_info_get_name"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1048">Gets the name.</doc>
        <source-position filename="udisksobjectinfo.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1054">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1050">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object"
              c:identifier="udisks_object_info_get_object"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1031">Gets the #UDisksObject that @info is for</doc>
        <source-position filename="udisksobjectinfo.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1037">The object - do not free or unref, the reference belongs to @info.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1033">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_one_liner"
              c:identifier="udisks_object_info_get_one_liner"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1167">Gets a one-line description.</doc>
        <source-position filename="udisksobjectinfo.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1173">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1169">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_object_info_get_sort_key"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1184">Gets the sort-key for @info. This can be used with g_strcmp0() to
sort objects.</doc>
        <source-position filename="udisksobjectinfo.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1191">The sort key or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1186">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="ObjectManagerClient"
           c:symbol-prefix="object_manager_client"
           c:type="UDisksObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="UDisksObjectManagerClient"
           glib:get-type="udisks_object_manager_client_get_type"
           glib:type-struct="ObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57126">The #UDisksObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6924"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57232">Finishes an operation started with udisks_object_manager_client_new().</doc>
        <source-position filename="udisks-generated.h" line="6942"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57239">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57234">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57322">Finishes an operation started with udisks_object_manager_client_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6961"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57329">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57324">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57347">Like udisks_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6964"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57362">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57349">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57350">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57351">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57352">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57353">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57257">Synchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6945"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57272">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57259">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57260">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57261">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57262">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57263">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="udisks_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57151">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="udisks-generated.h" line="6932"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57160">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #UDisksObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57153">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57154">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57155">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57156">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_object_manager_client_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57202">Asynchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_object_manager_client_new_finish() to get the result of the operation.

See udisks_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6934"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57204">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57205">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57206">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57207">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57208">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57209">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57210">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_object_manager_client_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57292">Like udisks_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_object_manager_client_new_for_bus_finish() to get the result of the operation.

See udisks_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6953"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57294">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57295">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57296">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57297">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57298">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57299">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57300">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectManagerClientPrivate"
              c:type="UDisksObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="ObjectManagerClientClass"
            c:type="UDisksObjectManagerClientClass"
            glib:is-gtype-struct-for="ObjectManagerClient">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57132">Class structure for #UDisksObjectManagerClient.</doc>
      <source-position filename="udisks-generated.h" line="6924"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57134">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="ObjectManagerClientPrivate"
            c:type="UDisksObjectManagerClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6912"/>
    </record>
    <class name="ObjectProxy"
           c:symbol-prefix="object_proxy"
           c:type="UDisksObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="UDisksObjectProxy"
           glib:get-type="udisks_object_proxy_get_type"
           glib:type-struct="ObjectProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56171">The #UDisksObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6840"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56362">Creates a new proxy object.</doc>
        <source-position filename="udisks-generated.h" line="6848"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56369">The proxy object.</doc>
          <type name="ObjectProxy" c:type="UDisksObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56364">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56365">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectProxyPrivate" c:type="UDisksObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="ObjectProxyClass"
            c:type="UDisksObjectProxyClass"
            glib:is-gtype-struct-for="ObjectProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56177">Class structure for #UDisksObjectProxy.</doc>
      <source-position filename="udisks-generated.h" line="6840"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56179">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="ObjectProxyPrivate"
            c:type="UDisksObjectProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6828"/>
    </record>
    <class name="ObjectSkeleton"
           c:symbol-prefix="object_skeleton"
           c:type="UDisksObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="UDisksObjectSkeleton"
           glib:get-type="udisks_object_skeleton_get_type"
           glib:type-struct="ObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56380">The #UDisksObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6871"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56839">Creates a new skeleton object.</doc>
        <source-position filename="udisks-generated.h" line="6879"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56845">The skeleton object.</doc>
          <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56841">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_block" c:identifier="udisks_object_skeleton_set_block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56890">Sets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6883"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56892">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56893">A #UDisksBlock or %NULL to clear the interface.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_lvm2"
              c:identifier="udisks_object_skeleton_set_block_lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57042">Sets the #UDisksBlockLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6895"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57044">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57045">A #UDisksBlockLVM2 or %NULL to clear the interface.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive" c:identifier="udisks_object_skeleton_set_drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56866">Sets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6881"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56868">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56869">A #UDisksDrive or %NULL to clear the interface.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_ata"
              c:identifier="udisks_object_skeleton_set_drive_ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56878">Sets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6882"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56880">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56881">A #UDisksDriveAta or %NULL to clear the interface.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypted"
              c:identifier="udisks_object_skeleton_set_encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56950">Sets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6888"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56952">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56953">A #UDisksEncrypted or %NULL to clear the interface.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem"
              c:identifier="udisks_object_skeleton_set_filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56926">Sets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6886"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56928">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56929">A #UDisksFilesystem or %NULL to clear the interface.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem_btrfs"
              c:identifier="udisks_object_skeleton_set_filesystem_btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57014">Sets the #UDisksFilesystemBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6893"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57016">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57017">A #UDisksFilesystemBTRFS or %NULL to clear the interface.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_job" c:identifier="udisks_object_skeleton_set_job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56988">Sets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6891"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56990">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56991">A #UDisksJob or %NULL to clear the interface.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logical_volume"
              c:identifier="udisks_object_skeleton_set_logical_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57084">Sets the #UDisksLogicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6898"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57086">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57087">A #UDisksLogicalVolume or %NULL to clear the interface.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loop" c:identifier="udisks_object_skeleton_set_loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56962">Sets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6889"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56964">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56965">A #UDisksLoop or %NULL to clear the interface.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager"
              c:identifier="udisks_object_skeleton_set_manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56854">Sets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6880"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56856">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56857">A #UDisksManager or %NULL to clear the interface.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_btrfs"
              c:identifier="udisks_object_skeleton_set_manager_btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57000">Sets the #UDisksManagerBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6892"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57002">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57003">A #UDisksManagerBTRFS or %NULL to clear the interface.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_lvm2"
              c:identifier="udisks_object_skeleton_set_manager_lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57028">Sets the #UDisksManagerLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6894"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57030">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57031">A #UDisksManagerLVM2 or %NULL to clear the interface.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_object_skeleton_set_mdraid"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56974">Sets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6890"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56976">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56977">A #UDisksMDRaid or %NULL to clear the interface.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition"
              c:identifier="udisks_object_skeleton_set_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56914">Sets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6885"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56916">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56917">A #UDisksPartition or %NULL to clear the interface.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition_table"
              c:identifier="udisks_object_skeleton_set_partition_table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56902">Sets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6884"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56904">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56905">A #UDisksPartitionTable or %NULL to clear the interface.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_physical_volume"
              c:identifier="udisks_object_skeleton_set_physical_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57056">Sets the #UDisksPhysicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6896"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57058">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57059">A #UDisksPhysicalVolume or %NULL to clear the interface.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swapspace"
              c:identifier="udisks_object_skeleton_set_swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56938">Sets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6887"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56940">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56941">A #UDisksSwapspace or %NULL to clear the interface.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vdo_volume"
              c:identifier="udisks_object_skeleton_set_vdo_volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57098">Sets the #UDisksVDOVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6899"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57100">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57101">A #UDisksVDOVolume or %NULL to clear the interface.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_object_skeleton_set_volume_group"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57070">Sets the #UDisksVolumeGroup instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="6897"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57072">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57073">A #UDisksVolumeGroup or %NULL to clear the interface.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectSkeletonPrivate"
              c:type="UDisksObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ObjectSkeletonClass"
            c:type="UDisksObjectSkeletonClass"
            glib:is-gtype-struct-for="ObjectSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56386">Class structure for #UDisksObjectSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6871"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56388">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="ObjectSkeletonPrivate"
            c:type="UDisksObjectSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6859"/>
    </record>
    <function-macro name="PARTITION"
                    c:identifier="UDISKS_PARTITION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2266"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_GET_IFACE"
                    c:identifier="UDISKS_PARTITION_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2268"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY"
                    c:identifier="UDISKS_PARTITION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2503"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY_CLASS"
                    c:identifier="UDISKS_PARTITION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2504"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2505"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON"
                    c:identifier="UDISKS_PARTITION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2573"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON_CLASS"
                    c:identifier="UDISKS_PARTITION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2574"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2575"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE"
                    c:identifier="UDISKS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2023"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_GET_IFACE"
                    c:identifier="UDISKS_PARTITION_TABLE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2025"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2162"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2163"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2231"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2232"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2233"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME"
                    c:identifier="UDISKS_PHYSICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5286"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5288"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5331"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5332"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5333"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5401"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5402"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5403"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Partition"
               c:symbol-prefix="partition"
               c:type="UDisksPartition"
               glib:type-name="UDisksPartition"
               glib:get-type="udisks_partition_get_type"
               glib:type-struct="PartitionIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20596">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2328"/>
      <function name="interface_info"
                c:identifier="udisks_partition_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20555">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2336"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20560">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20568">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2337"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20576">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20570">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20571">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_flags" invoker="get_flags" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20929">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2308"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20937">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20931">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_contained"
                      invoker="get_is_contained"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21220">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2310"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21228">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21222">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_container"
                      invoker="get_is_container"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21187">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2312"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21195">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21189">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21028">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2314"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21038">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21030">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_number"
                      invoker="get_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20843">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2316"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20851">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20845">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_offset"
                      invoker="get_offset"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20962">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2318"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20970">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20964">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20995">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21003">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20997">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_table" invoker="get_table" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21134">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2322"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21144">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21136">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20876">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2324"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20886">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20878">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid" invoker="get_uuid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21081">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2326"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21091">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21083">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="2279"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="2284"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_flags">
        <source-position filename="udisks-generated.h" line="2290"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_name">
        <source-position filename="udisks-generated.h" line="2296"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_type">
        <source-position filename="udisks-generated.h" line="2302"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_partition_call_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21669">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_delete_finish() to get the result of the operation.

See udisks_partition_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2444"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21671">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21672">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21673">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21674">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21675">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_partition_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21702">Finishes an operation started with udisks_partition_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="2451"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21710">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21704">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21705">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_partition_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21729">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2456"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21740">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21731">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21732">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21733">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize" c:identifier="udisks_partition_call_resize">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21565">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_resize_finish() to get the result of the operation.

See udisks_partition_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2424"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21567">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21568">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21569">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21570">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21571">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21572">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_partition_call_resize_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21601">Finishes an operation started with udisks_partition_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="2432"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21609">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21603">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21604">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_partition_call_resize_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21628">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2437"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21640">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21630">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21631">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21632">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21633">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags"
              c:identifier="udisks_partition_call_set_flags">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21461">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_flags_finish() to get the result of the operation.

See udisks_partition_call_set_flags_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2404"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21463">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21464">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21465">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21466">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21467">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21468">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_finish"
              c:identifier="udisks_partition_call_set_flags_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21497">Finishes an operation started with udisks_partition_call_set_flags().</doc>
        <source-position filename="udisks-generated.h" line="2412"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21505">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21499">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21500">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_flags().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_sync"
              c:identifier="udisks_partition_call_set_flags_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21524">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_flags() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2417"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21536">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21526">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21527">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21528">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21529">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name"
              c:identifier="udisks_partition_call_set_name">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21357">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_name_finish() to get the result of the operation.

See udisks_partition_call_set_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21359">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21360">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21361">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21362">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21363">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21364">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_finish"
              c:identifier="udisks_partition_call_set_name_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21393">Finishes an operation started with udisks_partition_call_set_name().</doc>
        <source-position filename="udisks-generated.h" line="2392"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21401">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21395">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21396">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_sync"
              c:identifier="udisks_partition_call_set_name_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21420">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2397"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21432">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21422">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21423">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21424">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21425">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type"
              c:identifier="udisks_partition_call_set_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21253">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_type_finish() to get the result of the operation.

See udisks_partition_call_set_type_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21255">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21256">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21257">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21258">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21259">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21260">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_finish"
              c:identifier="udisks_partition_call_set_type_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21289">Finishes an operation started with udisks_partition_call_set_type().</doc>
        <source-position filename="udisks-generated.h" line="2372"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21297">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21291">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21292">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_type().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_sync"
              c:identifier="udisks_partition_call_set_type_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21316">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_type() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2377"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21328">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21318">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21319">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21320">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21321">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_partition_complete_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21839">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2357"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21841">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21842">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_partition_complete_resize">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21821">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2353"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21823">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21824">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_flags"
              c:identifier="udisks_partition_complete_set_flags">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21803">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2349"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21805">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21806">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_name"
              c:identifier="udisks_partition_complete_set_name">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21785">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21787">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21788">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_type"
              c:identifier="udisks_partition_complete_set_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21767">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2341"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21769">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21770">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_partition_dup_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21048">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2482"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21056">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21050">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_table"
              c:identifier="udisks_partition_dup_table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21154">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2490"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21162">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21156">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_dup_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20896">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2469"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20904">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20898">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_partition_dup_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21101">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2486"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21109">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21103">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="udisks_partition_get_flags"
              glib:get-property="flags"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20929">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2472"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20937">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20931">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_contained"
              c:identifier="udisks_partition_get_is_contained"
              glib:get-property="is-contained"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21220">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2496"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21228">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21222">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_container"
              c:identifier="udisks_partition_get_is_container"
              glib:get-property="is-container"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21187">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2493"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21195">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21189">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_partition_get_name"
              glib:get-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21028">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2481"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21038">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21030">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="udisks_partition_get_number"
              glib:get-property="number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20843">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2465"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20851">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20845">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset"
              c:identifier="udisks_partition_get_offset"
              glib:get-property="offset"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20962">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2475"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20970">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20964">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_partition_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20995">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2478"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21003">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20997">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_table"
              c:identifier="udisks_partition_get_table"
              glib:get-property="table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21134">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2489"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21144">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21136">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_get_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20876">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2468"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20886">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20878">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_partition_get_uuid"
              glib:get-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21081">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2485"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21091">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21083">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="udisks_partition_set_flags"
              glib:set-property="flags"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20947">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2473"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20949">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20950">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_contained"
              c:identifier="udisks_partition_set_is_contained"
              glib:set-property="is-contained"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21238">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2497"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21240">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21241">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_container"
              c:identifier="udisks_partition_set_is_container"
              glib:set-property="is-container"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21205">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2494"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21207">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21208">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_partition_set_name"
              glib:set-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21066">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2483"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21068">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21069">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="udisks_partition_set_number"
              glib:set-property="number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20861">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2466"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20863">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20864">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset"
              c:identifier="udisks_partition_set_offset"
              glib:set-property="offset"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20980">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2476"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20982">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20983">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_partition_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21013">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2479"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21015">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21016">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_table"
              c:identifier="udisks_partition_set_table"
              glib:set-property="table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21172">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2491"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21174">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21175">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_set_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20914">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2470"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20916">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20917">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_partition_set_uuid"
              glib:set-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21119">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2487"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21121">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21122">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20769">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="is-contained"
                writable="1"
                transfer-ownership="none"
                setter="set_is_contained"
                getter="get_is_contained"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20832">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-container"
                writable="1"
                transfer-ownership="none"
                setter="set_is_container"
                getter="get_is_container"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20823">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20796">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="number"
                writable="1"
                transfer-ownership="none"
                setter="set_number"
                getter="get_number"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20751">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="offset"
                writable="1"
                transfer-ownership="none"
                setter="set_offset"
                getter="get_offset"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20778">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20787">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="table"
                writable="1"
                transfer-ownership="none"
                setter="set_table"
                getter="get_table"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20814">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20760">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20805">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20727">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20737">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20730">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20731">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20703">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20714">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20706">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20707">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20708">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-flags" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20679">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_flags() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20690">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20682">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20683">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20684">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-name" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20655">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20666">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20658">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20659">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20660">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-type" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20631">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_type() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20642">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20634">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20635">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20636">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionIface"
            c:type="UDisksPartitionIface"
            glib:is-gtype-struct-for="Partition">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20602">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2328"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20604">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="2279"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="2284"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_flags">
        <callback name="handle_set_flags">
          <source-position filename="udisks-generated.h" line="2290"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_name">
        <callback name="handle_set_name">
          <source-position filename="udisks-generated.h" line="2296"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_type">
        <callback name="handle_set_type">
          <source-position filename="udisks-generated.h" line="2302"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <source-position filename="udisks-generated.h" line="2308"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20937">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20931">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_contained">
        <callback name="get_is_contained">
          <source-position filename="udisks-generated.h" line="2310"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21228">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="21222">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_container">
        <callback name="get_is_container">
          <source-position filename="udisks-generated.h" line="2312"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21195">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="21189">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="2314"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21038">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="21030">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_number">
        <callback name="get_number">
          <source-position filename="udisks-generated.h" line="2316"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20851">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20845">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_offset">
        <callback name="get_offset">
          <source-position filename="udisks-generated.h" line="2318"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20970">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20964">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="2320"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21003">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20997">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_table">
        <callback name="get_table">
          <source-position filename="udisks-generated.h" line="2322"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21144">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="21136">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="2324"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20886">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20878">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="2326"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21091">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="21083">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionProxy"
           c:symbol-prefix="partition_proxy"
           c:type="UDisksPartitionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionProxy"
           glib:get-type="udisks_partition_proxy_get_type"
           glib:type-struct="PartitionProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21859">The #UDisksPartitionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2523"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Partition"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22263">Finishes an operation started with udisks_partition_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2539"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22270">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22265">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22353">Finishes an operation started with udisks_partition_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2558"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22360">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22355">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22378">Like udisks_partition_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2561"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22393">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22380">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22381">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22382">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22383">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22384">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22288">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2542"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22303">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22290">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22291">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22292">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22293">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22294">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22233">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_proxy_new_finish() to get the result of the operation.

See udisks_partition_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2531"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22235">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22236">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22237">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22238">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22239">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22240">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22241">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22323">Like udisks_partition_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2550"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22325">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22326">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22327">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22328">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22329">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22330">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22331">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionProxyPrivate"
              c:type="UDisksPartitionProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionProxyClass"
            c:type="UDisksPartitionProxyClass"
            glib:is-gtype-struct-for="PartitionProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21865">Class structure for #UDisksPartitionProxy.</doc>
      <source-position filename="udisks-generated.h" line="2523"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21867">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionProxyPrivate"
            c:type="UDisksPartitionProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2511"/>
    </record>
    <class name="PartitionSkeleton"
           c:symbol-prefix="partition_skeleton"
           c:type="UDisksPartitionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionSkeleton"
           glib:get-type="udisks_partition_skeleton_get_type"
           glib:type-struct="PartitionSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22415">The #UDisksPartitionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2593"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Partition"/>
      <constructor name="new" c:identifier="udisks_partition_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22985">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2601"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22990">The skeleton object.</doc>
          <type name="PartitionSkeleton" c:type="UDisksPartition*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionSkeletonPrivate"
              c:type="UDisksPartitionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionSkeletonClass"
            c:type="UDisksPartitionSkeletonClass"
            glib:is-gtype-struct-for="PartitionSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22421">Class structure for #UDisksPartitionSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2593"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22423">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionSkeletonPrivate"
            c:type="UDisksPartitionSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2581"/>
    </record>
    <interface name="PartitionTable"
               c:symbol-prefix="partition_table"
               c:type="UDisksPartitionTable"
               glib:type-name="UDisksPartitionTable"
               glib:get-type="udisks_partition_table_get_type"
               glib:type-struct="PartitionTableIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18733">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2060"/>
      <function name="interface_info"
                c:identifier="udisks_partition_table_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18700">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2068"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18705">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_table_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18713">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2069"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18721">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18715">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18716">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_partitions"
                      invoker="get_partitions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18834">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_partitions() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2056"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18844">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18836">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18887">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2058"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18897">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18889">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition">
        <source-position filename="udisks-generated.h" line="2036"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition_and_format">
        <source-position filename="udisks-generated.h" line="2045"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_partition"
              c:identifier="udisks_partition_table_call_create_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18940">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_call_create_partition_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2086"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18942">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18943">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18944">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18945">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18946">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18947">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18948">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18949">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18950">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format"
              c:identifier="udisks_partition_table_call_create_partition_and_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19068">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_call_create_partition_and_format_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_and_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19070">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19071">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19072">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19073">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19074">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19075">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19076">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19077">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19078">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="9">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19079">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19080">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_finish"
              c:identifier="udisks_partition_table_call_create_partition_and_format_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19119">Finishes an operation started with udisks_partition_table_call_create_partition_and_format().</doc>
        <source-position filename="udisks-generated.h" line="2127"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19128">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19121">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19122">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19123">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition_and_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_sync"
              c:identifier="udisks_partition_table_call_create_partition_and_format_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19149">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition_and_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2133"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19167">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19151">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19152">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19153">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19154">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19155">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19156">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19157">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19158">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19159">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19160">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_finish"
              c:identifier="udisks_partition_table_call_create_partition_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18985">Finishes an operation started with udisks_partition_table_call_create_partition().</doc>
        <source-position filename="udisks-generated.h" line="2097"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18994">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18987">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18988">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18989">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_sync"
              c:identifier="udisks_partition_table_call_create_partition_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19015">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2103"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19031">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19017">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19018">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19019">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19020">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19021">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19022">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19023">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19024">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition"
              c:identifier="udisks_partition_table_complete_create_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19208">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2073"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19210">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19211">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19212">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition_and_format"
              c:identifier="udisks_partition_table_complete_create_partition_and_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19229">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2078"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19231">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19232">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19233">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_partitions"
              c:identifier="udisks_partition_table_dup_partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18854">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2150"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18862">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18856">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_table_dup_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18907">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2154"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18915">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18909">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_partition_table_get_partitions"
              glib:get-property="partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18834">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_partitions() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2149"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18844">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18836">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_table_get_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18887">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18897">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18889">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_partitions"
              c:identifier="udisks_partition_table_set_partitions"
              glib:set-property="partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18872">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18874">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18875">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_table_set_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18925">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18927">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18928">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="partitions"
                writable="1"
                transfer-ownership="none"
                setter="set_partitions"
                getter="get_partitions">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18814">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="type"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18823">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-create-partition" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18757">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18771">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18760">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18761">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18762">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18763">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18764">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18765">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-partition-and-format" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18784">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition_and_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18800">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18787">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18788">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18789">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18790">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18791">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18792">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18793">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18794">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionTableIface"
            c:type="UDisksPartitionTableIface"
            glib:is-gtype-struct-for="PartitionTable">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18739">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2060"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18741">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_partition">
        <callback name="handle_create_partition">
          <source-position filename="udisks-generated.h" line="2036"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_partition_and_format">
        <callback name="handle_create_partition_and_format">
          <source-position filename="udisks-generated.h" line="2045"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_format_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_format_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_partitions">
        <callback name="get_partitions">
          <source-position filename="udisks-generated.h" line="2056"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18844">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="18836">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="2058"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18897">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="18889">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionTableProxy"
           c:symbol-prefix="partition_table_proxy"
           c:type="UDisksPartitionTableProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionTableProxy"
           glib:get-type="udisks_partition_table_proxy_get_type"
           glib:type-struct="PartitionTableProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19252">The #UDisksPartitionTableProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2181"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PartitionTable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_table_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19532">Finishes an operation started with udisks_partition_table_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19539">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19534">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19622">Finishes an operation started with udisks_partition_table_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2216"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19629">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19624">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19647">Like udisks_partition_table_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2219"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19662">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19649">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19650">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19651">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19652">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19653">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_table_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19557">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2200"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19572">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19559">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19560">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19561">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19562">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19563">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_table_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19502">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_proxy_new_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19504">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19505">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19506">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19507">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19508">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19509">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19510">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_table_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19592">Like udisks_partition_table_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19594">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19595">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19596">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19597">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19598">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19599">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19600">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableProxyPrivate"
              c:type="UDisksPartitionTableProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableProxyClass"
            c:type="UDisksPartitionTableProxyClass"
            glib:is-gtype-struct-for="PartitionTableProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19258">Class structure for #UDisksPartitionTableProxy.</doc>
      <source-position filename="udisks-generated.h" line="2181"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19260">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionTableProxyPrivate"
            c:type="UDisksPartitionTableProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2169"/>
    </record>
    <class name="PartitionTableSkeleton"
           c:symbol-prefix="partition_table_skeleton"
           c:type="UDisksPartitionTableSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionTableSkeleton"
           glib:get-type="udisks_partition_table_skeleton_get_type"
           glib:type-struct="PartitionTableSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19684">The #UDisksPartitionTableSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2251"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="PartitionTable"/>
      <constructor name="new"
                   c:identifier="udisks_partition_table_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20150">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2259"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20155">The skeleton object.</doc>
          <type name="PartitionTableSkeleton" c:type="UDisksPartitionTable*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableSkeletonPrivate"
              c:type="UDisksPartitionTableSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableSkeletonClass"
            c:type="UDisksPartitionTableSkeletonClass"
            glib:is-gtype-struct-for="PartitionTableSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19690">Class structure for #UDisksPartitionTableSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2251"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19692">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionTableSkeletonPrivate"
            c:type="UDisksPartitionTableSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2239"/>
    </record>
    <record name="PartitionTypeInfo"
            c:type="UDisksPartitionTypeInfo"
            glib:type-name="UDisksPartitionTypeInfo"
            glib:get-type="udisks_partition_type_info_get_type"
            c:symbol-prefix="partition_type_info">
      <doc xml:space="preserve"
           filename="udisksclient.h"
           line="166">Detailed information about a partition type.

@table_subtype is used to break the set of partition types for
@table_type into a logical subsets. It is typically only used in
user interfaces where the partition type is selected.

This struct may grow in the future without it being considered an
ABI break.</doc>
      <source-position filename="udisksclient.h" line="189"/>
      <field name="table_type" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="168">A partition table type e.g. 'dos' or 'gpt'</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="table_subtype" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="169">A partition table sub-type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="170">A partition type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="171">Flags from the #UDisksPartitionTypeInfoFlags enumeration.</doc>
        <type name="PartitionTypeInfoFlags"
              c:type="UDisksPartitionTypeInfoFlags"/>
      </field>
      <method name="free" c:identifier="udisks_partition_type_info_free">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2699">Frees @info.</doc>
        <source-position filename="udisksclient.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2701">A #UDisksPartitionTypeInfo.</doc>
            <type name="PartitionTypeInfo" c:type="UDisksPartitionTypeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PartitionTypeInfoFlags"
              glib:type-name="UDisksPartitionTypeInfoFlags"
              glib:get-type="udisks_partition_type_info_flags_get_type"
              c:type="UDisksPartitionTypeInfoFlags">
      <doc xml:space="preserve"
           filename="udisksenums.h"
           line="86">Flags describing a partition type.</doc>
      <member name="none"
              value="0"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE"
              glib:nick="none"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="88">No flags set.</doc>
      </member>
      <member name="swap"
              value="1"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP"
              glib:nick="swap"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="89">Partition type is used for swap.</doc>
      </member>
      <member name="raid"
              value="2"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID"
              glib:nick="raid"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="90">Partition type is used for RAID/LVM or similar.</doc>
      </member>
      <member name="hidden"
              value="4"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN"
              glib:nick="hidden"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="91">Partition type indicates the partition is hidden (e.g. 'dos' type 0x1b "Hidden W95 FAT32"). Note that this is not the same as user-toggleable attributes/flags for a partition.</doc>
      </member>
      <member name="create_only"
              value="8"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY"
              glib:nick="create-only"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="92">Partition type can only be used when creating a partition and e.g. should not be selectable in a "change partition type" user interface (e.g. 'dos' type 0x05, 0x0f and 0x85 for extended partitions).</doc>
      </member>
      <member name="system"
              value="16"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM"
              glib:nick="system"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="93">Partition type indicates the partition is part of the system / bootloader (e.g. 'dos' types 0xee, 0xff, 'gpt' types for 'EFI System partition' and 'BIOS Boot partition').</doc>
      </member>
    </bitfield>
    <interface name="PhysicalVolume"
               c:symbol-prefix="physical_volume"
               c:type="UDisksPhysicalVolume"
               version="2.0.0"
               glib:type-name="UDisksPhysicalVolume"
               glib:get-type="udisks_physical_volume_get_type"
               glib:type-struct="PhysicalVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43293">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5304"/>
      <function name="interface_info"
                c:identifier="udisks_physical_volume_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43255">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5312"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43260">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_physical_volume_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43270">Overrides all #GObject properties in the #UDisksPhysicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5313"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43278">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43272">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43273">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_free_size"
                      invoker="get_free_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43451">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43459">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43453">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5300"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43422">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43416">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_volume_group"
                      invoker="get_volume_group"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43355">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_physical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5302"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43365">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43357">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_volume_group"
              c:identifier="udisks_physical_volume_dup_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43377">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5318"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43385">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43379">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_free_size"
              c:identifier="udisks_physical_volume_get_free_size"
              glib:get-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43451">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5324"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43459">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43453">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_physical_volume_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43414">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5321"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43422">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43416">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_physical_volume_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43355">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_physical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5317"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43365">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43357">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_free_size"
              c:identifier="udisks_physical_volume_set_free_size"
              glib:set-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43471">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5325"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43473">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43474">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_physical_volume_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43434">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5322"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43436">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43437">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_physical_volume_set_volume_group"
              glib:set-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43397">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5319"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43399">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43400">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="free-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_free_size"
                getter="get_free_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43342">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43331">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_volume_group"
                getter="get_volume_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43320">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="PhysicalVolumeIface"
            c:type="UDisksPhysicalVolumeIface"
            glib:is-gtype-struct-for="PhysicalVolume"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43301">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5304"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43303">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_free_size">
        <callback name="get_free_size">
          <source-position filename="udisks-generated.h" line="5298"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43459">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43453">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="5300"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43422">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43416">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_volume_group">
        <callback name="get_volume_group">
          <source-position filename="udisks-generated.h" line="5302"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43365">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43357">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PhysicalVolumeProxy"
           c:symbol-prefix="physical_volume_proxy"
           c:type="UDisksPhysicalVolumeProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPhysicalVolumeProxy"
           glib:get-type="udisks_physical_volume_proxy_get_type"
           glib:type-struct="PhysicalVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43490">The #UDisksPhysicalVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5351"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PhysicalVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_physical_volume_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43788">Finishes an operation started with udisks_physical_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5367"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43795">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43790">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_physical_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_physical_volume_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43884">Finishes an operation started with udisks_physical_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5386"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43891">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43886">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_physical_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_physical_volume_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43911">Like udisks_physical_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_physical_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5389"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43926">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43913">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43914">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43915">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43916">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43917">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_physical_volume_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43815">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_physical_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5370"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43830">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43817">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43818">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43819">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43820">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43821">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_physical_volume_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43756">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_physical_volume_proxy_new_finish() to get the result of the operation.

See udisks_physical_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5359"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43758">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43759">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43760">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43761">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43762">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43763">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43764">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_physical_volume_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43852">Like udisks_physical_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_physical_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_physical_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5378"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43854">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43855">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43856">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43857">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43858">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43859">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43860">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PhysicalVolumeProxyPrivate"
              c:type="UDisksPhysicalVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="PhysicalVolumeProxyClass"
            c:type="UDisksPhysicalVolumeProxyClass"
            glib:is-gtype-struct-for="PhysicalVolumeProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43498">Class structure for #UDisksPhysicalVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="5351"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43500">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PhysicalVolumeProxyPrivate"
            c:type="UDisksPhysicalVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5339"/>
    </record>
    <class name="PhysicalVolumeSkeleton"
           c:symbol-prefix="physical_volume_skeleton"
           c:type="UDisksPhysicalVolumeSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPhysicalVolumeSkeleton"
           glib:get-type="udisks_physical_volume_skeleton_get_type"
           glib:type-struct="PhysicalVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43950">The #UDisksPhysicalVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5421"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="PhysicalVolume"/>
      <constructor name="new"
                   c:identifier="udisks_physical_volume_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44433">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5429"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44438">The skeleton object.</doc>
          <type name="PhysicalVolumeSkeleton" c:type="UDisksPhysicalVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PhysicalVolumeSkeletonPrivate"
              c:type="UDisksPhysicalVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PhysicalVolumeSkeletonClass"
            c:type="UDisksPhysicalVolumeSkeletonClass"
            glib:is-gtype-struct-for="PhysicalVolumeSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43958">Class structure for #UDisksPhysicalVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5421"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43960">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PhysicalVolumeSkeletonPrivate"
            c:type="UDisksPhysicalVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5409"/>
    </record>
    <function-macro name="SWAPSPACE"
                    c:identifier="UDISKS_SWAPSPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2964"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_GET_IFACE"
                    c:identifier="UDISKS_SWAPSPACE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2966"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY"
                    c:identifier="UDISKS_SWAPSPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3089"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3090"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3091"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3159"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3160"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Swapspace"
               c:symbol-prefix="swapspace"
               c:type="UDisksSwapspace"
               glib:type-name="UDisksSwapspace"
               glib:get-type="udisks_swapspace_get_type"
               glib:type-struct="SwapspaceIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25686">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2995"/>
      <function name="interface_info"
                c:identifier="udisks_swapspace_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25654">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3003"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25659">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_swapspace_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25667">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3004"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25675">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25669">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25670">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25792">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2993"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25800">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25794">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="2977"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <source-position filename="udisks-generated.h" line="2983"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <source-position filename="udisks-generated.h" line="2988"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_set_label"
              c:identifier="udisks_swapspace_call_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26021">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_set_label_finish() to get the result of the operation.

See udisks_swapspace_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3059"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26023">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26024">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26025">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26026">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26027">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26028">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_swapspace_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26057">Finishes an operation started with udisks_swapspace_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="3067"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26065">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26059">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26060">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_swapspace_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26084">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3072"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26096">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26086">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26087">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26088">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26089">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start" c:identifier="udisks_swapspace_call_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25825">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_start_finish() to get the result of the operation.

See udisks_swapspace_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3023"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25827">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25828">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25830">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25831">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_swapspace_call_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25858">Finishes an operation started with udisks_swapspace_call_start().</doc>
        <source-position filename="udisks-generated.h" line="3030"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25866">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25860">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25861">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_swapspace_call_start_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25885">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3035"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25896">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25887">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25888">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25889">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop" c:identifier="udisks_swapspace_call_stop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25923">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_stop_finish() to get the result of the operation.

See udisks_swapspace_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3041"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25925">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25926">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25927">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25928">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25929">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_swapspace_call_stop_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25956">Finishes an operation started with udisks_swapspace_call_stop().</doc>
        <source-position filename="udisks-generated.h" line="3048"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25964">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25958">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25959">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_swapspace_call_stop_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25983">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_stop() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3053"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25994">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25985">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25986">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25987">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_swapspace_complete_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26161">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3016"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26163">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26164">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_swapspace_complete_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26125">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3008"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26127">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26128">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_swapspace_complete_stop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26143">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3012"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26145">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26146">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_swapspace_get_active"
              glib:get-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25792">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3082"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25800">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25794">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_swapspace_set_active"
              glib:set-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25810">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3083"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25812">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25813">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25781">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25756">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25767">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25759">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25760">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25761">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25710">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25720">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25713">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25714">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25733">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25743">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25736">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25737">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SwapspaceIface"
            c:type="UDisksSwapspaceIface"
            glib:is-gtype-struct-for="Swapspace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25692">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2995"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25694">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="2977"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <source-position filename="udisks-generated.h" line="2983"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <source-position filename="udisks-generated.h" line="2988"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <source-position filename="udisks-generated.h" line="2993"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25800">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25794">A #UDisksSwapspace.</doc>
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SwapspaceProxy"
           c:symbol-prefix="swapspace_proxy"
           c:type="UDisksSwapspaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksSwapspaceProxy"
           glib:get-type="udisks_swapspace_proxy_get_type"
           glib:type-struct="SwapspaceProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="26181">The #UDisksSwapspaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3109"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Swapspace"/>
      <constructor name="new_finish"
                   c:identifier="udisks_swapspace_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26441">Finishes an operation started with udisks_swapspace_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26448">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26443">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26531">Finishes an operation started with udisks_swapspace_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3144"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26538">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26533">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26556">Like udisks_swapspace_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3147"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26571">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26558">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26559">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26560">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26561">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26562">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_swapspace_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26466">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26481">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26468">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26469">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26470">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26471">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26472">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_swapspace_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26411">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_proxy_new_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26413">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26414">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26415">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26416">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26417">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26418">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26419">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_swapspace_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26501">Like udisks_swapspace_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26503">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26504">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26505">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26506">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26507">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26508">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26509">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceProxyPrivate"
              c:type="UDisksSwapspaceProxyPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceProxyClass"
            c:type="UDisksSwapspaceProxyClass"
            glib:is-gtype-struct-for="SwapspaceProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="26187">Class structure for #UDisksSwapspaceProxy.</doc>
      <source-position filename="udisks-generated.h" line="3109"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26189">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="SwapspaceProxyPrivate"
            c:type="UDisksSwapspaceProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3097"/>
    </record>
    <class name="SwapspaceSkeleton"
           c:symbol-prefix="swapspace_skeleton"
           c:type="UDisksSwapspaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksSwapspaceSkeleton"
           glib:get-type="udisks_swapspace_skeleton_get_type"
           glib:type-struct="SwapspaceSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="26593">The #UDisksSwapspaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3179"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Swapspace"/>
      <constructor name="new" c:identifier="udisks_swapspace_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27046">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3187"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27051">The skeleton object.</doc>
          <type name="SwapspaceSkeleton" c:type="UDisksSwapspace*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceSkeletonPrivate"
              c:type="UDisksSwapspaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceSkeletonClass"
            c:type="UDisksSwapspaceSkeletonClass"
            glib:is-gtype-struct-for="SwapspaceSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="26599">Class structure for #UDisksSwapspaceSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3179"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26601">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="SwapspaceSkeletonPrivate"
            c:type="UDisksSwapspaceSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3167"/>
    </record>
    <docsection name="UDisksBlock">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12854">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksBlockLVM2">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42097">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDrive">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="3713">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveAta">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="8027">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksEncrypted">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27064">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksFilesystem">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23003">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksFilesystemBTRFS">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37846">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksJob">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34680">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksLogicalVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48350">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksLoop">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29214">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksMDRaid">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30803">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManager">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="159">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerBTRFS">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36843">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerLVM2">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41106">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksObject">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55155">This section contains the #UDisksObject, #UDisksObjectProxy, and #UDisksObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.</doc>
    </docsection>
    <docsection name="UDisksObjectManagerClient">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57118">This section contains a #GDBusObjectManagerClient that uses udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.</doc>
    </docsection>
    <docsection name="UDisksPartition">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20168">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksPartitionTable">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18420">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksPhysicalVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43181">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksSwapspace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25500">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksVDOVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52428">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksVolumeGroup">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="44453">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <interface name="VDOVolume"
               c:symbol-prefix="vdo_volume"
               c:type="UDisksVDOVolume"
               version="2.9.0"
               glib:type-name="UDisksVDOVolume"
               glib:get-type="udisks_vdo_volume_get_type"
               glib:type-struct="VDOVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52829">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6486"/>
      <function name="interface_info"
                c:identifier="udisks_vdo_volume_interface_info"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52787">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6494"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52792">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_vdo_volume_override_properties"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52802">Overrides all #GObject properties in the #UDisksVDOVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6495"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52810">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52804">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52805">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_compression"
                      invoker="get_compression"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53347">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6472"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53355">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53349">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_compression_state"
                      invoker="get_compression_state"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53192">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_compression_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6474"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53202">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53194">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_deduplication"
                      invoker="get_deduplication"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53384">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6476"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53392">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53386">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_index_state"
                      invoker="get_index_state"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53251">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_index_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6478"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53261">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53253">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operating_mode"
                      invoker="get_operating_mode"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_operating_mode() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6480"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53143">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53135">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_used_size"
                      invoker="get_used_size"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53310">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6482"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53318">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53312">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vdo_pool"
                      invoker="get_vdo_pool"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53074">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_vdo_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6484"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53084">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53076">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_compression">
        <source-position filename="udisks-generated.h" line="6443"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_deduplication">
        <source-position filename="udisks-generated.h" line="6449"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_statistics">
        <source-position filename="udisks-generated.h" line="6455"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize_logical">
        <source-position filename="udisks-generated.h" line="6460"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize_physical">
        <source-position filename="udisks-generated.h" line="6466"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_enable_compression"
              c:identifier="udisks_vdo_volume_call_enable_compression"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53421">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_enable_compression_finish() to get the result of the operation.

See udisks_vdo_volume_call_enable_compression_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6523"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53423">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53424">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53425">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53426">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53427">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53428">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_compression_finish"
              c:identifier="udisks_vdo_volume_call_enable_compression_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53459">Finishes an operation started with udisks_vdo_volume_call_enable_compression().</doc>
        <source-position filename="udisks-generated.h" line="6531"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53467">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53461">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53462">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_enable_compression().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_compression_sync"
              c:identifier="udisks_vdo_volume_call_enable_compression_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53488">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_enable_compression() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6536"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53500">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53490">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53491">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53492">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53493">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication"
              c:identifier="udisks_vdo_volume_call_enable_deduplication"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53531">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_enable_deduplication_finish() to get the result of the operation.

See udisks_vdo_volume_call_enable_deduplication_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6543"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53533">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53534">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53535">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53536">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53537">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53538">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication_finish"
              c:identifier="udisks_vdo_volume_call_enable_deduplication_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53569">Finishes an operation started with udisks_vdo_volume_call_enable_deduplication().</doc>
        <source-position filename="udisks-generated.h" line="6551"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53577">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53571">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53572">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_enable_deduplication().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication_sync"
              c:identifier="udisks_vdo_volume_call_enable_deduplication_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53598">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_enable_deduplication() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6556"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53610">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53600">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53601">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53602">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics"
              c:identifier="udisks_vdo_volume_call_get_statistics"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53861">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_get_statistics_finish() to get the result of the operation.

See udisks_vdo_volume_call_get_statistics_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6603"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53863">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53864">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53865">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53866">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53867">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_finish"
              c:identifier="udisks_vdo_volume_call_get_statistics_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53896">Finishes an operation started with udisks_vdo_volume_call_get_statistics().</doc>
        <source-position filename="udisks-generated.h" line="6610"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53905">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53898">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="out_stats"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53899">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53900">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_get_statistics().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_sync"
              c:identifier="udisks_vdo_volume_call_get_statistics_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53928">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_get_statistics() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6616"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53940">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53930">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53931">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_stats"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53932">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53933">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical"
              c:identifier="udisks_vdo_volume_call_resize_logical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53641">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_resize_logical_finish() to get the result of the operation.

See udisks_vdo_volume_call_resize_logical_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6563"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53643">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53644">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53645">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53646">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53647">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53648">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical_finish"
              c:identifier="udisks_vdo_volume_call_resize_logical_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53679">Finishes an operation started with udisks_vdo_volume_call_resize_logical().</doc>
        <source-position filename="udisks-generated.h" line="6571"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53687">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53681">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53682">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_resize_logical().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical_sync"
              c:identifier="udisks_vdo_volume_call_resize_logical_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53708">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_resize_logical() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6576"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53720">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53710">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53711">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53712">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53713">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical"
              c:identifier="udisks_vdo_volume_call_resize_physical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53751">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_resize_physical_finish() to get the result of the operation.

See udisks_vdo_volume_call_resize_physical_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6583"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53753">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53754">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53755">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53756">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53757">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53758">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical_finish"
              c:identifier="udisks_vdo_volume_call_resize_physical_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53789">Finishes an operation started with udisks_vdo_volume_call_resize_physical().</doc>
        <source-position filename="udisks-generated.h" line="6591"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53797">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53791">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53792">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_resize_physical().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical_sync"
              c:identifier="udisks_vdo_volume_call_resize_physical_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53818">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_resize_physical() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6596"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53830">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53820">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53821">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53822">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53823">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_compression"
              c:identifier="udisks_vdo_volume_complete_enable_compression"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53971">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6499"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53973">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53974">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_deduplication"
              c:identifier="udisks_vdo_volume_complete_enable_deduplication"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53991">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53993">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53994">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_statistics"
              c:identifier="udisks_vdo_volume_complete_get_statistics"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54051">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6515"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54053">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54054">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="stats" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54055">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize_logical"
              c:identifier="udisks_vdo_volume_complete_resize_logical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54011">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6507"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54013">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54014">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize_physical"
              c:identifier="udisks_vdo_volume_complete_resize_physical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54031">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54033">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54034">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_compression_state"
              c:identifier="udisks_vdo_volume_dup_compression_state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53214">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6635"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53222">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53216">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_index_state"
              c:identifier="udisks_vdo_volume_dup_index_state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53273">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6639"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53281">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53275">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operating_mode"
              c:identifier="udisks_vdo_volume_dup_operating_mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53155">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6631"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53163">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53157">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vdo_pool"
              c:identifier="udisks_vdo_volume_dup_vdo_pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53096">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6627"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53104">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53098">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression"
              c:identifier="udisks_vdo_volume_get_compression"
              glib:get-property="compression"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53347">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6645"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53355">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53349">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression_state"
              c:identifier="udisks_vdo_volume_get_compression_state"
              glib:get-property="compression-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53192">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_compression_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6634"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53202">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53194">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deduplication"
              c:identifier="udisks_vdo_volume_get_deduplication"
              glib:get-property="deduplication"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53384">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6648"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53392">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53386">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index_state"
              c:identifier="udisks_vdo_volume_get_index_state"
              glib:get-property="index-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53251">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_index_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6638"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53261">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53253">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operating_mode"
              c:identifier="udisks_vdo_volume_get_operating_mode"
              glib:get-property="operating-mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_operating_mode() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6630"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53143">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53135">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used_size"
              c:identifier="udisks_vdo_volume_get_used_size"
              glib:get-property="used-size"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53310">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6642"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53318">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53312">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vdo_pool"
              c:identifier="udisks_vdo_volume_get_vdo_pool"
              glib:get-property="vdo-pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53074">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_vdo_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6626"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53084">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53076">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_compression"
              c:identifier="udisks_vdo_volume_set_compression"
              glib:set-property="compression"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53367">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6646"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53369">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53370">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_compression_state"
              c:identifier="udisks_vdo_volume_set_compression_state"
              glib:set-property="compression-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53234">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6636"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53236">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53237">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_deduplication"
              c:identifier="udisks_vdo_volume_set_deduplication"
              glib:set-property="deduplication"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53404">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6649"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53406">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53407">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_index_state"
              c:identifier="udisks_vdo_volume_set_index_state"
              glib:set-property="index-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53293">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6640"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53295">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53296">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operating_mode"
              c:identifier="udisks_vdo_volume_set_operating_mode"
              glib:set-property="operating-mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53175">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6632"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53177">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53178">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_used_size"
              c:identifier="udisks_vdo_volume_set_used_size"
              glib:set-property="used-size"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53330">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6643"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53332">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53333">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vdo_pool"
              c:identifier="udisks_vdo_volume_set_vdo_pool"
              glib:set-property="vdo-pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53116">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53118">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53119">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="compression"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_compression"
                getter="get_compression"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53050">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="compression-state"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_compression_state"
                getter="get_compression_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53017">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="deduplication"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_deduplication"
                getter="get_deduplication"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53061">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="index-state"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_index_state"
                getter="get_index_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53028">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="operating-mode"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_operating_mode"
                getter="get_operating_mode"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53006">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="used-size"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_used_size"
                getter="get_used_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53039">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vdo-pool"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_vdo_pool"
                getter="get_vdo_pool"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52995">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-enable-compression"
                   when="last"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52865">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_enable_compression() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52876">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52868">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52869">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52870">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-deduplication"
                   when="last"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52891">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_enable_deduplication() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52902">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52894">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52895">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52896">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-statistics" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52969">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_get_statistics() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52979">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52972">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52973">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize-logical" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52917">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_resize_logical() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52928">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52920">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52921">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52922">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize-physical" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52943">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_resize_physical() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52954">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52946">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52947">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52948">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="VDOVolumeIface"
            c:type="UDisksVDOVolumeIface"
            glib:is-gtype-struct-for="VDOVolume"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52837">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6486"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52839">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_compression">
        <callback name="handle_enable_compression">
          <source-position filename="udisks-generated.h" line="6443"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_deduplication">
        <callback name="handle_enable_deduplication">
          <source-position filename="udisks-generated.h" line="6449"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_statistics">
        <callback name="handle_get_statistics">
          <source-position filename="udisks-generated.h" line="6455"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize_logical">
        <callback name="handle_resize_logical">
          <source-position filename="udisks-generated.h" line="6460"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize_physical">
        <callback name="handle_resize_physical">
          <source-position filename="udisks-generated.h" line="6466"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compression">
        <callback name="get_compression">
          <source-position filename="udisks-generated.h" line="6472"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53355">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53349">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compression_state">
        <callback name="get_compression_state">
          <source-position filename="udisks-generated.h" line="6474"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53202">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53194">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_deduplication">
        <callback name="get_deduplication">
          <source-position filename="udisks-generated.h" line="6476"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53392">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53386">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_index_state">
        <callback name="get_index_state">
          <source-position filename="udisks-generated.h" line="6478"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53261">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53253">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operating_mode">
        <callback name="get_operating_mode">
          <source-position filename="udisks-generated.h" line="6480"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53143">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53135">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_used_size">
        <callback name="get_used_size">
          <source-position filename="udisks-generated.h" line="6482"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53318">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53312">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vdo_pool">
        <callback name="get_vdo_pool">
          <source-position filename="udisks-generated.h" line="6484"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="53084">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="53076">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VDOVolumeProxy"
           c:symbol-prefix="vdo_volume_proxy"
           c:type="UDisksVDOVolumeProxy"
           version="2.9.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksVDOVolumeProxy"
           glib:get-type="udisks_vdo_volume_proxy_get_type"
           glib:type-struct="VDOVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54076">The #UDisksVDOVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6675"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="VDOVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_vdo_volume_proxy_new_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54438">Finishes an operation started with udisks_vdo_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6691"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54445">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54440">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_vdo_volume_proxy_new_for_bus_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54534">Finishes an operation started with udisks_vdo_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6710"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54541">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54536">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_vdo_volume_proxy_new_for_bus_sync"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54561">Like udisks_vdo_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_vdo_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6713"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54576">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54563">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54564">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54565">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54566">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54567">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_vdo_volume_proxy_new_sync"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54465">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_vdo_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6694"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54480">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54467">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54468">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54469">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54470">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54471">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_vdo_volume_proxy_new"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54406">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_proxy_new_finish() to get the result of the operation.

See udisks_vdo_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6683"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54408">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54409">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54410">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54411">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54412">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54413">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54414">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_vdo_volume_proxy_new_for_bus"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54502">Like udisks_vdo_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_vdo_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6702"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54504">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54505">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54506">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54507">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54508">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54509">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54510">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VDOVolumeProxyPrivate"
              c:type="UDisksVDOVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="VDOVolumeProxyClass"
            c:type="UDisksVDOVolumeProxyClass"
            glib:is-gtype-struct-for="VDOVolumeProxy"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54084">Class structure for #UDisksVDOVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="6675"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54086">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="VDOVolumeProxyPrivate"
            c:type="UDisksVDOVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6663"/>
    </record>
    <class name="VDOVolumeSkeleton"
           c:symbol-prefix="vdo_volume_skeleton"
           c:type="UDisksVDOVolumeSkeleton"
           version="2.9.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksVDOVolumeSkeleton"
           glib:get-type="udisks_vdo_volume_skeleton_get_type"
           glib:type-struct="VDOVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54600">The #UDisksVDOVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6745"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="VDOVolume"/>
      <constructor name="new"
                   c:identifier="udisks_vdo_volume_skeleton_new"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55135">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6753"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55140">The skeleton object.</doc>
          <type name="VDOVolumeSkeleton" c:type="UDisksVDOVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VDOVolumeSkeletonPrivate"
              c:type="UDisksVDOVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="VDOVolumeSkeletonClass"
            c:type="UDisksVDOVolumeSkeletonClass"
            glib:is-gtype-struct-for="VDOVolumeSkeleton"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54608">Class structure for #UDisksVDOVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6745"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54610">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="VDOVolumeSkeletonPrivate"
            c:type="UDisksVDOVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6733"/>
    </record>
    <function-macro name="VDO_VOLUME"
                    c:identifier="UDISKS_VDO_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6430"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_VDO_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6432"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6655"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6656"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6725"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6726"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6727"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP"
                    c:identifier="UDISKS_VOLUME_GROUP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5436"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_GET_IFACE"
                    c:identifier="UDISKS_VOLUME_GROUP_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5438"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5849"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5850"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY_GET_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5851"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5919"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5920"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5921"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="VolumeGroup"
               c:symbol-prefix="volume_group"
               c:type="UDisksVolumeGroup"
               version="2.0.0"
               glib:type-name="UDisksVolumeGroup"
               glib:get-type="udisks_volume_group_get_type"
               glib:type-struct="VolumeGroupIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45248">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5531"/>
      <function name="interface_info"
                c:identifier="udisks_volume_group_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45207">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5539"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45212">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_volume_group_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45222">Overrides all #GObject properties in the #UDisksVolumeGroup interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5540"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45230">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45224">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45225">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_extent_size"
                      invoker="get_extent_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45819">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45827">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45821">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_free_size"
                      invoker="get_free_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45782">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5521"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45790">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45784">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45627">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5523"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45637">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45629">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_needs_polling"
                      invoker="get_needs_polling"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45856">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5525"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45864">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45858">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45745">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45753">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45747">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45686">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5529"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45696">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45688">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="5449"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_plain_volume">
        <source-position filename="udisks-generated.h" line="5455"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_thin_pool_volume">
        <source-position filename="udisks-generated.h" line="5462"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_thin_volume">
        <source-position filename="udisks-generated.h" line="5469"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_vdo_volume">
        <source-position filename="udisks-generated.h" line="5477"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="5490"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_empty_device">
        <source-position filename="udisks-generated.h" line="5496"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_poll">
        <source-position filename="udisks-generated.h" line="5502"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="5506"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rename">
        <source-position filename="udisks-generated.h" line="5513"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_volume_group_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46217">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_add_device_finish() to get the result of the operation.

See udisks_volume_group_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5650"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46219">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46220">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46221">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46222">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46223">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46224">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_volume_group_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46255">Finishes an operation started with udisks_volume_group_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="5658"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46263">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46257">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46258">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_volume_group_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46284">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5663"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46296">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46286">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46287">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46288">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46289">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume"
              c:identifier="udisks_volume_group_call_create_plain_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46553">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_plain_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_plain_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5712"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46555">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46556">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46557">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46558">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46559">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46560">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46561">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_finish"
              c:identifier="udisks_volume_group_call_create_plain_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46594">Finishes an operation started with udisks_volume_group_call_create_plain_volume().</doc>
        <source-position filename="udisks-generated.h" line="5721"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46603">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46596">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46597">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46598">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_plain_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_sync"
              c:identifier="udisks_volume_group_call_create_plain_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46626">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_plain_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5727"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46640">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46628">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46629">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46630">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46631">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46632">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46633">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46675">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_thin_pool_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_thin_pool_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5736"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46677">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46678">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46679">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46680">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46681">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46682">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46683">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume_finish"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46716">Finishes an operation started with udisks_volume_group_call_create_thin_pool_volume().</doc>
        <source-position filename="udisks-generated.h" line="5745"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46725">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46718">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46719">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46720">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_thin_pool_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume_sync"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46748">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_thin_pool_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5751"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46762">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46750">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46751">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46752">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46753">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46754">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46755">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume"
              c:identifier="udisks_volume_group_call_create_thin_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46797">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_thin_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_thin_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5760"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46799">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46800">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46801">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46802">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46803">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46804">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46805">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46806">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume_finish"
              c:identifier="udisks_volume_group_call_create_thin_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46841">Finishes an operation started with udisks_volume_group_call_create_thin_volume().</doc>
        <source-position filename="udisks-generated.h" line="5770"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46850">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46843">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46844">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46845">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_thin_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume_sync"
              c:identifier="udisks_volume_group_call_create_thin_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46873">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_thin_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5776"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46888">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46875">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46876">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46877">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46878">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46879">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46880">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46881">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume"
              c:identifier="udisks_volume_group_call_create_vdo_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46925">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_vdo_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_vdo_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5786"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46927">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46928">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46929">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46930">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46931">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46932">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46933">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46934">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46935">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46936">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46937">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="11">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46938">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46939">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume_finish"
              c:identifier="udisks_volume_group_call_create_vdo_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46984">Finishes an operation started with udisks_volume_group_call_create_vdo_volume().</doc>
        <source-position filename="udisks-generated.h" line="5801"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46993">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46986">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46987">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46988">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_vdo_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume_sync"
              c:identifier="udisks_volume_group_call_create_vdo_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47016">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_vdo_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5807"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47036">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47018">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47019">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47020">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47021">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47022">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47023">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47024">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47025">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47026">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47027">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47028">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47029">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_volume_group_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45991">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_delete_finish() to get the result of the operation.

See udisks_volume_group_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5608"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45993">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45994">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45995">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45996">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45997">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45998">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_volume_group_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46029">Finishes an operation started with udisks_volume_group_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="5616"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46037">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46031">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46032">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_volume_group_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46058">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5621"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46070">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46060">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46061">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46062">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46063">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device"
              c:identifier="udisks_volume_group_call_empty_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46327">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_empty_device_finish() to get the result of the operation.

See udisks_volume_group_call_empty_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5670"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46329">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46330">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46331">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46332">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46333">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46334">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device_finish"
              c:identifier="udisks_volume_group_call_empty_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46365">Finishes an operation started with udisks_volume_group_call_empty_device().</doc>
        <source-position filename="udisks-generated.h" line="5678"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46373">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46367">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46368">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_empty_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device_sync"
              c:identifier="udisks_volume_group_call_empty_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46394">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_empty_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5683"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46406">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46396">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46397">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46398">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46399">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll"
              c:identifier="udisks_volume_group_call_poll"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45893">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_poll_finish() to get the result of the operation.

See udisks_volume_group_call_poll_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5592"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45895">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45896">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45897">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45898">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll_finish"
              c:identifier="udisks_volume_group_call_poll_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45925">Finishes an operation started with udisks_volume_group_call_poll().</doc>
        <source-position filename="udisks-generated.h" line="5598"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45933">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45927">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45928">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_poll().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll_sync"
              c:identifier="udisks_volume_group_call_poll_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45954">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_poll() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5603"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45964">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45956">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45957">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_volume_group_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46437">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_remove_device_finish() to get the result of the operation.

See udisks_volume_group_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5690"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46439">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46440">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46441">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46442">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46443">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46444">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46445">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_volume_group_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46478">Finishes an operation started with udisks_volume_group_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="5699"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46486">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46480">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46481">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_volume_group_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46507">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5704"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46520">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46509">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46510">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46511">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46512">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46513">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename"
              c:identifier="udisks_volume_group_call_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46101">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_rename_finish() to get the result of the operation.

See udisks_volume_group_call_rename_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46103">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46104">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46105">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46106">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46107">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46108">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_finish"
              c:identifier="udisks_volume_group_call_rename_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46139">Finishes an operation started with udisks_volume_group_call_rename().</doc>
        <source-position filename="udisks-generated.h" line="5636"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46148">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46141">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46142">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46143">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_rename().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_sync"
              c:identifier="udisks_volume_group_call_rename_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46171">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_rename() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5642"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46184">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46173">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46174">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46175">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46176">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46177">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_volume_group_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47146">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5557"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47148">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47149">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_plain_volume"
              c:identifier="udisks_volume_group_complete_create_plain_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47206">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5569"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47208">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47209">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47210">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_thin_pool_volume"
              c:identifier="udisks_volume_group_complete_create_thin_pool_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47229">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5574"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47231">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47232">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47233">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_thin_volume"
              c:identifier="udisks_volume_group_complete_create_thin_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47252">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5579"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47254">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47255">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47256">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_vdo_volume"
              c:identifier="udisks_volume_group_complete_create_vdo_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47275">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5584"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47277">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47278">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47279">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_volume_group_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47103">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5548"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47105">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47106">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_empty_device"
              c:identifier="udisks_volume_group_complete_empty_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47166">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5561"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47168">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47169">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_poll"
              c:identifier="udisks_volume_group_complete_poll"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47083">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5544"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47085">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47086">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_volume_group_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47186">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5565"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47188">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47189">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rename"
              c:identifier="udisks_volume_group_complete_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47123">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5552"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47125">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47126">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47127">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_volume_group_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45649">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5826"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45657">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45651">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_volume_group_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45708">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5830"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45716">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45710">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extent_size"
              c:identifier="udisks_volume_group_get_extent_size"
              glib:get-property="extent-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45819">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5839"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45827">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45821">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_free_size"
              c:identifier="udisks_volume_group_get_free_size"
              glib:get-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45782">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5836"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45790">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45784">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_volume_group_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45627">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5825"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45637">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45629">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_polling"
              c:identifier="udisks_volume_group_get_needs_polling"
              glib:get-property="needs-polling"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45856">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5842"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45864">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45858">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_volume_group_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45745">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5833"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45753">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45747">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_volume_group_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45686">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5829"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45696">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45688">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_extent_size"
              c:identifier="udisks_volume_group_set_extent_size"
              glib:set-property="extent-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45839">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5840"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45841">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45842">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_free_size"
              c:identifier="udisks_volume_group_set_free_size"
              glib:set-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45802">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5837"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45804">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45805">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_volume_group_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45669">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45671">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45672">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_polling"
              c:identifier="udisks_volume_group_set_needs_polling"
              glib:set-property="needs-polling"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45876">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5843"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45878">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45879">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_volume_group_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45765">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5834"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45767">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45768">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_volume_group_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45728">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5831"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45730">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45731">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="extent-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_extent_size"
                getter="get_extent_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45603">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="free-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_free_size"
                getter="get_free_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45592">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45559">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="needs-polling"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_needs_polling"
                getter="get_needs_polling"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45614">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45581">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45570">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45364">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45375">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45367">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45368">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45369">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-plain-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45443">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_plain_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45455">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45446">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45447">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45448">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45449">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-thin-pool-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45470">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_thin_pool_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45482">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45473">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45474">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45475">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45476">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-thin-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45497">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_thin_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45510">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45500">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45501">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45502">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45503">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45504">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-vdo-volume" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45525">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_vdo_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45543">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45528">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45529">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45530">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45531">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45532">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45533">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45534">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45535">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45536">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45537">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45312">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45323">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45315">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45316">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45317">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-empty-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45390">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_empty_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45401">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45393">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45394">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45395">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-poll" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45288">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_poll() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45297">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45291">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45416">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45428">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45419">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45420">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45421">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45422">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rename" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45338">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_rename() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45349">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45341">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45342">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45343">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="VolumeGroupIface"
            c:type="UDisksVolumeGroupIface"
            glib:is-gtype-struct-for="VolumeGroup"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45256">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5531"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45258">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="5449"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_plain_volume">
        <callback name="handle_create_plain_volume">
          <source-position filename="udisks-generated.h" line="5455"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_thin_pool_volume">
        <callback name="handle_create_thin_pool_volume">
          <source-position filename="udisks-generated.h" line="5462"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_thin_volume">
        <callback name="handle_create_thin_volume">
          <source-position filename="udisks-generated.h" line="5469"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_pool" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_vdo_volume">
        <callback name="handle_create_vdo_volume">
          <source-position filename="udisks-generated.h" line="5477"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_lv_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_pool_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_data_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_virtual_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_index_memory" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_compression" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_deduplication" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_write_policy" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="5490"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_wipe" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_empty_device">
        <callback name="handle_empty_device">
          <source-position filename="udisks-generated.h" line="5496"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_poll">
        <callback name="handle_poll">
          <source-position filename="udisks-generated.h" line="5502"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="5506"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_wipe" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rename">
        <callback name="handle_rename">
          <source-position filename="udisks-generated.h" line="5513"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_extent_size">
        <callback name="get_extent_size">
          <source-position filename="udisks-generated.h" line="5519"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45827">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="45821">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_free_size">
        <callback name="get_free_size">
          <source-position filename="udisks-generated.h" line="5521"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45790">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="45784">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="5523"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45637">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="45629">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_needs_polling">
        <callback name="get_needs_polling">
          <source-position filename="udisks-generated.h" line="5525"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45864">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="45858">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="5527"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45753">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="45747">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="5529"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45696">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="45688">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VolumeGroupProxy"
           c:symbol-prefix="volume_group_proxy"
           c:type="UDisksVolumeGroupProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksVolumeGroupProxy"
           glib:get-type="udisks_volume_group_proxy_get_type"
           glib:type-struct="VolumeGroupProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47300">The #UDisksVolumeGroupProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5869"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="VolumeGroup"/>
      <constructor name="new_finish"
                   c:identifier="udisks_volume_group_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47646">Finishes an operation started with udisks_volume_group_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5885"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47653">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47648">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_volume_group_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47742">Finishes an operation started with udisks_volume_group_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5904"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47749">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47744">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_volume_group_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47769">Like udisks_volume_group_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_volume_group_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5907"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47784">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47771">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47772">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47773">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47774">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47775">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_volume_group_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47673">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_volume_group_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5888"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47688">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47675">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47676">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47677">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47678">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47679">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_volume_group_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47614">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_proxy_new_finish() to get the result of the operation.

See udisks_volume_group_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5877"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47616">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47617">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47618">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47619">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47620">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47621">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47622">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_volume_group_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47710">Like udisks_volume_group_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_volume_group_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5896"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47712">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47713">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47714">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47715">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47716">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47717">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47718">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VolumeGroupProxyPrivate"
              c:type="UDisksVolumeGroupProxyPrivate*"/>
      </field>
    </class>
    <record name="VolumeGroupProxyClass"
            c:type="UDisksVolumeGroupProxyClass"
            glib:is-gtype-struct-for="VolumeGroupProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47308">Class structure for #UDisksVolumeGroupProxy.</doc>
      <source-position filename="udisks-generated.h" line="5869"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47310">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="VolumeGroupProxyPrivate"
            c:type="UDisksVolumeGroupProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5857"/>
    </record>
    <class name="VolumeGroupSkeleton"
           c:symbol-prefix="volume_group_skeleton"
           c:type="UDisksVolumeGroupSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksVolumeGroupSkeleton"
           glib:get-type="udisks_volume_group_skeleton_get_type"
           glib:type-struct="VolumeGroupSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47808">The #UDisksVolumeGroupSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5939"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="VolumeGroup"/>
      <constructor name="new"
                   c:identifier="udisks_volume_group_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48330">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5947"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48335">The skeleton object.</doc>
          <type name="VolumeGroupSkeleton" c:type="UDisksVolumeGroup*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VolumeGroupSkeletonPrivate"
              c:type="UDisksVolumeGroupSkeletonPrivate*"/>
      </field>
    </class>
    <record name="VolumeGroupSkeletonClass"
            c:type="UDisksVolumeGroupSkeletonClass"
            glib:is-gtype-struct-for="VolumeGroupSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47816">Class structure for #UDisksVolumeGroupSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5939"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47818">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="VolumeGroupSkeletonPrivate"
            c:type="UDisksVolumeGroupSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5927"/>
    </record>
    <function name="block_interface_info"
              c:identifier="udisks_block_interface_info"
              moved-to="Block.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="13730">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="1543"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13735">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_lvm2_interface_info"
              c:identifier="udisks_block_lvm2_interface_info"
              moved-to="BlockLVM2.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42141">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5168"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42146">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_lvm2_override_properties"
              c:identifier="udisks_block_lvm2_override_properties"
              moved-to="BlockLVM2.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42156">Overrides all #GObject properties in the #UDisksBlockLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5169"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42164">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42158">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42159">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="block_override_properties"
              c:identifier="udisks_block_override_properties"
              moved-to="Block.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="13743">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="1544"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13751">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13745">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13746">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_ata_interface_info"
              c:identifier="udisks_drive_ata_interface_info"
              moved-to="DriveAta.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="8773">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="1008"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8778">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_ata_override_properties"
              c:identifier="udisks_drive_ata_override_properties"
              moved-to="DriveAta.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="8786">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="1009"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8794">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8788">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8789">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_interface_info"
              c:identifier="udisks_drive_interface_info"
              moved-to="Drive.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4287">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="602"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4292">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_override_properties"
              c:identifier="udisks_drive_override_properties"
              moved-to="Drive.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4300">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="603"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4308">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4302">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4303">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="encrypted_interface_info"
              c:identifier="udisks_encrypted_interface_info"
              moved-to="Encrypted.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27347">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3247"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27352">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="encrypted_override_properties"
              c:identifier="udisks_encrypted_override_properties"
              moved-to="Encrypted.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="27360">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3248"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27368">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27362">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27363">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark"
              c:identifier="udisks_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="filesystem_btrfs_interface_info"
              c:identifier="udisks_filesystem_btrfs_interface_info"
              moved-to="FilesystemBTRFS.interface_info"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38368">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4614"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38373">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_btrfs_override_properties"
              c:identifier="udisks_filesystem_btrfs_override_properties"
              moved-to="FilesystemBTRFS.override_properties"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38383">Overrides all #GObject properties in the #UDisksFilesystemBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4615"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38391">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38385">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38386">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="filesystem_interface_info"
              c:identifier="udisks_filesystem_interface_info"
              moved-to="Filesystem.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23359">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2670"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23364">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_override_properties"
              c:identifier="udisks_filesystem_override_properties"
              moved-to="Filesystem.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23372">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2671"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23380">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23374">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23375">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="job_interface_info"
              c:identifier="udisks_job_interface_info"
              moved-to="Job.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34941">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4171"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34946">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="job_override_properties"
              c:identifier="udisks_job_override_properties"
              moved-to="Job.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34954">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4172"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34962">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34956">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34957">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="logical_volume_interface_info"
              c:identifier="udisks_logical_volume_interface_info"
              moved-to="LogicalVolume.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48954">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6049"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48959">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="logical_volume_override_properties"
              c:identifier="udisks_logical_volume_override_properties"
              moved-to="LogicalVolume.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48969">Overrides all #GObject properties in the #UDisksLogicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6050"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48977">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48971">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48972">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="loop_interface_info"
              c:identifier="udisks_loop_interface_info"
              moved-to="Loop.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29367">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3519"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29372">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="loop_override_properties"
              c:identifier="udisks_loop_override_properties"
              moved-to="Loop.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29380">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3520"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29388">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29382">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29383">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_btrfs_interface_info"
              c:identifier="udisks_manager_btrfs_interface_info"
              moved-to="ManagerBTRFS.interface_info"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36951">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4382"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36956">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_btrfs_override_properties"
              c:identifier="udisks_manager_btrfs_override_properties"
              moved-to="ManagerBTRFS.override_properties"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36966">Overrides all #GObject properties in the #UDisksManagerBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4383"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36974">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36968">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36969">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="udisks_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="797">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="802">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_lvm2_interface_info"
              c:identifier="udisks_manager_lvm2_interface_info"
              moved-to="ManagerLVM2.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41207">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4999"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41212">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_lvm2_override_properties"
              c:identifier="udisks_manager_lvm2_override_properties"
              moved-to="ManagerLVM2.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41222">Overrides all #GObject properties in the #UDisksManagerLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5000"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41230">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41224">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41225">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_override_properties"
              c:identifier="udisks_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="810">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="818">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="812">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="813">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mdraid_interface_info"
              c:identifier="udisks_mdraid_interface_info"
              moved-to="MDRaid.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31327">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3785"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31332">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="mdraid_override_properties"
              c:identifier="udisks_mdraid_override_properties"
              moved-to="MDRaid.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31342">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3786"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31350">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31344">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31345">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_interface_info"
              c:identifier="udisks_partition_interface_info"
              moved-to="Partition.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20555">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2336"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20560">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_override_properties"
              c:identifier="udisks_partition_override_properties"
              moved-to="Partition.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20568">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2337"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20576">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20570">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20571">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_table_interface_info"
              c:identifier="udisks_partition_table_interface_info"
              moved-to="PartitionTable.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18700">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2068"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18705">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_table_override_properties"
              c:identifier="udisks_partition_table_override_properties"
              moved-to="PartitionTable.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18713">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2069"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18721">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18715">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18716">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="physical_volume_interface_info"
              c:identifier="udisks_physical_volume_interface_info"
              moved-to="PhysicalVolume.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43255">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5312"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43260">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="physical_volume_override_properties"
              c:identifier="udisks_physical_volume_override_properties"
              moved-to="PhysicalVolume.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43270">Overrides all #GObject properties in the #UDisksPhysicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5313"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43278">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43272">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43273">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="swapspace_interface_info"
              c:identifier="udisks_swapspace_interface_info"
              moved-to="Swapspace.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25654">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3003"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25659">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="swapspace_override_properties"
              c:identifier="udisks_swapspace_override_properties"
              moved-to="Swapspace.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="25667">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3004"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25675">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25669">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25670">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="udiskserror">
      <doc xml:space="preserve"
           filename="udiskserror.c"
           line="26">Error codes and D-Bus errors.</doc>
    </docsection>
    <function name="vdo_volume_interface_info"
              c:identifier="udisks_vdo_volume_interface_info"
              moved-to="VDOVolume.interface_info"
              version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52787">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6494"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52792">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="vdo_volume_override_properties"
              c:identifier="udisks_vdo_volume_override_properties"
              moved-to="VDOVolume.override_properties"
              version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52802">Overrides all #GObject properties in the #UDisksVDOVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6495"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52810">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52804">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52805">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="volume_group_interface_info"
              c:identifier="udisks_volume_group_interface_info"
              moved-to="VolumeGroup.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45207">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5539"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45212">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="volume_group_override_properties"
              c:identifier="udisks_volume_group_override_properties"
              moved-to="VolumeGroup.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45222">Overrides all #GObject properties in the #UDisksVolumeGroup interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5540"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45230">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45224">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45225">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
